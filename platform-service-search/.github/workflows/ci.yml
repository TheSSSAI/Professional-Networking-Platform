name: CI - Build, Test, Scan

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint-and-format:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check formatting with Prettier
        run: npm run format:check

  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    services:
      opensearch:
        image: opensearchproject/opensearch:2.11.0
        ports:
          - 9200:9200
        environment:
          - discovery.type=single-node
          - OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m
          - plugins.security.disabled=true
        options: --health-cmd="curl -f http://localhost:9200/_cluster/health || exit 1" --health-interval=10s --health-timeout=5s --health-retries=10
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          OPENSEARCH_NODE: http://localhost:9200
          OPENSEARCH_USERNAME: admin
          OPENSEARCH_PASSWORD: admin
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          # Mock other external service URLs
          GRPC_CONNECTIONS_SERVICE_URL: localhost:50052
          GRPC_PROFILE_SERVICE_URL: localhost:50051

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info

  security:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js from .nvmrc
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      # Software Composition Analysis (SCA)
      - name: Scan for vulnerable dependencies
        run: npm audit --audit-level=high

      # Static Application Security Testing (SAST) - using a simple one as an example
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # Or set to false to fail the build
        with:
          command: test
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false # Do not push on CI, only build
          load: true # Load the image to the runner for scanning
          tags: local/platform-service-search:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Container Image Scanning
      - name: Scan container image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'local/platform-service-search:${{ github.sha }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'