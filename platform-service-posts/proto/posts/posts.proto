syntax = "proto3";

package posts;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// The Posts service definition, outlining all RPCs for managing posts.
// This service is the central point for all post-related operations.
service PostsService {
  // Creates a new post.
  rpc CreatePost (CreatePostRequest) returns (PostResponse);

  // Retrieves a single post by its ID, enforcing visibility rules.
  rpc GetPostById (GetPostByIdRequest) returns (PostResponse);
  
  // Retrieves a paginated list of posts for a specific user's profile.
  rpc GetPostsByAuthor (GetPostsByAuthorRequest) returns (PostsListResponse);

  // Updates an existing post. Caller must be the author.
  rpc UpdatePost (UpdatePostRequest) returns (PostResponse);

  // Deletes a post. Caller must be the author.
  rpc DeletePost (DeletePostRequest) returns (google.protobuf.Empty);

  // Deletes a post as an administrator. Bypasses author ownership check.
  rpc DeletePostAsAdmin (DeletePostAsAdminRequest) returns (google.protobuf.Empty);

  // Reports a post as inappropriate.
  rpc ReportPost (ReportPostRequest) returns (google.protobuf.Empty);
}

// ===================================
// Message Definitions
// ===================================

// Represents a media item (image) associated with a post.
message Media {
  string id = 1;
  string url = 2; // The full CDN URL for the media.
  string type = 3; // e.g., "image/jpeg", "image/png"
  int32 order = 4;
}

// Represents a link preview generated from a URL in a post.
message LinkPreview {
  string url = 1;
  string title = 2;
  string description = 3;
  string image_url = 4;
}

// The main Post entity representation.
message PostResponse {
  string id = 1;
  string author_id = 2;
  string text_content = 3;
  repeated Media media = 4;
  optional LinkPreview link_preview = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
}

message PostsListResponse {
  repeated PostResponse posts = 1;
  int32 total = 2;
  int32 page = 3;
  int32 limit = 4;
}

// ===================================
// Request Messages
// ===================================

message CreatePostRequest {
  string text_content = 1;
  repeated string media_object_keys = 2; // S3 object keys for pre-uploaded media.
}

message GetPostByIdRequest {
  string post_id = 1;
}

message GetPostsByAuthorRequest {
  string author_id = 1;
  int32 page = 2;
  int32 limit = 3;
}

message UpdatePostRequest {
  string post_id = 1;
  optional string text_content = 2;
  // To update media, clients would typically manage uploads and then provide the new set of keys.
  // A simple implementation might involve replacing all media.
  repeated string media_object_keys = 3; 
}

message DeletePostRequest {
  string post_id = 1;
}

message DeletePostAsAdminRequest {
  string post_id = 1;
  string admin_id = 2; // For audit logging purposes.
}

message ReportPostRequest {
  string post_id = 1;
  string reason = 2;
}