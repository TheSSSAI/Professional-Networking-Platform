/**
 * -----------------------------------------------------------------------------
 * File: src/gateway.ts
 * -----------------------------------------------------------------------------
 *
 * This file is the primary entry point for the AWS Lambda function that hosts
 * the Apollo Federation Gateway. It is responsible for:
 *
 * 1.  **Observability Initialization**: Setting up the OpenTelemetry SDK for
 *     distributed tracing compatible with AWS X-Ray. This is done at the very
 *     top to ensure all subsequent operations, including module imports and
 *     server initialization, are properly instrumented.
 *
 * 2.  **Server Instantiation**: Creating an instance of the `ApolloGatewayLambda`
 *     class defined in `src/server.ts`. This is done in the global scope to
 *     leverage Lambda's container reuse for "warm starts", significantly
 *     improving performance by not re-initializing the server on every
 *     invocation.
 *
 * 3.  **Handler Export**: Creating and exporting the actual Lambda handler function.
 *     This handler is generated by the server instance and is compliant with the
 *     AWS API Gateway HTTP API v2 payload format.
 * -----------------------------------------------------------------------------
 */

import { NodeSDK } from '@opentelemetry/sdk-node';
import { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';
import { Resource } from '@opentelemetry/resources';
import { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';
import { AwsLambdaInstrumentation } from '@opentelemetry/instrumentation-aws-lambda';
import { HttpInstrumentation } from '@opentelemetry/instrumentation-http';
import { GraphQLInstrumentation } from '@opentelemetry/instrumentation-graphql';
import { AWSXRayPropagator } from '@opentelemetry/propagator-aws-xray';
import { AWSXRayIdGenerator } from '@opentelemetry/id-generator-aws-xray';
import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';

import { ApolloGatewayLambda } from './server';

// --- Observability Initialization ---
// This block must execute before any other application logic, including the
// server instantiation, to ensure all operations are traced.

const serviceName = process.env.SERVICE_NAME || 'platform-api-gateway';
const serviceVersion = process.env.SERVICE_VERSION || '1.0.0';

const initializeTracing = (): NodeSDK => {
  // Configure the OTLP exporter. In a Lambda environment, this often points to a
  // collector running as a sidecar or a local endpoint provided by the runtime.
  // For AWS managed Lambda runtimes with X-Ray integration, the collector endpoint
  // is often handled automatically. We configure it here for completeness.
  const traceExporter = new OTLPTraceExporter();

  const sdk = new NodeSDK({
    resource: new Resource({
      [SemanticResourceAttributes.SERVICE_NAME]: serviceName,
      [SemanticResourceAttributes.SERVICE_VERSION]: serviceVersion,
    }),
    traceExporter,
    spanProcessor: new BatchSpanProcessor(traceExporter),
    // For AWS X-Ray compatibility
    idGenerator: new AWSXRayIdGenerator(),
    textMapPropagator: new AWSXRayPropagator(),
    instrumentations: [
      new AwsLambdaInstrumentation({
        // Optional: disable aws-sdk instrumentation if not needed or
        // if it causes issues with specific services.
        disableAwsSdkInstrumentation: false,
        // Hook to add additional attributes from the Lambda event/context.
        eventHook: (span, { event, context }) => {
          span.setAttribute('faas.execution', context.awsRequestId);
          span.setAttribute('cloud.account.id', context.invokedFunctionArn.split(':')[4]);
        },
      }),
      // Instrument outgoing HTTP requests, which is crucial for tracing
      // Apollo Gateway's calls to downstream subgraph services.
      new HttpInstrumentation(),
      // Instrument the GraphQL layer to get detailed resolver-level traces.
      new GraphQLInstrumentation({
        // Optional configuration to enhance GraphQL spans
        mergeItems: true,
        allowValues: true,
      }),
    ],
  });

  // Gracefully shut down the SDK on process exit
  process.on('SIGTERM', () => {
    sdk
      .shutdown()
      .then(() => console.log('Tracing terminated'))
      .catch((error) => console.error('Error terminating tracing', error))
      .finally(() => process.exit(0));
  });

  return sdk;
};

// Initialize and start the OpenTelemetry SDK.
const otelSDK = initializeTracing();
otelSDK.start();

console.log('OpenTelemetry SDK for AWS Lambda initialized and started.');

// --- Server Instantiation & Handler Export ---
// This logic runs once per Lambda container initialization (cold start).
// The `server` and `handler` instances are reused across subsequent
// invocations (warm starts), which is critical for performance.

console.log('Initializing Apollo Gateway Server...');

// Instantiate the server class which encapsulates all Apollo Gateway and Server logic.
// This will read configuration, set up the gateway with its data sources,
// configure caching, and prepare the server.
const server = new ApolloGatewayLambda();

console.log('Apollo Gateway Server initialized.');

// Create the handler function that AWS Lambda will invoke.
// The `createHandler` method returns a function that is compatible with
// the API Gateway HTTP API (v2) event payload.
export const handler = server.createHandler();

console.log('Lambda handler created and exported.');