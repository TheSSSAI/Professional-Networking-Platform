"task_id","task_name","primary_skill","secondary_skills","complexity_level","estimated_hours","required_experience","productivity_factor","adjusted_hours","team_size","collaboration_required","dependencies","critical_path","skill_learning_curve","ramp_up_hours","resource_notes","alternative_approach","risk_factors","mitigation_strategy","quality_overhead","review_hours","documentation_hours","testing_coordination","integration_overhead"
"TASK-002","Implement VPC Networking with Terraform","Terraform","AWS","Medium","8.33","Senior","1.2","6.94","1","","TASK-001","true","None","0.5","Requires strong Terraform skills and understanding of AWS networking primitives.","Could be assigned to a Senior Backend Dev with AWS experience, incurring a 20% productivity penalty.","Key-person dependency on DevOps Lead (RISK-006).","Mandate peer review by a backend engineer to distribute knowledge.","1.04","0.69","0.35","1","0.5"
"TASK-032","BE: Implement Login Endpoint and JWT Generation","NestJS","JWT,bcrypt,Security","High","10.33","Senior","1.2","8.61","1","true","TASK-028","true","None","1","Security-critical task. Requires expertise in JWT-based authentication flows and secure password handling.","Could be split between two mid-level developers, but requires senior oversight, increasing review overhead by 50%.","Risk of security vulnerabilities if implemented incorrectly. Potential for cascading failures if service is not resilient (RISK-001).","Mandatory security code review by a second senior engineer. Implement Circuit Breaker patterns for dependencies.","1.29","1.29","0.43","2","1.5"
"TASK-035","FE: Implement Client-Side Session Handling","React","TypeScript,Security,JWT","High","16","Senior","1.2","13.33","1","true","TASK-032,TASK-033,TASK-034","true","Low","2","Requires deep understanding of secure token storage (HttpOnly cookies) and managing auth state in a React/Next.js app.","A mid-level developer could implement with significant senior pairing, increasing total hours by 30%.","High risk of client-side security vulnerabilities (XSS, token leakage) if not implemented correctly.","Dedicated security review and E2E testing for session expiry and refresh flows.","2","1.33","0.67","3","2.5"
"TASK-057","BE: Implement Connection Service Logic","NestJS","TypeORM,Microservices","Medium","10.33","Mid","1","10.33","1","","TASK-056","true","Low","1","Core business logic for the social graph. Requires careful handling of state transitions (pending, accepted).","Can be developed by a senior engineer with higher productivity, reducing time by ~20%.","Potential for race conditions if not handled with database transactions. Risk of high latency if queries are not optimized (RISK-001).","Use database transactions for all state changes. Implement health checks and basic alerts for the new service.","1.55","1.03","0.52","2","1.5"
"TASK-065","Write E2E Test for Accepting a Connection","Cypress","Testing,CI/CD","High","10.5","Mid","1","10.5","1","","TASK-064","","None","0.5","Requires managing state for two separate users within the test framework to simulate the end-to-end flow.","Could be done as a series of API integration tests, but would not validate the UI flow.","Test fragility due to complex multi-user state management.","Create custom Cypress commands to abstract login/logout for different users. Ensure a stable test environment.","","1.05","0.53","","1"