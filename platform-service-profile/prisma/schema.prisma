// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS

enum Visibility {
  PUBLIC
  PRIVATE

  @@map("visibility")
}

// MODELS

model UserProfile {
  userId            String  @id @unique
  name              String? @db.VarChar(100)
  headline          String? @db.VarChar(220)
  location          String?
  profilePictureUrl String?
  bannerImageUrl    String?
  customUrlSlug     String? @unique
  contactDetails    Json?

  visibility Visibility @default(PUBLIC)

  workExperiences WorkExperience[]
  educations      Education[]
  skills          UserProfileSkill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profiles")
}

model WorkExperience {
  id          String   @id @default(uuid())
  company     String
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String?  @db.Text

  profileId String
  profile   UserProfile @relation(fields: [profileId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_experiences")
}

model Education {
  id            String   @id @default(uuid())
  institution   String
  degree        String
  fieldOfStudy  String
  startDate     DateTime
  endDate       DateTime?

  profileId String
  profile   UserProfile @relation(fields: [profileId], references: [userId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("education_entries")
}

model Skill {
  id   String @id @default(uuid())
  name String @unique @db.VarChar(50)

  userProfileSkills UserProfileSkill[]
  endorsements      SkillEndorsement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("skills")
}

model UserProfileSkill {
  profileUserId String
  skillId       String

  endorsementCount Int @default(0)

  profile      UserProfile        @relation(fields: [profileUserId], references: [userId], onDelete: Cascade)
  skill        Skill              @relation(fields: [skillId], references: [id], onDelete: Cascade)
  endorsements SkillEndorsement[]

  createdAt DateTime @default(now())

  @@id([profileUserId, skillId])
  @@map("user_profile_skills")
}

model SkillEndorsement {
  id              String @id @default(uuid())
  endorserUserId  String
  endorsedSkillId String

  endorsedSkill UserProfileSkill @relation(fields: [endorsedSkillId], references: [profileUserId, skillId], onDelete: Cascade)
  skill         Skill            @relation(fields: [endorsedSkillId], references: [id], onDelete: Cascade) // Simplified relation for easier queries

  createdAt DateTime @default(now())

  @@unique([endorserUserId, endorsedSkillId])
  @@map("skill_endorsements")
}