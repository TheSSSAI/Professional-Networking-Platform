"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-IA-101.1","Scaffold NestJS Project and Configure Global Pipes/Filters","Use the NestJS CLI to generate the project structure. Create placeholder modules for Auth, Users, and Config. Implement a global ValidationPipe and a custom exception filter for standardized error responses.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-04","4","2","backend,nestjs,setup","Sprint 1","Establish project foundation, CI/CD, and core user registration.","Core Project Setup & DevOps","EPIC-001","Identity & Access Management Service","US-101","","NestJS,TypeScript","Low","Low","Project is generated and runs via `npm run start:dev`. A `/health` endpoint returns a 200 OK status. Global `ValidationPipe` is registered. A global exception filter is in place.","Code reviewed; Unit tests passing; Deployed to dev environment.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Unit testing of health endpoint and filters.","Initial commit to the new repository.","Enables all subsequent feature development."
"TASK-IA-102.1","Implement Database (TypeORM) and Cache (Redis) Configuration","Integrate `@nestjs/typeorm` and a Redis module. Load all connection credentials from environment variables using `@nestjs/config`. Define initial `User` and `UserToken` TypeORM entities.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-05","6.3","3","backend,database,redis,typeorm","Sprint 1","Establish project foundation, CI/CD, and core user registration.","Core Project Setup & DevOps","EPIC-001","Identity & Access Management Service","US-101","TASK-IA-101.1","NestJS,TypeORM,Redis,PostgreSQL","Medium","Low","Application configuration correctly loads DB and Redis connection strings from `.env` file. Application successfully establishes connections to PostgreSQL and Redis upon startup.","Code reviewed; Integration tests for connectivity passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","DevOps for environment variable standards.","PostgreSQL and Redis instances must be available.","Integration test for successful DB and Cache connections.","Requires environment variables to be set in deployment pipeline.","Provides data persistence and caching layers for the application."
"TASK-IA-102.2","Create Initial Database Migration Script","Using TypeORM's migration tools, generate and refine the initial SQL migration script to create the `users` and `user_tokens` tables based on the defined entities.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-06","3.3","2","database,typeorm,migration","Sprint 1","Establish project foundation, CI/CD, and core user registration.","Core Project Setup & DevOps","EPIC-001","Identity & Access Management Service","US-101","TASK-IA-102.1","TypeORM,SQL,PostgreSQL","Low","Low","A migration file is generated. Running `typeorm migration:run` successfully creates the tables. The table schemas match the entity definitions.","Migration script is peer-reviewed and tested against a clean database.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Manual or automated execution of the migration script.","Migration must be run as part of the CD pipeline.","Creates the foundational data schema for user management."
"TASK-IA-103.1","Create Multi-Stage Dockerfile for Production","Develop a `Dockerfile` that uses a `builder` stage to install all dependencies and compile the TypeScript code. The final stage should copy from the builder only the `dist` folder, `node_modules`, and `package.json` into a slim Node.js production image.","Task","Sprint Backlog","Critical","devops.eng@company.com","tech.lead@company.com","2024-11-07","4","2","devops,docker","Sprint 1","Establish project foundation, CI/CD, and core user registration.","Core Project Setup & DevOps","EPIC-001","Identity & Access Management Service","US-102","TASK-IA-101.1","Docker","Low","Low","The `docker build` command completes successfully. The final image size is under 200MB. The image runs successfully and the application starts.","Dockerfile is reviewed and tested locally.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","Backend team to confirm build steps.","","Local build and run of the Docker image.","This Dockerfile will be used in the CI/CD pipeline.","Creates a standardized, portable artifact for deployment."
"TASK-IA-103.2","Create Docker Compose for Local Development","Develop a `docker-compose.yml` file defining three services: `app`, `db` (PostgreSQL), and `cache` (Redis). The `app` service should mount the local source code for live reloading.","Task","Sprint Backlog","Critical","devops.eng@company.com","tech.lead@company.com","2024-11-08","6","3","devops,docker,docker-compose","Sprint 1","Establish project foundation, CI/CD, and core user registration.","Core Project Setup & DevOps","EPIC-001","Identity & Access Management Service","US-102","TASK-IA-103.1","Docker,Docker Compose,YAML","Medium","Low","`docker-compose up` starts all services without errors. The application container can connect to the database and cache containers. Changes made to local source code are reflected.","The local development environment can be started with a single command.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","Backend team to validate the developer experience.","","Each developer on the team must successfully run the local environment.","","Ensures a consistent and reproducible development environment for all team members."
"TASK-IA-104.1","Setup CI Workflow for Build, Lint, and Test","Create the initial GitHub Actions workflow file (`ci.yml`). Define a job that checks out code, sets up Node.js, installs dependencies, and runs the `lint` and `test` scripts. The workflow should trigger on `pull_request` events.","Task","Sprint Backlog","Critical","devops.eng@company.com","tech.lead@company.com","2024-11-11","6.3","3","devops,ci-cd,github-actions","Sprint 1","Establish project foundation, CI/CD, and core user registration.","Core Project Setup & DevOps","EPIC-001","Identity & Access Management Service","US-103","","GitHub Actions,YAML","Medium","Low","A pull request automatically triggers the workflow. The workflow succeeds if linting and tests pass. The workflow fails if either linting or tests fail, and blocks the PR from being merged.","A test PR successfully triggers and passes the CI workflow.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","Backend team to provide test and lint scripts.","","Creating a test PR with both passing and failing code.","","Automates the initial quality gates for all code changes."
"TASK-REG-201.1","Implement Password Hashing Service","Create a dedicated `PasswordService` to encapsulate `bcrypt` logic. It must include `hash(password)` and `compare(password, hash)` methods.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-06","3.2","2","backend,security,authentication","Sprint 1","Establish project foundation, CI/CD, and core user registration.","User Registration and Verification","EPIC-002","Identity & Access Management Service","US-001","","TypeScript,bcrypt,NestJS","Low","Medium","The `hash` method returns a valid bcrypt hash string. The `compare` method returns `true` for correct password/hash pairs and `false` for incorrect ones.","Code reviewed, 100% unit test coverage achieved.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","Security champion for review.","","Unit testing of hash and compare methods.","","Provides the core secure password handling mechanism."
"TASK-REG-201.2","Write Unit Tests for Password Hashing Service","Create a Jest test suite for `PasswordService` with 100% code coverage. Tests must cover both the `hash` and `compare` methods, including happy paths and failure cases.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-07","4","2","backend,testing,qa","Sprint 1","Establish project foundation, CI/CD, and core user registration.","User Registration and Verification","EPIC-002","Identity & Access Management Service","US-001","TASK-REG-201.1","Jest,TypeScript","Low","Low","Test suite achieves 100% statement and branch coverage for `password.service.ts`. Tests are passing in both local and CI environments.","Tests are reviewed and pass in the CI pipeline.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Execution in CI environment.","","Ensures the reliability and correctness of the password hashing logic."
"TASK-REG-202.1","Create User Registration DTO and Service Method","Create the `RegisterUserDto` with `class-validator` decorators for email, password complexity (regex), and age. Implement the `AuthService.register` method that takes this DTO, checks for email uniqueness, hashes the password, and creates a new User entity with 'inactive' status.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-12","6","3","backend,authentication,registration","Sprint 1","Establish project foundation, CI/CD, and core user registration.","User Registration and Verification","EPIC-002","Identity & Access Management Service","US-001","TASK-IA-102.1,TASK-REG-201.1","NestJS,TypeORM,class-validator","Medium","Medium","The `RegisterUserDto` correctly validates input. The `register` method checks for duplicate emails and throws a `ConflictException`. The method calls `PasswordService.hash` and creates a `User` entity.","Code reviewed; Unit and integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","","","Integration test covering success and failure cases (duplicate email, weak password).","","Implements the core logic for acquiring new users."
"TASK-REG-202.2","Write Integration Tests for Registration Endpoint","Create a Jest integration test suite for the registration endpoint. The suite must cover: successful registration, attempting to register with a duplicate email, and attempting to register with a password that fails complexity rules.","Task","Sprint Backlog","Critical","qa.engineer@company.com","tech.lead@company.com","2024-11-14","7.2","3","testing,qa,api","Sprint 1","Establish project foundation, CI/CD, and core user registration.","User Registration and Verification","EPIC-002","Identity & Access Management Service","US-001","TASK-REG-202.1","Jest,NestJS,Supertest,TypeORM","Medium","Low","Test for successful registration asserts a 201 status and checks the database for the new user. Test for duplicate email asserts a 409 status. Test for invalid password asserts a 400 status.","All test cases implemented and passing in the CI pipeline.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-04","2024-11-15","100%","Backend developer to clarify endpoint behavior.","","Requires a test database environment.","","Validates the correctness and security of the user registration flow."
"TASK-REG-203.1","Implement Token Service for Verification Tokens","Create a `TokenService` responsible for generating and validating verification tokens. Implement a method `generateVerificationToken(userId)` that creates a secure random string, associates it with the user, sets a 24-hour expiry, and saves it to the `user_tokens` table.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-19","6.3","3","backend,security,token","Sprint 2","Complete user activation flow and implement secure login/logout system.","User Registration and Verification","EPIC-002","Identity & Access Management Service","US-002","TASK-IA-102.1","NestJS,TypeORM,Node.js crypto","Medium","High","The service generates a unique, unguessable token. A record is created in `user_tokens` with the correct userId, token, type, and expiry. The service includes a method to find and validate a token.","Code reviewed for security; 100% unit test coverage.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Unit and integration tests for token generation and validation.","","Provides a secure mechanism for email verification and password resets."
"TASK-REG-204.1","Integrate Token Generation and Event Publishing into Registration Flow","Modify the `AuthService.register` method. After successfully creating the user, it must call the `TokenService` to generate a verification token. Then, it must publish a `UserRegistered` event to the event bus containing the `userId`, `email`, and the plaintext `token`.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-20","3","2","backend,events,registration","Sprint 2","Complete user activation flow and implement secure login/logout system.","User Registration and Verification","EPIC-002","Identity & Access Management Service","US-002","TASK-REG-202.1,TASK-REG-203.1","NestJS,TypeORM,Event-driven architecture","Medium","Medium","The registration transaction now includes creating a user and a token. A `UserRegistered` event is published upon successful completion of the transaction. If token creation fails, the entire transaction is rolled back.","Code reviewed; Integration test passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","Event bus must be available.","Integration test verifying DB records and event publication.","","Connects the registration process to the notification system."
"TASK-REG-204.2","Implement Email Verification Endpoint","Create a new public endpoint (e.g., GraphQL mutation `verifyEmail(token)`) that accepts a verification token. The handler will use the `TokenService` to validate the token. If valid, it updates the user's status to 'active' and deletes the token.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-21","6.2","3","backend,api,verification","Sprint 2","Complete user activation flow and implement secure login/logout system.","User Registration and Verification","EPIC-002","Identity & Access Management Service","US-003","TASK-REG-203.1","NestJS,TypeORM","Medium","Low","The endpoint is publicly accessible. It correctly calls `TokenService.validate`. On successful validation, it updates the `User` status to 'active' and deletes the used token. The entire operation is transactional.","Code reviewed; Integration tests passing for all scenarios.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Integration tests for valid, invalid, expired, and reused tokens.","","Enables users to activate their accounts, completing the onboarding loop."
"TASK-AUTH-301.1","Implement Login Service Logic","Create the `AuthService.login` method. It should find the user by email, use `PasswordService.compare` to validate the password, and check that the user's status is 'active'.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-22","5","2","backend,authentication,login","Sprint 2","Complete user activation flow and implement secure login/logout system.","User Authentication & Session Management","EPIC-003","Identity & Access Management Service","US-006","TASK-REG-201.1,TASK-REG-204.2","NestJS,TypeORM","Medium","Low","Method returns the user object on successful authentication. Method throws `UnauthorizedException` for incorrect credentials. Method throws `ForbiddenException` for an inactive user.","Code reviewed; Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Unit tests covering success and failure cases.","","Implements the core logic for authenticating existing users."
"TASK-AUTH-301.2","Implement JWT Generation and Login Endpoint","Integrate `@nestjs/jwt`. Update the login method to call `JwtService.sign` to generate access (15m expiry) and refresh (7d expiry) tokens upon successful authentication. Expose this via a `login` endpoint.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-25","6","3","backend,security,jwt","Sprint 2","Complete user activation flow and implement secure login/logout system.","User Authentication & Session Management","EPIC-003","Identity & Access Management Service","US-006","TASK-AUTH-301.1","NestJS,JWT","Medium","High","Successful login returns an `accessToken` and `refreshToken`. The JWT payload contains `sub` (userId) and a unique `jti`. JWTs have the correct expiry times.","Code reviewed for security; Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Integration tests to verify token structure and content.","Requires JWT secret to be configured in production.","Establishes secure, stateful sessions for users."
"TASK-AUTH-302.1","Implement JWT Passport Strategy","Using `@nestjs/passport` and `passport-jwt`, create a `JwtStrategy` that validates the signature and expiry of JWTs extracted from the `Authorization` header.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-26","6","3","backend,security,jwt,passport","Sprint 2","Complete user activation flow and implement secure login/logout system.","User Authentication & Session Management","EPIC-003","Identity & Access Management Service","US-104","TASK-AUTH-301.2","NestJS,Passport.js,JWT","Medium","Medium","The strategy correctly extracts the token from the header. It validates the token using the configured secret. It returns the user payload for valid tokens.","Code reviewed; Unit tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","","Unit tests for the strategy's validation logic.","","Provides the core validation logic for all protected API endpoints."
"TASK-AUTH-303.1","Implement Redis Service for Token Blocklist","Create a generic `RedisService` or a specific `BlocklistService` that abstracts Redis commands. Implement `addToBlocklist(jti, expiryInSeconds)` and `isBlocklisted(jti)` methods.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-27","6","3","backend,redis,security","Sprint 2","Complete user activation flow and implement secure login/logout system.","User Authentication & Session Management","EPIC-003","Identity & Access Management Service","US-007","TASK-IA-102.1","NestJS,Redis,TypeScript","Medium","High","The service can successfully set a key in Redis with a TTL. The service can check for the existence of a key. The service is covered by unit tests.","Code reviewed; Unit and integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-18","2024-11-29","100%","","Redis instance must be available.","Integration test against a live Redis instance.","","Enables immediate, server-side session invalidation."
"TASK-PWD-401.1","Implement 'Forgot Password' Endpoint Logic","Create the `/auth/forgot-password` endpoint. The service method will find the user by email, invalidate any previous reset tokens, call `TokenService` to create a new password reset token, and publish a `PasswordResetRequested` event.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-12-04","6.3","3","backend,authentication,password-reset","Sprint 3","Implement password recovery, session refresh, and security audit logging.","Account Recovery (Password Reset)","EPIC-004","Identity & Access Management Service","US-010","TASK-REG-203.1","NestJS,TypeORM","Medium","Medium","Endpoint identifies existing user. New token is generated. Event is published with email and token. Endpoint returns generic 200/OK response regardless of email existence.","Code reviewed; Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","Integration test for valid user and invalid user, asserting event publication.","","Initiates the self-service account recovery process."
"TASK-PWD-402.1","Implement 'Reset Password' Service Logic","Create the service method `resetPassword(token, newPassword)`. It must validate the token, validate the new password's complexity, hash the new password, update the user's record, and invalidate the token. The entire operation must be transactional.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-12-06","6.3","3","backend,security,password-reset","Sprint 3","Implement password recovery, session refresh, and security audit logging.","Account Recovery (Password Reset)","EPIC-004","Identity & Access Management Service","US-012","TASK-REG-201.1,TASK-REG-203.1","NestJS,TypeORM","High","High","Throws exceptions for invalid tokens/weak passwords. On success, updates password hash and deletes the reset token.","Code reviewed for security; Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","Integration tests covering success, invalid token, and weak password scenarios.","","Completes the secure account recovery process."
"TASK-OBS-703.1","Create Security Audit Log Schema and Service","Define the `SecurityAuditLog` TypeORM entity and create the corresponding database migration. Implement an `AuditService` with a method like `logSecurityEvent({ userId, action, ipAddress, userAgent })` that saves a new log entry.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-12-10","9.3","5","backend,observability,auditing,security","Sprint 3","Implement password recovery, session refresh, and security audit logging.","Observability and Auditing","EPIC-007","Identity & Access Management Service","US-020","","NestJS,TypeORM","Medium","Medium","The `security_audit_logs` table is created. The `AuditService` can successfully write a log entry. The write operation is asynchronous to not block the main thread.","Code reviewed; Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-02","2024-12-13","100%","","","Integration test to verify log entries are created.","Requires database migration.","Provides the foundational mechanism for security event logging."
"TASK-MFA-501.1","Implement MFA Secret Generation Endpoint","Create an endpoint for authenticated users to initiate MFA setup. Use `speakeasy` to generate a TOTP secret. Return this secret and a corresponding `otpauth://` URL to the client. The secret should be stored temporarily.","Task","Sprint Backlog","High","backend.dev2@company.com","tech.lead@company.com","2024-12-18","6","3","backend,security,mfa","Sprint 4","Deliver advanced security via MFA and foundational observability.","Advanced Security (MFA)","EPIC-005","Identity & Access Management Service","US-018","TASK-AUTH-302.1","NestJS,speakeasy","Medium","High","Endpoint is protected by auth guard. Returns a valid `otpauth` URL and secret. Secret is not saved to the user's permanent record.","Code reviewed; Integration test passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","","","Integration test to verify URL and secret generation.","","Initiates the user-facing MFA setup flow."
"TASK-MFA-502.1","Implement MFA Verification and Activation Endpoint","Create an endpoint that takes a TOTP code. Verify it against the user's temporary secret. On success, encrypt and save the secret to the User record, set `mfaEnabled` to true, generate recovery codes, hash them, and store them.","Task","Sprint Backlog","High","backend.dev2@company.com","tech.lead@company.com","2024-12-20","12","8","backend,security,mfa,crypto","Sprint 4","Deliver advanced security via MFA and foundational observability.","Advanced Security (MFA)","EPIC-005","Identity & Access Management Service","US-018","TASK-MFA-501.1","NestJS,speakeasy,crypto,TypeORM","High","High","Endpoint validates the TOTP code correctly. On success, `mfaEnabled` is set to true and the encrypted secret is saved. On success, a list of plaintext recovery codes is returned to the user.","Code reviewed for security; Integration tests passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-16","2024-12-27","100%","Security champion for review of encryption logic.","","Integration test for the full verification and activation flow.","Requires a secret key for encryption to be configured.","Completes the MFA setup process, securing the user's account."
"TASK-ACC-601.1","Implement Account Deactivation Endpoint and Service","Create a protected endpoint for account deactivation. The service logic must change the user's status to 'deactivated', call the blocklist service to invalidate all current sessions, and publish an `AccountDeactivated` event.","Task","Sprint Backlog","High","backend.dev1@company.com","tech.lead@company.com","2025-01-08","6","3","backend,account-lifecycle","Sprint 5","Implement account deactivation, reactivation, and deletion request flows.","Account Lifecycle Management","EPIC-006","Identity & Access Management Service","US-013","TASK-AUTH-303.1","NestJS,TypeORM","Medium","Low","Endpoint is protected by JWT auth guard. User status is updated to 'deactivated'. All user sessions are invalidated. An `AccountDeactivated` event is published.","Code reviewed; Integration test passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2025-01-06","2025-01-17","100%","","","Integration test verifying status change and token invalidation.","","Allows users to temporarily leave the platform without losing their data."
"TASK-ACC-603.1","Integrate Job Scheduling Library (e.g., BullMQ)","Add and configure a job queue library like BullMQ, backed by Redis. Create a dedicated queue for account deletion jobs.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2025-01-10","6.3","3","backend,infrastructure,jobs,bullmq","Sprint 5","Implement account deactivation, reactivation, and deletion request flows.","Account Lifecycle Management","EPIC-006","Identity & Access Management Service","US-015","TASK-IA-102.1","NestJS,Redis,BullMQ","Medium","High","The library is integrated into the NestJS application. The application connects to the job queue on startup. A sample job can be added to the queue with a delay.","Code reviewed; Integration test passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2025-01-06","2025-01-17","100%","","","Integration test to add and process a sample job.","Requires Redis to be configured for BullMQ.","Provides the infrastructure for reliable, delayed background processing."
"TASK-ACC-604.1","Implement Deletion Cancellation in Login Service","Modify `AuthService.login`. If a user with status 'pending_deletion' authenticates successfully, change their status to 'active' and remove the corresponding delayed job from the queue.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2025-01-22","8.3","5","backend,account-lifecycle,jobs","Sprint 6","Finalize and test the complete account deletion and cancellation lifecycle.","Account Lifecycle Management","EPIC-006","Identity & Access Management Service","US-016","TASK-ACC-603.2","NestJS,BullMQ","High","Medium","Login for a 'pending_deletion' user succeeds. The user's status is reverted to 'active'. The scheduled deletion job is removed from the queue.","Code reviewed; E2E integration test passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2025-01-20","2025-01-31","100%","","","E2E test of the request deletion -> cancel via login flow.","","Provides a crucial user retention path for the account deletion feature."
"TASK-ACC-604.2","Implement Final User Purge Job Processor","Create a BullMQ processor for the deletion queue. When a job runs, it will publish an `AccountPurgeInitiated` event, then permanently delete the user record and all associated data from the identity service's database.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2025-01-24","12","8","backend,gdpr,data-privacy,jobs","Sprint 6","Finalize and test the complete account deletion and cancellation lifecycle.","Account Lifecycle Management","EPIC-006","Identity & Access Management Service","US-016","TASK-ACC-603.1","NestJS,BullMQ,TypeORM","High","High","The processor is triggered when a job's delay expires. It publishes the `AccountPurgeInitiated` event. It deletes the user from the `users` table. It logs the action to the deletion audit log.","Code reviewed; Integration test passing.","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2025-01-20","2025-01-31","100%","","","Integration test that verifies the job processor deletes the user record after the delay.","Requires monitoring and a DLQ for failed jobs.","Fulfills the 'right to be forgotten' and ensures regulatory compliance."