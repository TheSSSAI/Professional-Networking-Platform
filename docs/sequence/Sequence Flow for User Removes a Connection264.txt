# 1 Overview

## 1.1 Diagram Id

SEQ-FF-003

## 1.2 Name

User Removes a Connection

## 1.3 Description

A user decides to remove another user from their connections list. The action is reciprocal and does not notify the other user.

## 1.4 Type

🔹 AuthenticationFlow

## 1.5 Purpose

To allow users to manage their network by removing connections, as required by SRS-001-F3 (1.3.4).

## 1.6 Complexity

Low

## 1.7 Priority

🟡 Medium

## 1.8 Frequency

OnDemand

## 1.9 Participants

- REPO-APP-CLIENT
- REPO-GW-API
- REPO-SVC-CONNECTIONS
- REPO-EVENT-BUS

## 1.10 Key Interactions

- User A navigates to their connections list and clicks 'Remove' on User B's entry.
- A confirmation dialog is shown and confirmed.
- Client sends a request to the Connections Service to remove the connection.
- Connections Service deletes the bidirectional connection record from its database.
- Connections Service publishes a 'ConnectionRemoved' event.
- The Feed Service consumes this event to potentially clean up feeds, ensuring future posts are not delivered.
- Client UI updates to remove User B from User A's connection list.

## 1.11 Triggers

- User confirms they want to remove a connection.

## 1.12 Outcomes

- The two users are no longer connected.
- The action is silent and reciprocal.

## 1.13 Business Rules

- The action must be reciprocal (both users are removed from each other's list) (1.3.4).
- The other user must not be notified of the removal (1.3.4).

## 1.14 Error Scenarios

- The users were not actually connected.
- Database error prevents deletion of the connection record.

## 1.15 Integration Points

*No items available*

# 2.0 Details

## 2.1 Diagram Id

SEQ-FF-003

## 2.2 Name

User Removes a Connection

## 2.3 Description

Detailed technical sequence for an authenticated user removing a connection. The process involves a GraphQL mutation via the API Gateway, a gRPC call to the Connections Service for database deletion, and an asynchronous event publication to notify other services like the Feed Service for data cleanup. This action is reciprocal and silent as per REQ-1-018.

## 2.4 Participants

### 2.4.1 Frontend Application

#### 2.4.1.1 Repository Id

REPO-APP-CLIENT

#### 2.4.1.2 Display Name

Client SPA

#### 2.4.1.3 Type

🔹 Frontend Application

#### 2.4.1.4 Technology

Next.js, React, Apollo Client

#### 2.4.1.5 Order

1

#### 2.4.1.6 Style

| Property | Value |
|----------|-------|
| Shape | actor |
| Color | #1E90FF |
| Stereotype | UI |

### 2.4.2.0 Gateway

#### 2.4.2.1 Repository Id

REPO-GW-API

#### 2.4.2.2 Display Name

API Gateway

#### 2.4.2.3 Type

🔹 Gateway

#### 2.4.2.4 Technology

AWS API Gateway

#### 2.4.2.5 Order

2

#### 2.4.2.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #FF4500 |
| Stereotype | GraphQL |

### 2.4.3.0 Microservice

#### 2.4.3.1 Repository Id

REPO-SVC-CONNECTIONS

#### 2.4.3.2 Display Name

Connections Service

#### 2.4.3.3 Type

🔹 Microservice

#### 2.4.3.4 Technology

NestJS, gRPC, PostgreSQL

#### 2.4.3.5 Order

3

#### 2.4.3.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #32CD32 |
| Stereotype | Service |

### 2.4.4.0 Message Broker

#### 2.4.4.1 Repository Id

REPO-EVENT-BUS

#### 2.4.4.2 Display Name

Event Bus

#### 2.4.4.3 Type

🔹 Message Broker

#### 2.4.4.4 Technology

AWS SNS/SQS

#### 2.4.4.5 Order

4

#### 2.4.4.6 Style

| Property | Value |
|----------|-------|
| Shape | queue |
| Color | #FFD700 |
| Stereotype | Messaging |

### 2.4.5.0 Microservice

#### 2.4.5.1 Repository Id

REPO-SVC-FEED

#### 2.4.5.2 Display Name

Feed Service

#### 2.4.5.3 Type

🔹 Microservice

#### 2.4.5.4 Technology

NestJS, Redis

#### 2.4.5.5 Order

5

#### 2.4.5.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #9370DB |
| Stereotype | Service |

## 2.5.0.0 Interactions

### 2.5.1.0 Request

#### 2.5.1.1 Source Id

REPO-APP-CLIENT

#### 2.5.1.2 Target Id

REPO-GW-API

#### 2.5.1.3 Message

1. [GraphQL Mutation] removeConnection(connectionUserId: ID!)

#### 2.5.1.4 Sequence Number

1

#### 2.5.1.5 Type

🔹 Request

#### 2.5.1.6 Is Synchronous

✅ Yes

#### 2.5.1.7 Return Message

8. [GraphQL Response] { data: { removeConnection: { success: true } } }

#### 2.5.1.8 Has Return

✅ Yes

#### 2.5.1.9 Is Activation

✅ Yes

#### 2.5.1.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | HTTPS/POST |
| Method | GraphQL Mutation |
| Parameters | Body: { query: 'mutation($connectionUserId: ID!) {... |
| Authentication | JWT Bearer Token required in Authorization header. |
| Error Handling | Handles 401/403 for auth errors, 404 for not found... |
| Performance | P99 latency target < 500ms for the entire synchron... |

#### 2.5.1.11 Nested Interactions

- {'sourceId': 'REPO-GW-API', 'targetId': 'REPO-SVC-CONNECTIONS', 'message': '2. [gRPC] RemoveConnection(request)', 'sequenceNumber': 2, 'type': 'Request', 'isSynchronous': True, 'returnMessage': '7. [gRPC Response] RemoveConnectionResponse { success: true }', 'hasReturn': True, 'isActivation': True, 'technicalDetails': {'protocol': 'gRPC', 'method': 'ConnectionsService.RemoveConnection', 'parameters': 'RemoveConnectionRequest { removerUserId: string, connectionUserId: string }. `removerUserId` is extracted from validated JWT claims.', 'authentication': 'Requires mTLS for service-to-service communication within the EKS cluster.', 'errorHandling': 'Handles gRPC status codes: NOT_FOUND, PERMISSION_DENIED, INTERNAL. Translates them into appropriate GraphQL errors for the client.', 'performance': 'P99 latency target < 150ms.'}, 'nestedInteractions': [{'sourceId': 'REPO-SVC-CONNECTIONS', 'targetId': 'REPO-SVC-CONNECTIONS', 'message': '3. [Authorization] Verify `removerUserId` is part of the connection', 'sequenceNumber': 3, 'type': 'Internal Logic', 'isSynchronous': True, 'returnMessage': '', 'hasReturn': False, 'isActivation': False, 'technicalDetails': {'protocol': 'Internal Check', 'method': 'authorizeRemoveConnection()', 'parameters': '`removerUserId`, `connectionUserId`', 'authentication': 'N/A', 'errorHandling': 'If check fails, throws an exception resulting in a gRPC `PERMISSION_DENIED` error.', 'performance': 'Latency target < 5ms.'}}, {'sourceId': 'REPO-SVC-CONNECTIONS', 'targetId': 'REPO-SVC-CONNECTIONS', 'message': '4. [Database Transaction] DELETE reciprocal connection records', 'sequenceNumber': 4, 'type': 'Database', 'isSynchronous': True, 'returnMessage': 'Success (commit) or Failure (rollback)', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'SQL', 'method': 'DELETE FROM connections WHERE (userAId = $1 AND userBId = $2) OR (userAId = $2 AND userBId = $1);', 'parameters': '`removerUserId`, `connectionUserId`', 'authentication': 'Database credentials retrieved from AWS Secrets Manager.', 'errorHandling': 'Catches DB exceptions, rolls back the transaction, and returns a gRPC `INTERNAL` error. If 0 rows are affected, returns `NOT_FOUND`.', 'performance': 'P99 latency target < 50ms.'}}, {'sourceId': 'REPO-SVC-CONNECTIONS', 'targetId': 'REPO-EVENT-BUS', 'message': '5. [Event] Publish ConnectionRemoved', 'sequenceNumber': 5, 'type': 'Publish', 'isSynchronous': False, 'returnMessage': '', 'hasReturn': False, 'isActivation': False, 'technicalDetails': {'protocol': 'AWS SNS SDK', 'method': 'Publish', 'parameters': "Topic: `connection-events`. Message: { eventType: 'ConnectionRemoved', version: '1.0', payload: { userAId: '...', userBId: '...' }, metadata: { correlationId: '...' } }", 'authentication': 'IAM Role for Service Account (IRSA).', 'errorHandling': 'Retry on transient SNS publish failures with exponential backoff. Log critical failures if the event bus is down.', 'performance': 'P99 latency target < 50ms.'}}]}

### 2.5.2.0 Message

#### 2.5.2.1 Source Id

REPO-EVENT-BUS

#### 2.5.2.2 Target Id

REPO-SVC-FEED

#### 2.5.2.3 Message

6. [Event Delivery] ConnectionRemoved

#### 2.5.2.4 Sequence Number

6

#### 2.5.2.5 Type

🔹 Message

#### 2.5.2.6 Is Synchronous

❌ No

#### 2.5.2.7 Return Message



#### 2.5.2.8 Has Return

❌ No

#### 2.5.2.9 Is Activation

✅ Yes

#### 2.5.2.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | AWS SQS |
| Method | Message Delivery |
| Parameters | The full event message published by the Connection... |
| Authentication | IAM policies controlling SQS queue access. |
| Error Handling | Messages that fail processing after SQS-configured... |
| Performance | P95 end-to-end event latency (publish to consume) ... |

#### 2.5.2.11 Nested Interactions

- {'sourceId': 'REPO-SVC-FEED', 'targetId': 'REPO-SVC-FEED', 'message': '6a. [Internal Logic] Process event for feed cleanup', 'sequenceNumber': 7, 'type': 'Internal Logic', 'isSynchronous': True, 'returnMessage': '', 'hasReturn': False, 'isActivation': False, 'technicalDetails': {'protocol': 'Internal Processing', 'method': 'handleConnectionRemovedEvent(payload)', 'parameters': 'Event payload containing `userAId` and `userBId`.', 'authentication': 'N/A', 'errorHandling': 'Errors during processing will cause the SQS message to become visible again for retry. Permanent failures lead to DLQ.', 'performance': 'Processing should be idempotent and complete within seconds to avoid blocking the queue.'}}

### 2.5.3.0 Internal Logic

#### 2.5.3.1 Source Id

REPO-APP-CLIENT

#### 2.5.3.2 Target Id

REPO-APP-CLIENT

#### 2.5.3.3 Message

9. [UI Update] Remove user from connections list

#### 2.5.3.4 Sequence Number

8

#### 2.5.3.5 Type

🔹 Internal Logic

#### 2.5.3.6 Is Synchronous

✅ Yes

#### 2.5.3.7 Return Message



#### 2.5.3.8 Has Return

❌ No

#### 2.5.3.9 Is Activation

❌ No

#### 2.5.3.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | React State Management |
| Method | updateLocalState() / refetchQueries() |
| Parameters | connectionUserId to be removed. |
| Authentication | N/A |
| Error Handling | N/A - Occurs only on successful API response. |
| Performance | UI update should be perceived as instantaneous (<1... |

## 2.6.0.0 Notes

### 2.6.1.0 Content

#### 2.6.1.1 Content

Business Rule (REQ-1-018): The removed user is NOT notified. No event is sent to the Notifications Service.

#### 2.6.1.2 Position

bottom

#### 2.6.1.3 Participant Id

*Not specified*

#### 2.6.1.4 Sequence Number

5

### 2.6.2.0 Content

#### 2.6.2.1 Content

Business Rule (REQ-1-018): The removal is reciprocal. The single database transaction in step 4 ensures this.

#### 2.6.2.2 Position

bottom

#### 2.6.2.3 Participant Id

REPO-SVC-CONNECTIONS

#### 2.6.2.4 Sequence Number

4

## 2.7.0.0 Implementation Guidance

| Property | Value |
|----------|-------|
| Security Requirements | The API Gateway MUST validate the JWT and extract ... |
| Performance Targets | The synchronous user-facing operation (GraphQL mut... |
| Error Handling Strategy | Synchronous errors (DB failure, invalid permission... |
| Testing Considerations | E2E tests must verify the reciprocal nature of the... |
| Monitoring Requirements | Monitor the `removeConnection` GraphQL mutation fo... |
| Deployment Considerations | If the `ConnectionRemoved` event schema changes, t... |

