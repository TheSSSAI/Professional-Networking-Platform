# 1 Overview

## 1.1 Diagram Id

SEQ-UJ-001

## 1.2 Name

New User Registration and Email Verification

## 1.3 Description

A new user signs up for the platform using their email and password. The system validates the input, creates an inactive user record, and triggers a verification email. The user must click the link in the email to activate their account and complete the registration process.

## 1.4 Type

üîπ UserJourney

## 1.5 Purpose

To securely onboard new users and verify their email address, fulfilling requirement SRS-001-F1 (1.1.1) and the age restriction in 5.2.1.

## 1.6 Complexity

Medium

## 1.7 Priority

üö® Critical

## 1.8 Frequency

OnDemand

## 1.9 Participants

- REPO-APP-CLIENT
- REPO-GW-API
- REPO-SVC-IDENTITY
- REPO-EVENT-BUS
- REPO-SVC-NOTIFICATIONS

## 1.10 Key Interactions

- Client submits registration form (email, password, etc.) to API Gateway.
- API Gateway routes request to the Identity Service.
- Identity Service validates data (e.g., password complexity, age), creates an inactive user record in PostgreSQL, and generates a unique verification token.
- Identity Service publishes a 'UserRegistered' event containing the userId and email to the event bus.
- Notifications Service consumes this event and integrates with AWS SES to send the verification email containing the token link.
- User clicks the verification link, which sends a request back to the Identity Service.
- Identity Service validates the token and activates the user's account.

## 1.11 Triggers

- A new user navigates to the registration page and submits their details.

## 1.12 Outcomes

- A new, verified user account is created in the system.
- The user is able to log in to the platform.

## 1.13 Business Rules

- Password must meet complexity requirements (SRS-001-F1 1.1.1).
- User account remains inactive until the email link is verified.
- User must be at least 16 years of age (5.2.1).
- Email verification links must be time-limited and single-use.

## 1.14 Error Scenarios

- Email address is already in use.
- Password does not meet complexity requirements.
- Email verification link expires or is invalid.
- Transactional email service (SES) fails to send the email.

## 1.15 Integration Points

- AWS SES for sending transactional emails (3.3.1).

# 2.0 Details

## 2.1 Diagram Id

SEQ-UJ-001

## 2.2 Name

Implementation Sequence: New User Registration and Email Verification

## 2.3 Description

Comprehensive technical sequence for a new user journey, from submitting the registration form to successful account activation via email verification. This sequence details the client-side validation, synchronous API calls for user creation, asynchronous event-driven email dispatch, and the final token-based account activation. It directly implements SRS-001-F1 (1.1.1) and business rule 5.2.1.

## 2.4 Participants

### 2.4.1 Client Application

#### 2.4.1.1 Repository Id

REPO-APP-CLIENT

#### 2.4.1.2 Display Name

Web Client (SPA)

#### 2.4.1.3 Type

üîπ Client Application

#### 2.4.1.4 Technology

Next.js 14, React 18, TypeScript 5, MUI

#### 2.4.1.5 Order

1

#### 2.4.1.6 Style

| Property | Value |
|----------|-------|
| Shape | actor |
| Color | #1E90FF |
| Stereotype | User Interface |

### 2.4.2.0 API Gateway

#### 2.4.2.1 Repository Id

REPO-GW-API

#### 2.4.2.2 Display Name

API Gateway

#### 2.4.2.3 Type

üîπ API Gateway

#### 2.4.2.4 Technology

AWS API Gateway

#### 2.4.2.5 Order

2

#### 2.4.2.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #FF8C00 |
| Stereotype | GraphQL Endpoint |

### 2.4.3.0 Microservice

#### 2.4.3.1 Repository Id

REPO-SVC-IDENTITY

#### 2.4.3.2 Display Name

Identity & Access Service

#### 2.4.3.3 Type

üîπ Microservice

#### 2.4.3.4 Technology

NestJS 10, TypeScript 5, gRPC, PostgreSQL, Redis

#### 2.4.3.5 Order

3

#### 2.4.3.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #32CD32 |
| Stereotype | Authentication Authority |

### 2.4.4.0 Message Bus

#### 2.4.4.1 Repository Id

REPO-EVENT-BUS

#### 2.4.4.2 Display Name

Event Bus

#### 2.4.4.3 Type

üîπ Message Bus

#### 2.4.4.4 Technology

AWS SNS/SQS

#### 2.4.4.5 Order

4

#### 2.4.4.6 Style

| Property | Value |
|----------|-------|
| Shape | queue |
| Color | #9370DB |
| Stereotype | Asynchronous Channel |

### 2.4.5.0 Microservice

#### 2.4.5.1 Repository Id

REPO-SVC-NOTIFICATIONS

#### 2.4.5.2 Display Name

Notifications Service

#### 2.4.5.3 Type

üîπ Microservice

#### 2.4.5.4 Technology

NestJS 10, TypeScript 5, AWS SES

#### 2.4.5.5 Order

5

#### 2.4.5.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #FF4500 |
| Stereotype | Communication Service |

## 2.5.0.0 Interactions

### 2.5.1.0 UI Interaction

#### 2.5.1.1 Source Id

REPO-APP-CLIENT

#### 2.5.1.2 Target Id

REPO-APP-CLIENT

#### 2.5.1.3 Message

User submits registration form with email, password, and date of birth. Client-side validation is performed.

#### 2.5.1.4 Sequence Number

1

#### 2.5.1.5 Type

üîπ UI Interaction

#### 2.5.1.6 Is Synchronous

‚úÖ Yes

#### 2.5.1.7 Return Message

UI enters a loading state.

#### 2.5.1.8 Has Return

‚úÖ Yes

#### 2.5.1.9 Is Activation

‚úÖ Yes

#### 2.5.1.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | DOM Event |
| Method | onSubmit |
| Parameters | Form data object. Validation rules check for email... |
| Authentication | N/A (Public) |
| Error Handling | Displays inline error messages for invalid fields ... |
| Performance | UI feedback for validation should be instantaneous... |

### 2.5.2.0 API Request

#### 2.5.2.1 Source Id

REPO-APP-CLIENT

#### 2.5.2.2 Target Id

REPO-GW-API

#### 2.5.2.3 Message

Sends GraphQL mutation to register a new user.

#### 2.5.2.4 Sequence Number

2

#### 2.5.2.5 Type

üîπ API Request

#### 2.5.2.6 Is Synchronous

‚úÖ Yes

#### 2.5.2.7 Return Message

GraphQL response indicating success or failure of registration submission.

#### 2.5.2.8 Has Return

‚úÖ Yes

#### 2.5.2.9 Is Activation

‚úÖ Yes

#### 2.5.2.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | HTTPS/GraphQL |
| Method | POST /graphql (Mutation: registerUser) |
| Parameters | Input: { email: String!, password: String!, dateOf... |
| Authentication | N/A (Public Endpoint) |
| Error Handling | Handles HTTP status codes 4xx/5xx from the gateway... |
| Performance | TTFB should be under 500ms as per REQ-1-050. |

### 2.5.3.0 Internal Request

#### 2.5.3.1 Source Id

REPO-GW-API

#### 2.5.3.2 Target Id

REPO-SVC-IDENTITY

#### 2.5.3.3 Message

Routes request to Identity Service for processing.

#### 2.5.3.4 Sequence Number

3

#### 2.5.3.5 Type

üîπ Internal Request

#### 2.5.3.6 Is Synchronous

‚úÖ Yes

#### 2.5.3.7 Return Message

gRPC response with success/error status.

#### 2.5.3.8 Has Return

‚úÖ Yes

#### 2.5.3.9 Is Activation

‚úÖ Yes

#### 2.5.3.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | gRPC |
| Method | AuthService.registerUser |
| Parameters | RegisterUserRequest protobuf message containing va... |
| Authentication | Internal service authentication (e.g., mTLS). |
| Error Handling | Propagates gRPC status codes (e.g., ALREADY_EXISTS... |
| Performance | Internal P95 latency target < 50ms. |

#### 2.5.3.11 Nested Interactions

- {'sourceId': 'REPO-SVC-IDENTITY', 'targetId': 'REPO-SVC-IDENTITY', 'message': 'Performs server-side validation, creates user, and generates token.', 'sequenceNumber': 3.1, 'type': 'Business Logic', 'isSynchronous': True, 'returnMessage': 'Success or throws specific exception.', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'Internal Logic', 'method': "1. Validate age from dateOfBirth (>=16). 2. Check for existing email in PostgreSQL. 3. Hash password using bcrypt. 4. Generate a secure, unique, and time-limited verification token (e.g., JWT with short expiry). 5. Create user record in PostgreSQL with 'inactive' status and store the token.", 'parameters': 'N/A', 'authentication': 'N/A', 'errorHandling': 'Throws `ConflictException` if email exists (maps to gRPC ALREADY_EXISTS). Throws `ValidationException` for password/age rules (maps to gRPC INVALID_ARGUMENT).', 'performance': 'DB queries must be optimized. Hashing is CPU intensive but must complete within the request cycle.'}}

### 2.5.4.0 Event Publishing

#### 2.5.4.1 Source Id

REPO-SVC-IDENTITY

#### 2.5.4.2 Target Id

REPO-EVENT-BUS

#### 2.5.4.3 Message

Publishes 'UserRegistered' event for asynchronous processing.

#### 2.5.4.4 Sequence Number

4

#### 2.5.4.5 Type

üîπ Event Publishing

#### 2.5.4.6 Is Synchronous

‚ùå No

#### 2.5.4.7 Return Message



#### 2.5.4.8 Has Return

‚ùå No

#### 2.5.4.9 Is Activation

‚úÖ Yes

#### 2.5.4.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | AWS SNS |
| Method | publish(topic='user-events-topic') |
| Parameters | Event Payload: { userId: string, email: string, ve... |
| Authentication | IAM role-based access. |
| Error Handling | Uses AWS SDK's built-in retry mechanism for transi... |
| Performance | Publishing latency should be < 100ms. |

### 2.5.5.0 API Response

#### 2.5.5.1 Source Id

REPO-GW-API

#### 2.5.5.2 Target Id

REPO-APP-CLIENT

#### 2.5.5.3 Message

Relays the successful submission response to the client.

#### 2.5.5.4 Sequence Number

5

#### 2.5.5.5 Type

üîπ API Response

#### 2.5.5.6 Is Synchronous

‚úÖ Yes

#### 2.5.5.7 Return Message



#### 2.5.5.8 Has Return

‚ùå No

#### 2.5.5.9 Is Activation

‚ùå No

#### 2.5.5.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | HTTPS/GraphQL |
| Method | 200 OK |
| Parameters | Response Body: { data: { registerUser: { success: ... |
| Authentication | N/A |
| Error Handling | If an error was received from the service, it is m... |
| Performance | N/A |

### 2.5.6.0 UI Update

#### 2.5.6.1 Source Id

REPO-APP-CLIENT

#### 2.5.6.2 Target Id

REPO-APP-CLIENT

#### 2.5.6.3 Message

Displays success message to the user and exits loading state.

#### 2.5.6.4 Sequence Number

6

#### 2.5.6.5 Type

üîπ UI Update

#### 2.5.6.6 Is Synchronous

‚úÖ Yes

#### 2.5.6.7 Return Message



#### 2.5.6.8 Has Return

‚ùå No

#### 2.5.6.9 Is Activation

‚ùå No

#### 2.5.6.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | DOM Update |
| Method | React state update |
| Parameters | Component state is updated to show a message like ... |
| Authentication | N/A |
| Error Handling | If an error was received, displays a user-friendly... |
| Performance | UI update should be immediate. |

### 2.5.7.0 Event Consumption

#### 2.5.7.1 Source Id

REPO-EVENT-BUS

#### 2.5.7.2 Target Id

REPO-SVC-NOTIFICATIONS

#### 2.5.7.3 Message

Delivers 'UserRegistered' event via a dedicated SQS queue.

#### 2.5.7.4 Sequence Number

7

#### 2.5.7.5 Type

üîπ Event Consumption

#### 2.5.7.6 Is Synchronous

‚ùå No

#### 2.5.7.7 Return Message



#### 2.5.7.8 Has Return

‚ùå No

#### 2.5.7.9 Is Activation

‚úÖ Yes

#### 2.5.7.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | AWS SQS |
| Method | consume(queue='notifications-user-registered-queue... |
| Parameters | Event Payload from SNS message body. |
| Authentication | IAM role-based access. |
| Error Handling | Failed messages are retried based on queue's visib... |
| Performance | Message should be available for consumption within... |

#### 2.5.7.11 Nested Interactions

- {'sourceId': 'REPO-SVC-NOTIFICATIONS', 'targetId': 'REPO-SVC-NOTIFICATIONS', 'message': 'Integrates with external email service to send verification email.', 'sequenceNumber': 7.1, 'type': 'External API Call', 'isSynchronous': True, 'returnMessage': 'Success or failure status from email service.', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'HTTPS/API', 'method': 'AWS SES SendEmail API', 'parameters': "To: user.email, From: 'no-reply@platform.com', Subject: 'Verify Your Account', Body: HTML template containing the verification link (e.g., 'https://platform.com/verify?token=...').", 'authentication': 'AWS SDK with IAM credentials.', 'errorHandling': 'Implements retry logic with exponential backoff for transient API errors (e.g., throttling). Permanent failures are logged, and the SQS message is failed for DLQ processing.', 'performance': 'P95 for SES API call < 1s.'}}

### 2.5.8.0 API Request

#### 2.5.8.1 Source Id

REPO-APP-CLIENT

#### 2.5.8.2 Target Id

REPO-GW-API

#### 2.5.8.3 Message

User clicks verification link in email, sending token to the API.

#### 2.5.8.4 Sequence Number

8

#### 2.5.8.5 Type

üîπ API Request

#### 2.5.8.6 Is Synchronous

‚úÖ Yes

#### 2.5.8.7 Return Message

GraphQL response indicating success or failure of verification.

#### 2.5.8.8 Has Return

‚úÖ Yes

#### 2.5.8.9 Is Activation

‚úÖ Yes

#### 2.5.8.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | HTTPS/GraphQL |
| Method | POST /graphql (Query: verifyEmail) |
| Parameters | Input: { token: String! } |
| Authentication | N/A (Token serves as one-time auth) |
| Error Handling | Handles network errors. Displays a loading state o... |
| Performance | Page LCP < 2.5s. TTFB < 500ms. |

### 2.5.9.0 Internal Request

#### 2.5.9.1 Source Id

REPO-GW-API

#### 2.5.9.2 Target Id

REPO-SVC-IDENTITY

#### 2.5.9.3 Message

Routes verification request to Identity Service.

#### 2.5.9.4 Sequence Number

9

#### 2.5.9.5 Type

üîπ Internal Request

#### 2.5.9.6 Is Synchronous

‚úÖ Yes

#### 2.5.9.7 Return Message

gRPC response with success/error status.

#### 2.5.9.8 Has Return

‚úÖ Yes

#### 2.5.9.9 Is Activation

‚úÖ Yes

#### 2.5.9.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | gRPC |
| Method | AuthService.verifyEmail |
| Parameters | VerifyEmailRequest protobuf message containing the... |
| Authentication | Internal service authentication. |
| Error Handling | Propagates gRPC status codes (e.g., NOT_FOUND, PER... |
| Performance | Internal P95 latency target < 50ms. |

#### 2.5.9.11 Nested Interactions

- {'sourceId': 'REPO-SVC-IDENTITY', 'targetId': 'REPO-SVC-IDENTITY', 'message': 'Validates token and activates user account.', 'sequenceNumber': 9.1, 'type': 'Business Logic', 'isSynchronous': True, 'returnMessage': 'Success or throws exception.', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'Internal Logic', 'method': "1. Find user by verification token in PostgreSQL. 2. Validate token (not expired, not previously used). 3. Atomically update user status to 'active' and nullify/delete the verification token to prevent reuse.", 'parameters': 'N/A', 'authentication': 'N/A', 'errorHandling': 'Throws `NotFoundException` if token is invalid (maps to gRPC NOT_FOUND). Throws `PermissionDeniedException` if token is expired or already used (maps to gRPC PERMISSION_DENIED).', 'performance': 'Database transaction must be fast and atomic.'}}

### 2.5.10.0 API Response

#### 2.5.10.1 Source Id

REPO-GW-API

#### 2.5.10.2 Target Id

REPO-APP-CLIENT

#### 2.5.10.3 Message

Relays the successful verification response.

#### 2.5.10.4 Sequence Number

10

#### 2.5.10.5 Type

üîπ API Response

#### 2.5.10.6 Is Synchronous

‚úÖ Yes

#### 2.5.10.7 Return Message



#### 2.5.10.8 Has Return

‚ùå No

#### 2.5.10.9 Is Activation

‚ùå No

#### 2.5.10.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | HTTPS/GraphQL |
| Method | 200 OK |
| Parameters | Response Body: { data: { verifyEmail: { success: t... |
| Authentication | N/A |
| Error Handling | Maps service errors to standard GraphQL error form... |
| Performance | N/A |

### 2.5.11.0 UI Update

#### 2.5.11.1 Source Id

REPO-APP-CLIENT

#### 2.5.11.2 Target Id

REPO-APP-CLIENT

#### 2.5.11.3 Message

Displays verification success page and prompts user to log in.

#### 2.5.11.4 Sequence Number

11

#### 2.5.11.5 Type

üîπ UI Update

#### 2.5.11.6 Is Synchronous

‚úÖ Yes

#### 2.5.11.7 Return Message



#### 2.5.11.8 Has Return

‚ùå No

#### 2.5.11.9 Is Activation

‚ùå No

#### 2.5.11.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | DOM Update/Navigation |
| Method | React state update and/or Next.js router navigatio... |
| Parameters | UI is updated to show a success message and provid... |
| Authentication | N/A |
| Error Handling | If verification failed, displays a specific error ... |
| Performance | UI update should be immediate. |

## 2.6.0.0 Notes

### 2.6.1.0 Content

#### 2.6.1.1 Content

The entire user journey must be protected by HTTPS/TLS 1.3 as per REQ-1-054.

#### 2.6.1.2 Position

top

#### 2.6.1.3 Participant Id

*Not specified*

#### 2.6.1.4 Sequence Number

0

### 2.6.2.0 Content

#### 2.6.2.1 Content

Asynchronous email sending decouples the user-facing registration API from the reliability of the external email service, improving API response time and resilience.

#### 2.6.2.2 Position

right

#### 2.6.2.3 Participant Id

REPO-EVENT-BUS

#### 2.6.2.4 Sequence Number

4

### 2.6.3.0 Content

#### 2.6.3.1 Content

The verification token must be single-use and have a short expiry (e.g., 24 hours) to mitigate security risks.

#### 2.6.3.2 Position

left

#### 2.6.3.3 Participant Id

REPO-SVC-IDENTITY

#### 2.6.3.4 Sequence Number

9.1

## 2.7.0.0 Implementation Guidance

| Property | Value |
|----------|-------|
| Security Requirements | Passwords must be hashed using bcrypt with a salt ... |
| Performance Targets | Client LCP for registration page < 2.5s. API P95 l... |
| Error Handling Strategy | Client-side: Real-time, inline form validation. AP... |
| Testing Considerations | Unit tests for validation logic (password, age). I... |
| Monitoring Requirements | Prometheus Metrics: `registrations_total` (counter... |
| Deployment Considerations | Requires a database migration script to add the us... |

