# 1 Overview

## 1.1 Diagram Id

SEQ-UJ-002

## 1.2 Name

User Creates a New Post

## 1.3 Description

A logged-in user creates a new text-based post. The post is saved, and an event is triggered to add it to the feeds of their connections.

## 1.4 Type

üîπ UserJourney

## 1.5 Purpose

To allow users to share content with their network, fulfilling the core requirement SRS-001-F4 (1.4.1).

## 1.6 Complexity

Medium

## 1.7 Priority

üö® Critical

## 1.8 Frequency

OnDemand

## 1.9 Participants

- REPO-APP-CLIENT
- REPO-GW-API
- REPO-SVC-POSTS
- REPO-EVENT-BUS

## 1.10 Key Interactions

- User submits post content via client SPA.
- API Gateway routes the request to the Posts Service.
- Posts Service validates content (e.g., character limit) and saves the post to its PostgreSQL database.
- Posts Service publishes a 'PostCreated' event to the event bus.
- Client UI updates to show the new post in the user's own view.

## 1.11 Triggers

- User types content into the post creation component and clicks 'Post'.

## 1.12 Outcomes

- The new post is successfully persisted.
- The post becomes visible in the news feeds of the user's connections (handled by SEQ-EP-002).

## 1.13 Business Rules

- Post text must not exceed 3000 characters (1.4.1).

## 1.14 Error Scenarios

- Post content exceeds the character limit.
- User is not authenticated.
- Database connection fails.

## 1.15 Integration Points

- Event Bus (for SEQ-EP-002).

# 2.0 Details

## 2.1 Diagram Id

SEQ-UJ-002

## 2.2 Name

User Creates a New Text-Based Post

## 2.3 Description

A comprehensive technical sequence diagram detailing the end-to-end process of a logged-in user creating and submitting a new text-based post. The sequence covers client-side validation, GraphQL mutation via an API Gateway, synchronous persistence in a microservice, and asynchronous event publication for downstream processing. This sequence directly implements SRS-001-F4 (1.4.1).

## 2.4 Participants

### 2.4.1 Actor

#### 2.4.1.1 Repository Id

user

#### 2.4.1.2 Display Name

User

#### 2.4.1.3 Type

üîπ Actor

#### 2.4.1.4 Technology

Human

#### 2.4.1.5 Order

1

#### 2.4.1.6 Style

| Property | Value |
|----------|-------|
| Shape | actor |
| Color | #000000 |
| Stereotype |  |

### 2.4.2.0 Presentation Layer

#### 2.4.2.1 Repository Id

REPO-APP-WEB

#### 2.4.2.2 Display Name

Platform Web App

#### 2.4.2.3 Type

üîπ Presentation Layer

#### 2.4.2.4 Technology

Next.js, React, TypeScript, MUI, Apollo Client

#### 2.4.2.5 Order

2

#### 2.4.2.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #1976D2 |
| Stereotype | <<SPA>> |

### 2.4.3.0 API Gateway

#### 2.4.3.1 Repository Id

REPO-GW-API

#### 2.4.3.2 Display Name

API Gateway

#### 2.4.3.3 Type

üîπ API Gateway

#### 2.4.3.4 Technology

AWS API Gateway

#### 2.4.3.5 Order

3

#### 2.4.3.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #FF9800 |
| Stereotype | <<Gateway>> |

### 2.4.4.0 Application Service

#### 2.4.4.1 Repository Id

REPO-SVC-POSTS

#### 2.4.4.2 Display Name

Posts Service

#### 2.4.4.3 Type

üîπ Application Service

#### 2.4.4.4 Technology

NestJS, TypeScript, gRPC, Prisma

#### 2.4.4.5 Order

4

#### 2.4.4.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #4CAF50 |
| Stereotype | <<Microservice>> |

### 2.4.5.0 Database

#### 2.4.5.1 Repository Id

REPO-DB-POSTS

#### 2.4.5.2 Display Name

PostgreSQL DB

#### 2.4.5.3 Type

üîπ Database

#### 2.4.5.4 Technology

AWS RDS for PostgreSQL

#### 2.4.5.5 Order

5

#### 2.4.5.6 Style

| Property | Value |
|----------|-------|
| Shape | database |
| Color | #9C27B0 |
| Stereotype |  |

### 2.4.6.0 Message Broker

#### 2.4.6.1 Repository Id

REPO-EVENT-BUS

#### 2.4.6.2 Display Name

Event Bus

#### 2.4.6.3 Type

üîπ Message Broker

#### 2.4.6.4 Technology

AWS SNS

#### 2.4.6.5 Order

6

#### 2.4.6.6 Style

| Property | Value |
|----------|-------|
| Shape | queue |
| Color | #F44336 |
| Stereotype | <<MessageBus>> |

## 2.5.0.0 Interactions

### 2.5.1.0 UI Interaction

#### 2.5.1.1 Source Id

user

#### 2.5.1.2 Target Id

REPO-APP-WEB

#### 2.5.1.3 Message

1. Enters post content into 'CreatePost' component and clicks 'Post' button.

#### 2.5.1.4 Sequence Number

1

#### 2.5.1.5 Type

üîπ UI Interaction

#### 2.5.1.6 Is Synchronous

‚úÖ Yes

#### 2.5.1.7 Return Message



#### 2.5.1.8 Has Return

‚ùå No

#### 2.5.1.9 Is Activation

‚úÖ Yes

#### 2.5.1.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | UI Event |
| Method | onClick |
| Parameters | Event object from form submission. |
| Authentication | N/A |
| Error Handling | Button is disabled until text is entered. |
| Performance | UI response < 50ms. |

### 2.5.2.0 Self-call / Validation

#### 2.5.2.1 Source Id

REPO-APP-WEB

#### 2.5.2.2 Target Id

REPO-APP-WEB

#### 2.5.2.3 Message

2. Performs client-side validation on content (length < 3000 chars). Sets loading state.

#### 2.5.2.4 Sequence Number

2

#### 2.5.2.5 Type

üîπ Self-call / Validation

#### 2.5.2.6 Is Synchronous

‚úÖ Yes

#### 2.5.2.7 Return Message

Validation result (pass/fail).

#### 2.5.2.8 Has Return

‚úÖ Yes

#### 2.5.2.9 Is Activation

‚ùå No

#### 2.5.2.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | JavaScript |
| Method | validatePostContent() |
| Parameters | textContent: string |
| Authentication | N/A |
| Error Handling | If validation fails, update component state to dis... |
| Performance | Execution time < 10ms. |

### 2.5.3.0 API Request

#### 2.5.3.1 Source Id

REPO-APP-WEB

#### 2.5.3.2 Target Id

REPO-GW-API

#### 2.5.3.3 Message

3. Sends 'createPost' GraphQL mutation.

#### 2.5.3.4 Sequence Number

3

#### 2.5.3.5 Type

üîπ API Request

#### 2.5.3.6 Is Synchronous

‚úÖ Yes

#### 2.5.3.7 Return Message

HTTP 200 OK with GraphQL payload or error.

#### 2.5.3.8 Has Return

‚úÖ Yes

#### 2.5.3.9 Is Activation

‚úÖ Yes

#### 2.5.3.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | HTTPS/2 |
| Method | POST /graphql |
| Parameters | Body: { query: 'mutation createPost($input: Create... |
| Authentication | Requires valid JWT Access Token in 'Authorization:... |
| Error Handling | Apollo Client handles network errors (e.g., timeou... |
| Performance | TTFB < 500ms as per REQ-1-050. |

### 2.5.4.0 RPC Call

#### 2.5.4.1 Source Id

REPO-GW-API

#### 2.5.4.2 Target Id

REPO-SVC-POSTS

#### 2.5.4.3 Message

4. Validates JWT, authorizes scope, and forwards request via gRPC.

#### 2.5.4.4 Sequence Number

4

#### 2.5.4.5 Type

üîπ RPC Call

#### 2.5.4.6 Is Synchronous

‚úÖ Yes

#### 2.5.4.7 Return Message

gRPC success or error status code with payload.

#### 2.5.4.8 Has Return

‚úÖ Yes

#### 2.5.4.9 Is Activation

‚úÖ Yes

#### 2.5.4.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | gRPC |
| Method | PostsService.CreatePost |
| Parameters | CreatePostRequest { textContent: string, authorId:... |
| Authentication | Internal network trust, with propagated user ident... |
| Error Handling | Returns `UNAUTHENTICATED` if JWT is invalid. Forwa... |
| Performance | Routing latency < 10ms. |

### 2.5.5.0 Database Write

#### 2.5.5.1 Source Id

REPO-SVC-POSTS

#### 2.5.5.2 Target Id

REPO-DB-POSTS

#### 2.5.5.3 Message

5. Performs server-side validation and inserts new post record within a transaction.

#### 2.5.5.4 Sequence Number

5

#### 2.5.5.5 Type

üîπ Database Write

#### 2.5.5.6 Is Synchronous

‚úÖ Yes

#### 2.5.5.7 Return Message

New post record with generated ID.

#### 2.5.5.8 Has Return

‚úÖ Yes

#### 2.5.5.9 Is Activation

‚úÖ Yes

#### 2.5.5.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | SQL/TCP |
| Method | INSERT INTO posts (author_id, content, created_at)... |
| Parameters | authorId, sanitizedContent |
| Authentication | Database credentials managed via secrets manager. |
| Error Handling | If validation fails, returns `INVALID_ARGUMENT`. I... |
| Performance | P95 latency < 20ms. |

### 2.5.6.0 Database Response

#### 2.5.6.1 Source Id

REPO-DB-POSTS

#### 2.5.6.2 Target Id

REPO-SVC-POSTS

#### 2.5.6.3 Message

6. Confirms insertion.

#### 2.5.6.4 Sequence Number

6

#### 2.5.6.5 Type

üîπ Database Response

#### 2.5.6.6 Is Synchronous

‚úÖ Yes

#### 2.5.6.7 Return Message



#### 2.5.6.8 Has Return

‚ùå No

#### 2.5.6.9 Is Activation

‚ùå No

#### 2.5.6.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | SQL/TCP |
| Method |  |
| Parameters | Returned row data. |
| Authentication | N/A |
| Error Handling | N/A |
| Performance | Included in step 5 latency. |

### 2.5.7.0 Message Publish

#### 2.5.7.1 Source Id

REPO-SVC-POSTS

#### 2.5.7.2 Target Id

REPO-EVENT-BUS

#### 2.5.7.3 Message

7. Publishes 'PostCreated' event.

#### 2.5.7.4 Sequence Number

7

#### 2.5.7.5 Type

üîπ Message Publish

#### 2.5.7.6 Is Synchronous

‚ùå No

#### 2.5.7.7 Return Message

Acknowledgement of publish.

#### 2.5.7.8 Has Return

‚úÖ Yes

#### 2.5.7.9 Is Activation

‚úÖ Yes

#### 2.5.7.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | AWS SNS SDK |
| Method | sns.publish() |
| Parameters | TopicArn: 'post-events-topic', Message: JSON strin... |
| Authentication | IAM Role credentials for the service. |
| Error Handling | SDK handles retries with exponential backoff. If p... |
| Performance | P95 latency < 50ms. |

### 2.5.8.0 Acknowledgement

#### 2.5.8.1 Source Id

REPO-EVENT-BUS

#### 2.5.8.2 Target Id

REPO-SVC-POSTS

#### 2.5.8.3 Message

8. Acknowledges receipt.

#### 2.5.8.4 Sequence Number

8

#### 2.5.8.5 Type

üîπ Acknowledgement

#### 2.5.8.6 Is Synchronous

‚ùå No

#### 2.5.8.7 Return Message



#### 2.5.8.8 Has Return

‚ùå No

#### 2.5.8.9 Is Activation

‚ùå No

#### 2.5.8.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | AWS SNS SDK |
| Method |  |
| Parameters | MessageID |
| Authentication | N/A |
| Error Handling | N/A |
| Performance | Included in step 7 latency. |

### 2.5.9.0 RPC Response

#### 2.5.9.1 Source Id

REPO-SVC-POSTS

#### 2.5.9.2 Target Id

REPO-GW-API

#### 2.5.9.3 Message

9. Returns gRPC success response with new post data.

#### 2.5.9.4 Sequence Number

9

#### 2.5.9.5 Type

üîπ RPC Response

#### 2.5.9.6 Is Synchronous

‚úÖ Yes

#### 2.5.9.7 Return Message



#### 2.5.9.8 Has Return

‚ùå No

#### 2.5.9.9 Is Activation

‚ùå No

#### 2.5.9.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | gRPC |
| Method |  |
| Parameters | CreatePostResponse { post: { id: '...', content: '... |
| Authentication | N/A |
| Error Handling | N/A |
| Performance | N/A |

### 2.5.10.0 API Response

#### 2.5.10.1 Source Id

REPO-GW-API

#### 2.5.10.2 Target Id

REPO-APP-WEB

#### 2.5.10.3 Message

10. Translates gRPC response and returns HTTP 200 OK with GraphQL payload.

#### 2.5.10.4 Sequence Number

10

#### 2.5.10.5 Type

üîπ API Response

#### 2.5.10.6 Is Synchronous

‚úÖ Yes

#### 2.5.10.7 Return Message



#### 2.5.10.8 Has Return

‚ùå No

#### 2.5.10.9 Is Activation

‚ùå No

#### 2.5.10.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | HTTPS/2 |
| Method |  |
| Parameters | Body: { "data": { "createPost": { "id": "...", ...... |
| Authentication | N/A |
| Error Handling | N/A |
| Performance | N/A |

### 2.5.11.0 State Management

#### 2.5.11.1 Source Id

REPO-APP-WEB

#### 2.5.11.2 Target Id

REPO-APP-WEB

#### 2.5.11.3 Message

11. Updates Apollo Client cache, resets loading state, and optimistically renders the new post.

#### 2.5.11.4 Sequence Number

11

#### 2.5.11.5 Type

üîπ State Management

#### 2.5.11.6 Is Synchronous

‚úÖ Yes

#### 2.5.11.7 Return Message



#### 2.5.11.8 Has Return

‚ùå No

#### 2.5.11.9 Is Activation

‚ùå No

#### 2.5.11.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | JavaScript |
| Method | cache.modify() |
| Parameters | New post data from GraphQL response. |
| Authentication | N/A |
| Error Handling | If the mutation fails, the optimistic update is ro... |
| Performance | UI update should be perceived as instantaneous (< ... |

### 2.5.12.0 UI Update

#### 2.5.12.1 Source Id

REPO-APP-WEB

#### 2.5.12.2 Target Id

user

#### 2.5.12.3 Message

12. Displays a success toast notification and shows the new post in the UI.

#### 2.5.12.4 Sequence Number

12

#### 2.5.12.5 Type

üîπ UI Update

#### 2.5.12.6 Is Synchronous

‚úÖ Yes

#### 2.5.12.7 Return Message



#### 2.5.12.8 Has Return

‚ùå No

#### 2.5.12.9 Is Activation

‚ùå No

#### 2.5.12.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | UI Render |
| Method | React.render |
| Parameters | Updated component tree. |
| Authentication | N/A |
| Error Handling | N/A |
| Performance | LCP should not be negatively impacted. |

## 2.6.0.0 Notes

### 2.6.1.0 Content

#### 2.6.1.1 Content

The 'PostCreated' event is consumed by the Feed Service in a separate, asynchronous sequence (SEQ-EP-002) to fan out the new post to the feeds of the author's connections.

#### 2.6.1.2 Position

bottom

#### 2.6.1.3 Participant Id

REPO-EVENT-BUS

#### 2.6.1.4 Sequence Number

7

### 2.6.2.0 Content

#### 2.6.2.1 Content

Optimistic UI Update: The client immediately shows the new post upon submission, assuming success. It will be removed or marked as failed if the API call returns an error.

#### 2.6.2.2 Position

right

#### 2.6.2.3 Participant Id

REPO-APP-WEB

#### 2.6.2.4 Sequence Number

11

## 2.7.0.0 Implementation Guidance

| Property | Value |
|----------|-------|
| Security Requirements | Client-side input must be sanitized before renderi... |
| Performance Targets | End-to-end P95 latency (user click to UI update) m... |
| Error Handling Strategy | Client: Display inline validation errors. For API ... |
| Testing Considerations | E2E tests (Cypress/Playwright) must cover the full... |
| Monitoring Requirements | A business metric counter `app_posts_created_total... |
| Deployment Considerations | N/A for this specific sequence. |

