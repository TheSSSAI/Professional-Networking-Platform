# 1 Overview

## 1.1 Diagram Id

SEQ-AF-002

## 1.2 Name

Silent Authentication with Refresh Token

## 1.3 Description

When a user's JWT access token expires, the client application's auth interceptor uses the long-lived refresh token to transparently request a new access token, ensuring a seamless session without requiring user re-authentication.

## 1.4 Type

üîπ AuthenticationFlow

## 1.5 Purpose

To maintain a seamless user session by transparently refreshing expired access tokens, as specified in SRS-001-F1 (1.1.4).

## 1.6 Complexity

Medium

## 1.7 Priority

üî¥ High

## 1.8 Frequency

OnDemand

## 1.9 Participants

- REPO-APP-CLIENT
- REPO-GW-API
- REPO-SVC-IDENTITY

## 1.10 Key Interactions

- Client makes an API request with an expired access token.
- API Gateway returns a 401 Unauthorized error.
- Client's auth interceptor catches the 401 and pauses the original request.
- The interceptor sends the refresh token to a dedicated endpoint (/auth/refresh) on the Identity Service.
- Identity Service validates the refresh token against its database and checks it's not on the blocklist.
- Identity Service issues a new access token.
- Client interceptor replaces the old access token and retries the original failed API request with the new token.

## 1.11 Triggers

- An API call is made with an expired JWT access token.

## 1.12 Outcomes

- A new, valid access token is issued to the client.
- The user's session continues without interruption.

## 1.13 Business Rules

- Refresh tokens must be valid and not revoked.
- If the refresh token is invalid or expired, the user must be logged out and forced to re-authenticate.

## 1.14 Error Scenarios

- Refresh token is expired or has been revoked (e.g., due to logout).
- Refresh token is not found, is malformed, or fails validation.

## 1.15 Integration Points

*No items available*

# 2.0 Details

## 2.1 Diagram Id

SEQ-AF-002

## 2.2 Name

Implementation: Silent Authentication with Refresh Token

## 2.3 Description

Technical sequence for transparently refreshing an expired JWT access token. An auth interceptor on the client handles 401 responses by using a long-lived refresh token to request a new access token from the Identity Service via a dedicated API Gateway endpoint. This process ensures a seamless user session as per SRS-001-F1 (1.1.4).

## 2.4 Participants

### 2.4.1 Client Application

#### 2.4.1.1 Repository Id

REPO-APP-CLIENT

#### 2.4.1.2 Display Name

Client App (Auth Interceptor)

#### 2.4.1.3 Type

üîπ Client Application

#### 2.4.1.4 Technology

Next.js, TypeScript, Apollo/Axios Interceptor

#### 2.4.1.5 Order

1

#### 2.4.1.6 Style

| Property | Value |
|----------|-------|
| Shape | actor |
| Color | #1E90FF |
| Stereotype | SPA |

### 2.4.2.0 API Gateway

#### 2.4.2.1 Repository Id

REPO-GW-API

#### 2.4.2.2 Display Name

API Gateway

#### 2.4.2.3 Type

üîπ API Gateway

#### 2.4.2.4 Technology

AWS API Gateway (JWT Authorizer)

#### 2.4.2.5 Order

2

#### 2.4.2.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #FF8C00 |
| Stereotype | Gateway |

### 2.4.3.0 Microservice

#### 2.4.3.1 Repository Id

REPO-SVC-IDENTITY

#### 2.4.3.2 Display Name

Identity & Access Service

#### 2.4.3.3 Type

üîπ Microservice

#### 2.4.3.4 Technology

NestJS, TypeScript, gRPC, PostgreSQL, Redis

#### 2.4.3.5 Order

3

#### 2.4.3.6 Style

| Property | Value |
|----------|-------|
| Shape | component |
| Color | #32CD32 |
| Stereotype | Service |

## 2.5.0.0 Interactions

### 2.5.1.0 HTTP Request

#### 2.5.1.1 Source Id

REPO-APP-CLIENT

#### 2.5.1.2 Target Id

REPO-GW-API

#### 2.5.1.3 Message

1. Request protected resource with expired Access Token

#### 2.5.1.4 Sequence Number

1

#### 2.5.1.5 Type

üîπ HTTP Request

#### 2.5.1.6 Is Synchronous

‚úÖ Yes

#### 2.5.1.7 Return Message

2. [401 Unauthorized] Token validation failed due to expiration

#### 2.5.1.8 Has Return

‚úÖ Yes

#### 2.5.1.9 Is Activation

‚ùå No

#### 2.5.1.10 Technical Details

##### 2.5.1.10.1 Protocol

HTTPS/2

##### 2.5.1.10.2 Method

GET /api/v1/profile

##### 2.5.1.10.3 Parameters

Headers: { 'Authorization': 'Bearer <expired_jwt>', 'X-Request-ID': '...' }

##### 2.5.1.10.4 Authentication

JWT Bearer Token

##### 2.5.1.10.5 Error Handling

Client-side auth interceptor is expected to handle the 401 response.

##### 2.5.1.10.6 Performance

###### 2.5.1.10.6.1 Latency

<50ms to gateway

#### 2.5.1.11.0.0 Nested Interactions

*No items available*

### 2.5.2.0.0.0 Internal Process

#### 2.5.2.1.0.0 Source Id

REPO-APP-CLIENT

#### 2.5.2.2.0.0 Target Id

REPO-APP-CLIENT

#### 2.5.2.3.0.0 Message

3. Auth interceptor catches 401, pauses original request queue

#### 2.5.2.4.0.0 Sequence Number

2

#### 2.5.2.5.0.0 Type

üîπ Internal Process

#### 2.5.2.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.2.7.0.0 Return Message



#### 2.5.2.8.0.0 Has Return

‚ùå No

#### 2.5.2.9.0.0 Is Activation

‚úÖ Yes

#### 2.5.2.10.0.0 Technical Details

##### 2.5.2.10.1.0 Protocol

Internal

##### 2.5.2.10.2.0 Method

interceptor.handleError(error)

##### 2.5.2.10.3.0 Parameters

The 401 error object from the previous step. The interceptor must implement a locking mechanism to ensure the refresh flow is only executed once for concurrent failed requests.

##### 2.5.2.10.4.0 Authentication

N/A

##### 2.5.2.10.5.0 Error Handling

If no refresh token is available, immediately reject all queued requests and trigger logout.

##### 2.5.2.10.6.0 Performance

###### 2.5.2.10.6.1 Latency

<5ms

#### 2.5.2.11.0.0 Nested Interactions

*No items available*

### 2.5.3.0.0.0 HTTP Request

#### 2.5.3.1.0.0 Source Id

REPO-APP-CLIENT

#### 2.5.3.2.0.0 Target Id

REPO-GW-API

#### 2.5.3.3.0.0 Message

4. Request new Access Token using Refresh Token

#### 2.5.3.4.0.0 Sequence Number

3

#### 2.5.3.5.0.0 Type

üîπ HTTP Request

#### 2.5.3.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.3.7.0.0 Return Message

9. [200 OK] Return new Access Token

#### 2.5.3.8.0.0 Has Return

‚úÖ Yes

#### 2.5.3.9.0.0 Is Activation

‚ùå No

#### 2.5.3.10.0.0 Technical Details

##### 2.5.3.10.1.0 Protocol

HTTPS/2

##### 2.5.3.10.2.0 Method

POST /auth/refresh

##### 2.5.3.10.3.0 Parameters

Body: { refreshToken: '...' }. Refresh token should be sent from a secure, HttpOnly cookie if in a browser context.

##### 2.5.3.10.4.0 Authentication

None (Refresh token serves as credential)

##### 2.5.3.10.5.0 Error Handling

If this call fails with 401/403, the interceptor must trigger a full logout (see Implementation Guidance).

##### 2.5.3.10.6.0 Performance

###### 2.5.3.10.6.1 Latency

P95 < 300ms (end-to-end)

#### 2.5.3.11.0.0 Nested Interactions

- {'sourceId': 'REPO-GW-API', 'targetId': 'REPO-SVC-IDENTITY', 'message': '5. Forward refresh request to Identity Service', 'sequenceNumber': 4, 'type': 'gRPC Call', 'isSynchronous': True, 'returnMessage': '8. [gRPC OK] Return new Access Token details', 'hasReturn': True, 'isActivation': True, 'technicalDetails': {'protocol': 'gRPC', 'method': 'AuthService.RefreshToken', 'parameters': "RefreshTokenRequest { token: '...' }", 'authentication': 'Internal network trust (e.g., mTLS)', 'errorHandling': 'Returns gRPC status code UNAUTHENTICATED if refresh token is invalid.', 'performance': {'latency': 'P95 < 250ms'}}, 'nestedInteractions': [{'sourceId': 'REPO-SVC-IDENTITY', 'targetId': 'REPO-SVC-IDENTITY', 'message': '6. Validate Refresh Token: Verify signature, expiration, check against DB, and check revocation list in Redis', 'sequenceNumber': 5, 'type': 'Internal Validation', 'isSynchronous': True, 'returnMessage': 'Validation successful', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'Internal', 'method': 'validateRefreshToken(token)', 'parameters': 'The refresh token string.', 'authentication': 'N/A', 'errorHandling': 'Throws InvalidTokenError or TokenRevokedError, which are caught and mapped to a gRPC UNAUTHENTICATED status.', 'performance': {'latency': 'Includes DB (~10ms) and Redis (~2ms) lookups.'}}, 'nestedInteractions': []}, {'sourceId': 'REPO-SVC-IDENTITY', 'targetId': 'REPO-SVC-IDENTITY', 'message': '7. Generate new JWT Access Token with appropriate claims and expiration', 'sequenceNumber': 6, 'type': 'Internal Process', 'isSynchronous': True, 'returnMessage': 'New JWT string', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'Internal', 'method': 'generateAccessToken(claims)', 'parameters': 'User claims (userId, roles, etc.) retrieved during token validation.', 'authentication': 'N/A', 'errorHandling': 'N/A', 'performance': {'latency': '<5ms'}}, 'nestedInteractions': []}]}

### 2.5.4.0.0.0 Internal Process

#### 2.5.4.1.0.0 Source Id

REPO-APP-CLIENT

#### 2.5.4.2.0.0 Target Id

REPO-APP-CLIENT

#### 2.5.4.3.0.0 Message

10. Store new Access Token and release request queue

#### 2.5.4.4.0.0 Sequence Number

7

#### 2.5.4.5.0.0 Type

üîπ Internal Process

#### 2.5.4.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.4.7.0.0 Return Message



#### 2.5.4.8.0.0 Has Return

‚ùå No

#### 2.5.4.9.0.0 Is Activation

‚ùå No

#### 2.5.4.10.0.0 Technical Details

##### 2.5.4.10.1.0 Protocol

Internal

##### 2.5.4.10.2.0 Method

interceptor.onRefreshSuccess(newAccessToken)

##### 2.5.4.10.3.0 Parameters

The new JWT access token.

##### 2.5.4.10.4.0 Authentication

N/A

##### 2.5.4.10.5.0 Error Handling

N/A

##### 2.5.4.10.6.0 Performance

###### 2.5.4.10.6.1 Latency

<5ms

#### 2.5.4.11.0.0 Nested Interactions

*No items available*

### 2.5.5.0.0.0 HTTP Request

#### 2.5.5.1.0.0 Source Id

REPO-APP-CLIENT

#### 2.5.5.2.0.0 Target Id

REPO-GW-API

#### 2.5.5.3.0.0 Message

11. Retry original request with new Access Token

#### 2.5.5.4.0.0 Sequence Number

8

#### 2.5.5.5.0.0 Type

üîπ HTTP Request

#### 2.5.5.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.5.7.0.0 Return Message

12. [200 OK] Return successful response from resource

#### 2.5.5.8.0.0 Has Return

‚úÖ Yes

#### 2.5.5.9.0.0 Is Activation

‚ùå No

#### 2.5.5.10.0.0 Technical Details

##### 2.5.5.10.1.0 Protocol

HTTPS/2

##### 2.5.5.10.2.0 Method

GET /api/v1/profile

##### 2.5.5.10.3.0 Parameters

Headers: { 'Authorization': 'Bearer <new_jwt>', 'X-Request-ID': '...' }

##### 2.5.5.10.4.0 Authentication

JWT Bearer Token

##### 2.5.5.10.5.0 Error Handling

A failure here would be a standard API error, not an auth error.

##### 2.5.5.10.6.0 Performance

###### 2.5.5.10.6.1 Latency

<50ms to gateway

#### 2.5.5.11.0.0 Nested Interactions

*No items available*

## 2.6.0.0.0.0 Notes

### 2.6.1.0.0.0 Content

#### 2.6.1.1.0.0 Content

On step 11, the API Gateway's JWT Authorizer successfully validates the new access token before forwarding the request to the appropriate backend service (e.g., User Profile Service).

#### 2.6.1.2.0.0 Position

bottom

#### 2.6.1.3.0.0 Participant Id

REPO-GW-API

#### 2.6.1.4.0.0 Sequence Number

8

### 2.6.2.0.0.0 Content

#### 2.6.2.1.0.0 Content

Error Scenario: If Refresh Token validation fails at step 6, the Identity Service returns a gRPC UNAUTHENTICATED error. The API Gateway maps this to an HTTP 401 response for the POST /auth/refresh call. The client interceptor must then clear all tokens and redirect the user to the login page, terminating the session.

#### 2.6.2.2.0.0 Position

bottom

#### 2.6.2.3.0.0 Participant Id

REPO-APP-CLIENT

#### 2.6.2.4.0.0 Sequence Number

3

## 2.7.0.0.0.0 Implementation Guidance

### 2.7.1.0.0.0 Security Requirements

| Property | Value |
|----------|-------|
| Refresh Token Storage | Refresh tokens MUST be stored securely. For web cl... |
| Refresh Token Rotation | For enhanced security, the Identity Service SHOULD... |
| Token Revocation | The Identity Service MUST check a token revocation... |
| Audit Logging | All refresh attempts (successful and failed) MUST ... |

### 2.7.2.0.0.0 Performance Targets

#### 2.7.2.1.0.0 End To End Latency

The entire refresh flow (from initial 401 to successful retry) should have a P95 latency of less than 500ms to ensure a seamless user experience.

#### 2.7.2.2.0.0 Identity Service Latency

The Identity Service's `RefreshToken` gRPC endpoint must have a P95 latency of less than 250ms under nominal load.

### 2.7.3.0.0.0 Error Handling Strategy

| Property | Value |
|----------|-------|
| Client Side | If the `POST /auth/refresh` request fails for any ... |
| Server Side | The Identity Service must distinguish between inva... |
| Monitoring | Create a critical alert for a high rate of 401 fai... |

### 2.7.4.0.0.0 Testing Considerations

| Property | Value |
|----------|-------|
| Happy Path | Verify that an expired access token is successfull... |
| Failure Path | Verify that an invalid, expired, or revoked refres... |
| Concurrency | Verify that multiple concurrent API calls with an ... |
| Security | Perform tests to ensure refresh tokens are not exp... |

### 2.7.5.0.0.0 Monitoring Requirements

| Property | Value |
|----------|-------|
| Metrics | Track P50/P95/P99 latency of the `/auth/refresh` e... |
| Logs | Ensure all logs related to a single refresh flow a... |
| Dashboards | Create a dedicated 'Authentication Health' dashboa... |

### 2.7.6.0.0.0 Deployment Considerations

#### 2.7.6.1.0.0 Token Secrets

JWT signing keys and other secrets for the Identity Service must be managed securely using a secret manager (e.g., AWS Secrets Manager) and injected into the environment at runtime, not stored in code.

#### 2.7.6.2.0.0 Versioning

The `/auth/refresh` endpoint should be versioned. If the token structure or refresh logic changes, a new endpoint version should be introduced to avoid breaking older clients.

