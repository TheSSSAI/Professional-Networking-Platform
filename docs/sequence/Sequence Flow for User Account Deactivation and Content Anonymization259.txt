# 1 Overview

## 1.1 Diagram Id

SEQ-DF-001

## 1.2 Name

User Account Deactivation and Content Anonymization

## 1.3 Description

A user chooses to deactivate their account. Their profile and posts become invisible, and their interactive content (comments, messages) is anonymized to preserve context for other users.

## 1.4 Type

üîπ DataFlow

## 1.5 Purpose

To provide a non-permanent way for users to leave the platform while preserving the integrity of conversations, as per SRS-001-F1 (1.1.5).

## 1.6 Complexity

Medium

## 1.7 Priority

üü° Medium

## 1.8 Frequency

OnDemand

## 1.9 Participants

- REPO-SVC-PROFILE
- REPO-EVENT-BUS
- REPO-SVC-SEARCH
- REPO-SVC-POSTS

## 1.10 Key Interactions

- User Profile Service sets the user's status to 'deactivated'.
- It then publishes an 'AccountDeactivated' event.
- The Search Service consumes the event and removes the user's profile from the search index.
- The Posts Service and Engagement Service consume the event and update their data stores to anonymize comments and other interactions (e.g., change author name to 'Deactivated User').
- API Gateway logic will now block access to the user's profile page and primary content.

## 1.11 Triggers

- User clicks 'Deactivate Account' in their settings.

## 1.12 Outcomes

- The user's profile is no longer visible or searchable.
- The user can reactivate their account by logging in again.

## 1.13 Business Rules

- Interactive content like comments must remain but be anonymized (1.1.5).
- Primary content like posts must become invisible.

## 1.14 Error Scenarios

- One of the consumer services fails to anonymize its data, leaving some user content visible.

## 1.15 Integration Points

*No items available*

# 2.0 Details

## 2.1 Diagram Id

SEQ-DF-001

## 2.2 Name

Implementation Sequence: User Account Deactivation and Data Anonymization

## 2.3 Description

Provides a detailed technical specification for the user account deactivation process. The sequence is initiated by a synchronous API call that transactionally updates the user's status to 'DEACTIVATED' and invalidates relevant caches. Upon successful commit, an 'AccountDeactivated' event is published to an event bus. Downstream services (Search, Posts, Engagement) consume this event asynchronously to achieve eventual consistency by de-indexing the user's profile and anonymizing their historical contributions (comments, reactions) as required by SRS-001-F1.

## 2.4 Participants

### 2.4.1 Actor

#### 2.4.1.1 Repository Id

ACTOR-USER

#### 2.4.1.2 Display Name

User

#### 2.4.1.3 Type

üîπ Actor

#### 2.4.1.4 Technology

Web Browser

#### 2.4.1.5 Order

1

#### 2.4.1.6 Style

| Property | Value |
|----------|-------|
| Shape | actor |
| Color | #999999 |
| Stereotype |  |

### 2.4.2.0 Gateway

#### 2.4.2.1 Repository Id

REPO-GW-API

#### 2.4.2.2 Display Name

API Gateway

#### 2.4.2.3 Type

üîπ Gateway

#### 2.4.2.4 Technology

AWS API Gateway

#### 2.4.2.5 Order

2

#### 2.4.2.6 Style

| Property | Value |
|----------|-------|
| Shape | rectangle |
| Color | #FF9900 |
| Stereotype | ¬´Gateway¬ª |

### 2.4.3.0 Service

#### 2.4.3.1 Repository Id

REPO-SVC-PROFILE

#### 2.4.3.2 Display Name

User Profile Service

#### 2.4.3.3 Type

üîπ Service

#### 2.4.3.4 Technology

NestJS, TypeScript

#### 2.4.3.5 Order

3

#### 2.4.3.6 Style

| Property | Value |
|----------|-------|
| Shape | rectangle |
| Color | #1D8102 |
| Stereotype | ¬´Microservice¬ª |

### 2.4.4.0 Database

#### 2.4.4.1 Repository Id

REPO-DB-POSTGRES

#### 2.4.4.2 Display Name

PostgreSQL DB

#### 2.4.4.3 Type

üîπ Database

#### 2.4.4.4 Technology

AWS RDS (PostgreSQL)

#### 2.4.4.5 Order

4

#### 2.4.4.6 Style

| Property | Value |
|----------|-------|
| Shape | database |
| Color | #336791 |
| Stereotype | ¬´Primary Datastore¬ª |

### 2.4.5.0 Cache

#### 2.4.5.1 Repository Id

REPO-CACHE-REDIS

#### 2.4.5.2 Display Name

Redis Cache

#### 2.4.5.3 Type

üîπ Cache

#### 2.4.5.4 Technology

AWS ElastiCache (Redis)

#### 2.4.5.5 Order

5

#### 2.4.5.6 Style

| Property | Value |
|----------|-------|
| Shape | database |
| Color | #D82C20 |
| Stereotype | ¬´Cache¬ª |

### 2.4.6.0 MessageBroker

#### 2.4.6.1 Repository Id

REPO-EVENT-BUS

#### 2.4.6.2 Display Name

Event Bus

#### 2.4.6.3 Type

üîπ MessageBroker

#### 2.4.6.4 Technology

AWS SNS/SQS

#### 2.4.6.5 Order

6

#### 2.4.6.6 Style

| Property | Value |
|----------|-------|
| Shape | rectangle |
| Color | #B71A8B |
| Stereotype | ¬´Event Bus¬ª |

### 2.4.7.0 Service

#### 2.4.7.1 Repository Id

REPO-SVC-SEARCH

#### 2.4.7.2 Display Name

Search Service

#### 2.4.7.3 Type

üîπ Service

#### 2.4.7.4 Technology

NestJS, TypeScript

#### 2.4.7.5 Order

7

#### 2.4.7.6 Style

| Property | Value |
|----------|-------|
| Shape | rectangle |
| Color | #1D8102 |
| Stereotype | ¬´Microservice¬ª |

### 2.4.8.0 SearchEngine

#### 2.4.8.1 Repository Id

REPO-SEARCH-OPENSEARCH

#### 2.4.8.2 Display Name

OpenSearch Cluster

#### 2.4.8.3 Type

üîπ SearchEngine

#### 2.4.8.4 Technology

AWS OpenSearch

#### 2.4.8.5 Order

8

#### 2.4.8.6 Style

| Property | Value |
|----------|-------|
| Shape | database |
| Color | #005571 |
| Stereotype | ¬´Search Index¬ª |

### 2.4.9.0 Service

#### 2.4.9.1 Repository Id

REPO-SVC-POSTS

#### 2.4.9.2 Display Name

Posts & Engagement Service

#### 2.4.9.3 Type

üîπ Service

#### 2.4.9.4 Technology

NestJS, TypeScript

#### 2.4.9.5 Order

9

#### 2.4.9.6 Style

| Property | Value |
|----------|-------|
| Shape | rectangle |
| Color | #1D8102 |
| Stereotype | ¬´Microservice¬ª |

## 2.5.0.0 Interactions

### 2.5.1.0 Request

#### 2.5.1.1 Source Id

ACTOR-USER

#### 2.5.1.2 Target Id

REPO-GW-API

#### 2.5.1.3 Message

1. POST /v1/me/account/deactivate

#### 2.5.1.4 Sequence Number

1

#### 2.5.1.5 Type

üîπ Request

#### 2.5.1.6 Is Synchronous

‚úÖ Yes

#### 2.5.1.7 Return Message

9. HTTP 200 OK or 4xx/5xx Error

#### 2.5.1.8 Has Return

‚úÖ Yes

#### 2.5.1.9 Is Activation

‚ùå No

#### 2.5.1.10 Technical Details

##### 2.5.1.10.1 Protocol

HTTPS

##### 2.5.1.10.2 Method

POST

##### 2.5.1.10.3 Parameters

{}

##### 2.5.1.10.4 Authentication

Requires valid JWT Access Token in 'Authorization: Bearer <token>' header.

##### 2.5.1.10.5 Error Handling

Returns HTTP 401 Unauthorized if token is missing/invalid. Returns HTTP 403 Forbidden if user is already deactivated.

##### 2.5.1.10.6 Performance

###### 2.5.1.10.6.1 Latency

< 50ms (TTFB)

### 2.5.2.0.0.0 gRPC Call

#### 2.5.2.1.0.0 Source Id

REPO-GW-API

#### 2.5.2.2.0.0 Target Id

REPO-SVC-PROFILE

#### 2.5.2.3.0.0 Message

2. deactivateAccount(userId)

#### 2.5.2.4.0.0 Sequence Number

2

#### 2.5.2.5.0.0 Type

üîπ gRPC Call

#### 2.5.2.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.2.7.0.0 Return Message

8. DeactivateAccountResponse { success: true }

#### 2.5.2.8.0.0 Has Return

‚úÖ Yes

#### 2.5.2.9.0.0 Is Activation

‚úÖ Yes

#### 2.5.2.10.0.0 Technical Details

##### 2.5.2.10.1.0 Protocol

gRPC

##### 2.5.2.10.2.0 Method

UserService.deactivateAccount

##### 2.5.2.10.3.0 Parameters

DeactivateAccountRequest { userId: string } extracted from JWT.

##### 2.5.2.10.4.0 Authentication

mTLS between Gateway and Service. Service trusts userId from Gateway.

##### 2.5.2.10.5.0 Error Handling

Throws RpcException on failure, which Gateway maps to HTTP 500.

##### 2.5.2.10.6.0 Performance

###### 2.5.2.10.6.1 Latency

< 150ms (p95)

### 2.5.3.0.0.0 Database Operation

#### 2.5.3.1.0.0 Source Id

REPO-SVC-PROFILE

#### 2.5.3.2.0.0 Target Id

REPO-DB-POSTGRES

#### 2.5.3.3.0.0 Message

3. BEGIN TRANSACTION

#### 2.5.3.4.0.0 Sequence Number

3

#### 2.5.3.5.0.0 Type

üîπ Database Operation

#### 2.5.3.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.3.7.0.0 Return Message

Success

#### 2.5.3.8.0.0 Has Return

‚úÖ Yes

#### 2.5.3.9.0.0 Is Activation

‚úÖ Yes

#### 2.5.3.10.0.0 Technical Details

##### 2.5.3.10.1.0 Protocol

SQL

##### 2.5.3.10.2.0 Method

BEGIN

##### 2.5.3.10.3.0 Parameters

Isolation Level: READ COMMITTED

##### 2.5.3.10.4.0 Authentication

Service uses credentials with limited write permissions.

##### 2.5.3.10.5.0 Error Handling

Throws DatabaseException on connection failure.

##### 2.5.3.10.6.0 Performance

*No data available*

### 2.5.4.0.0.0 Database Operation

#### 2.5.4.1.0.0 Source Id

REPO-SVC-PROFILE

#### 2.5.4.2.0.0 Target Id

REPO-DB-POSTGRES

#### 2.5.4.3.0.0 Message

4. UPDATE "User" SET status = 'DEACTIVATED' WHERE id = :userId

#### 2.5.4.4.0.0 Sequence Number

4

#### 2.5.4.5.0.0 Type

üîπ Database Operation

#### 2.5.4.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.4.7.0.0 Return Message

1 row affected

#### 2.5.4.8.0.0 Has Return

‚úÖ Yes

#### 2.5.4.9.0.0 Is Activation

‚ùå No

#### 2.5.4.10.0.0 Technical Details

##### 2.5.4.10.1.0 Protocol

SQL

##### 2.5.4.10.2.0 Method

```sql
UPDATE
```

##### 2.5.4.10.3.0 Parameters

{ userId: string }

##### 2.5.4.10.4.0 Authentication

N/A (within transaction)

##### 2.5.4.10.5.0 Error Handling

Throws DatabaseException, triggering transaction rollback.

##### 2.5.4.10.6.0 Performance

###### 2.5.4.10.6.1 Notes

Query must use primary key index for high performance.

### 2.5.5.0.0.0 Cache Operation

#### 2.5.5.1.0.0 Source Id

REPO-SVC-PROFILE

#### 2.5.5.2.0.0 Target Id

REPO-CACHE-REDIS

#### 2.5.5.3.0.0 Message

5. Invalidate Profile Cache

#### 2.5.5.4.0.0 Sequence Number

5

#### 2.5.5.5.0.0 Type

üîπ Cache Operation

#### 2.5.5.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.5.7.0.0 Return Message

Success/Failure

#### 2.5.5.8.0.0 Has Return

‚úÖ Yes

#### 2.5.5.9.0.0 Is Activation

‚ùå No

#### 2.5.5.10.0.0 Technical Details

##### 2.5.5.10.1.0 Protocol

Redis Protocol

##### 2.5.5.10.2.0 Method

DEL

##### 2.5.5.10.3.0 Parameters

['user:profile:<userId>', 'user:connections:<userId>']

##### 2.5.5.10.4.0 Authentication

Service connects via authenticated session.

##### 2.5.5.10.5.0 Error Handling

On failure, log warning. Stale cache will expire via TTL. Does not cause transaction rollback.

##### 2.5.5.10.6.0 Performance

###### 2.5.5.10.6.1 Latency

< 5ms

### 2.5.6.0.0.0 Database Operation

#### 2.5.6.1.0.0 Source Id

REPO-SVC-PROFILE

#### 2.5.6.2.0.0 Target Id

REPO-DB-POSTGRES

#### 2.5.6.3.0.0 Message

6. COMMIT TRANSACTION

#### 2.5.6.4.0.0 Sequence Number

6

#### 2.5.6.5.0.0 Type

üîπ Database Operation

#### 2.5.6.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.6.7.0.0 Return Message

Success

#### 2.5.6.8.0.0 Has Return

‚úÖ Yes

#### 2.5.6.9.0.0 Is Activation

‚ùå No

#### 2.5.6.10.0.0 Technical Details

##### 2.5.6.10.1.0 Protocol

SQL

##### 2.5.6.10.2.0 Method

COMMIT

##### 2.5.6.10.3.0 Parameters

N/A

##### 2.5.6.10.4.0 Authentication

N/A (within transaction)

##### 2.5.6.10.5.0 Error Handling

On failure, throws critical DatabaseException. System state is inconsistent and requires manual intervention/alerting.

##### 2.5.6.10.6.0 Performance

*No data available*

### 2.5.7.0.0.0 Event Publish

#### 2.5.7.1.0.0 Source Id

REPO-SVC-PROFILE

#### 2.5.7.2.0.0 Target Id

REPO-EVENT-BUS

#### 2.5.7.3.0.0 Message

7. Publish(topic='user-events', event='AccountDeactivated')

#### 2.5.7.4.0.0 Sequence Number

7

#### 2.5.7.5.0.0 Type

üîπ Event Publish

#### 2.5.7.6.0.0 Is Synchronous

‚ùå No

#### 2.5.7.7.0.0 Return Message



#### 2.5.7.8.0.0 Has Return

‚ùå No

#### 2.5.7.9.0.0 Is Activation

‚ùå No

#### 2.5.7.10.0.0 Technical Details

##### 2.5.7.10.1.0 Protocol

AWS SNS API

##### 2.5.7.10.2.0 Method

Publish

##### 2.5.7.10.3.0 Parameters

Payload: { eventVersion: '1.0', userId: string, deactivatedAt: timestamp }

##### 2.5.7.10.4.0 Authentication

IAM Role assigned to the service pod.

##### 2.5.7.10.5.0 Error Handling

Publishing is 'fire and forget' from the synchronous flow. Implemented with retry logic. On persistent failure, log critical error and alert for manual reconciliation.

##### 2.5.7.10.6.0 Performance

*No data available*

### 2.5.8.0.0.0 Event Consume

#### 2.5.8.1.0.0 Source Id

REPO-EVENT-BUS

#### 2.5.8.2.0.0 Target Id

REPO-SVC-SEARCH

#### 2.5.8.3.0.0 Message

10. Deliver Event: AccountDeactivated

#### 2.5.8.4.0.0 Sequence Number

10

#### 2.5.8.5.0.0 Type

üîπ Event Consume

#### 2.5.8.6.0.0 Is Synchronous

‚ùå No

#### 2.5.8.7.0.0 Return Message



#### 2.5.8.8.0.0 Has Return

‚ùå No

#### 2.5.8.9.0.0 Is Activation

‚úÖ Yes

#### 2.5.8.10.0.0 Technical Details

##### 2.5.8.10.1.0 Protocol

AWS SQS

##### 2.5.8.10.2.0 Method

ReceiveMessage

##### 2.5.8.10.3.0 Parameters

From 'search-user-deactivated-queue'

##### 2.5.8.10.4.0 Authentication

IAM Role assigned to the service pod.

##### 2.5.8.10.5.0 Error Handling

Handler must be idempotent. On processing failure, message is retried via SQS visibility timeout. After max retries, message is moved to a DLQ.

##### 2.5.8.10.6.0 Performance

*No data available*

### 2.5.9.0.0.0 API Call

#### 2.5.9.1.0.0 Source Id

REPO-SVC-SEARCH

#### 2.5.9.2.0.0 Target Id

REPO-SEARCH-OPENSEARCH

#### 2.5.9.3.0.0 Message

11. DELETE /user_profiles/_doc/:userId

#### 2.5.9.4.0.0 Sequence Number

11

#### 2.5.9.5.0.0 Type

üîπ API Call

#### 2.5.9.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.9.7.0.0 Return Message

200 OK { result: 'deleted' }

#### 2.5.9.8.0.0 Has Return

‚úÖ Yes

#### 2.5.9.9.0.0 Is Activation

‚ùå No

#### 2.5.9.10.0.0 Technical Details

##### 2.5.9.10.1.0 Protocol

HTTP

##### 2.5.9.10.2.0 Method

```sql
DELETE
```

##### 2.5.9.10.3.0 Parameters

userId path parameter

##### 2.5.9.10.4.0 Authentication

IAM-signed requests.

##### 2.5.9.10.5.0 Error Handling

On failure (e.g., 5xx), the event handler should throw an error to trigger SQS retry.

##### 2.5.9.10.6.0 Performance

###### 2.5.9.10.6.1 Latency

< 50ms

### 2.5.10.0.0.0 Event Consume

#### 2.5.10.1.0.0 Source Id

REPO-EVENT-BUS

#### 2.5.10.2.0.0 Target Id

REPO-SVC-POSTS

#### 2.5.10.3.0.0 Message

12. Deliver Event: AccountDeactivated

#### 2.5.10.4.0.0 Sequence Number

12

#### 2.5.10.5.0.0 Type

üîπ Event Consume

#### 2.5.10.6.0.0 Is Synchronous

‚ùå No

#### 2.5.10.7.0.0 Return Message



#### 2.5.10.8.0.0 Has Return

‚ùå No

#### 2.5.10.9.0.0 Is Activation

‚úÖ Yes

#### 2.5.10.10.0.0 Technical Details

##### 2.5.10.10.1.0 Protocol

AWS SQS

##### 2.5.10.10.2.0 Method

ReceiveMessage

##### 2.5.10.10.3.0 Parameters

From 'posts-user-deactivated-queue'

##### 2.5.10.10.4.0 Authentication

IAM Role assigned to the service pod.

##### 2.5.10.10.5.0 Error Handling

Handler must be idempotent. On processing failure, message is retried via SQS visibility timeout. After max retries, message is moved to a DLQ.

##### 2.5.10.10.6.0 Performance

*No data available*

### 2.5.11.0.0.0 Database Operation

#### 2.5.11.1.0.0 Source Id

REPO-SVC-POSTS

#### 2.5.11.2.0.0 Target Id

REPO-DB-POSTGRES

#### 2.5.11.3.0.0 Message

13. Anonymize user's interactive content

#### 2.5.11.4.0.0 Sequence Number

13

#### 2.5.11.5.0.0 Type

üîπ Database Operation

#### 2.5.11.6.0.0 Is Synchronous

‚úÖ Yes

#### 2.5.11.7.0.0 Return Message

N rows affected

#### 2.5.11.8.0.0 Has Return

‚úÖ Yes

#### 2.5.11.9.0.0 Is Activation

‚ùå No

#### 2.5.11.10.0.0 Technical Details

##### 2.5.11.10.1.0 Protocol

SQL

##### 2.5.11.10.2.0 Method

```sql
UPDATE
```

##### 2.5.11.10.3.0 Parameters

Executes: UPDATE "Comment" SET "authorName" = 'Deactivated User', "authorId" = NULL WHERE "authorId" = :userId; (And similar for other interactions like reactions).

##### 2.5.11.10.4.0 Authentication

Service uses credentials with limited write permissions.

##### 2.5.11.10.5.0 Error Handling

On failure, the event handler should throw an error to trigger SQS retry.

##### 2.5.11.10.6.0 Performance

###### 2.5.11.10.6.1 Notes

The 'authorId' column on interaction tables must be indexed to prevent full table scans.

## 2.6.0.0.0.0 Notes

### 2.6.1.0.0.0 Content

#### 2.6.1.1.0.0 Content

The synchronous path (1-9) is optimized for speed to give the user immediate feedback. Asynchronous event handling (10-13) ensures resilience and decouples services, following a CQRS/Event-Driven pattern.

#### 2.6.1.2.0.0 Position

top-right

#### 2.6.1.3.0.0 Participant Id

*Not specified*

#### 2.6.1.4.0.0 Sequence Number

*Not specified*

### 2.6.2.0.0.0 Content

#### 2.6.2.1.0.0 Content

A successful transaction here is critical. The Unit of Work pattern is applied to ensure the user status is updated and the cache is invalidated atomically.

#### 2.6.2.2.0.0 Position

right

#### 2.6.2.3.0.0 Participant Id

REPO-SVC-PROFILE

#### 2.6.2.4.0.0 Sequence Number

3

### 2.6.3.0.0.0 Content

#### 2.6.3.1.0.0 Content

All event consumer logic must be idempotent. For example, re-processing a deactivation event should have no adverse effects.

#### 2.6.3.2.0.0 Position

bottom-left

#### 2.6.3.3.0.0 Participant Id

*Not specified*

#### 2.6.3.4.0.0 Sequence Number

10

## 2.7.0.0.0.0 Implementation Guidance

| Property | Value |
|----------|-------|
| Security Requirements | The API Gateway must enforce authentication and au... |
| Performance Targets | The end-to-end synchronous API call (User -> Gatew... |
| Error Handling Strategy | 1. **Synchronous Flow**: If the database transacti... |
| Testing Considerations | 1. **End-to-End Test**: Simulate a user deactivati... |
| Monitoring Requirements | A correlation ID generated at the API Gateway must... |
| Deployment Considerations | Any changes to the 'AccountDeactivated' event sche... |

