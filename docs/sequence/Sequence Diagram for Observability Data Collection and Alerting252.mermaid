sequenceDiagram
    actor "User Profile Service" as UserProfileService
    participant "OTEL Collector" as OTELCollector
    participant "Jaeger" as Jaeger
    participant "Loki" as Loki
    participant "Prometheus" as Prometheus
    participant "Alertmanager" as Alertmanager
    participant "PagerDuty" as PagerDuty

    activate UserProfileService
    UserProfileService->>UserProfileService: 1. 1. Handle incoming gRPC request; OTEL SDK creates root trace span.
    UserProfileService-->>UserProfileService: Generates telemetry data.
    UserProfileService->>OTELCollector: 2. 2. Export batched telemetry data (metrics, logs, traces).
    OTELCollector->>Jaeger: 3. 3a. Export processed trace data.
    OTELCollector->>Loki: 4. 3b. Export processed log data.
    Prometheus->>OTELCollector: 5. 4. Scrape metrics endpoint.
    OTELCollector-->>Prometheus: Prometheus exposition format text.
    activate Prometheus
    Prometheus->>Prometheus: 6. 5. Evaluate alerting rules against collected metrics.
    Prometheus-->>Prometheus: Alert state (Pending/Firing).
    activate Alertmanager
    Prometheus->>Alertmanager: 7. 6. Fire alert for breached SLO.
    Alertmanager-->>Prometheus: 200 OK
    Alertmanager->>Alertmanager: 8. 7. Process alert: deduplicate, group, and match route.
    Alertmanager-->>Alertmanager: Route matched to PagerDuty receiver.
    Alertmanager->>PagerDuty: 9. 8. Send notification to create incident.
    PagerDuty-->>Alertmanager: 202 Accepted

    note over Prometheus: REQ-1-084 & REQ-1-051: The alerting rule in step 5 is a direct implementation of monitoring key s...
    note over OTELCollector: The OTEL Collector is deployed as a Kubernetes DaemonSet, ensuring one collector instance per nod...

    deactivate Alertmanager
    deactivate Prometheus
    deactivate UserProfileService
