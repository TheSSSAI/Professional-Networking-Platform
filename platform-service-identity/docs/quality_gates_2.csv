"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"Pull Request Quality Gate","Static Analysis & Unit Test","Pull request opened/updated","Linting passes; All unit tests pass; Code coverage >= 80% (REQ-1-064); SAST scan finds 0 critical/high vulnerabilities (REQ-1-078); SCA scan finds 0 critical/high vulnerabilities (REQ-1-078).","Block pull request merge.","Development Team","Fully Automated","GitHub Actions; Jest; Codecov; Snyk; CodeQL","On every commit to a PR.","PR author is responsible for fixing.","90","1.5","Prevents low-quality or vulnerable code from entering the main branch."
"Staging Deployment Quality Gate","E2E & Integration","Successful deployment to Staging environment","All critical-path E2E smoke tests pass; Post-deployment API health checks pass; Contract tests against downstream services pass.","Alert on-call team; Automatically roll back deployment if possible.","QA & SRE Team","Fully Automated","GitHub Actions; Cypress/Playwright; Postman","After every deployment to staging.","Create P1 incident ticket; Alert team in Slack.","95","4","Prevents broken builds from staying in the primary testing environment."
"Pre-Production Release Gate","Performance & Security","Manual trigger before a production release candidate is created","Performance load tests meet all NFRs (REQ-1-051); Manual exploratory testing complete; All high-priority bugs from the sprint are resolved or deferred with PO approval; Final penetration test report shows 0 critical vulnerabilities.","Block production release; Schedule emergency planning meeting.","QA Lead, Security Lead, Product Owner","Partially Automated","k6; OWASP ZAP; Jira","Per release cycle.","Go/no-go decision by release manager.","99","24","Final sign-off to ensure a high-quality, secure, and performant release."