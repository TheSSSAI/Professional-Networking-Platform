"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"ID-TASK-038","Bootstrap: Scaffold NestJS Project Structure","Use the NestJS CLI (`nest new`) to create the initial project. Set up the basic module structure (Auth, Users, etc.) and configure ESLint and Prettier for code quality.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-08","4.2","1","backend,setup,nestjs","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","","NestJS CLI,npm,Git","Low","Low","New NestJS project created; ESLint/Prettier configured; Project starts locally.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Run lint and start scripts.","Initial commit for the repository.","Establishes the basic codebase and data persistence layer."
"ID-TASK-039","Config: Configure TypeORM and Database Connection","Install TypeORM and the `pg` driver. Configure the database connection in `app.module.ts` using `TypeOrmModule.forRootAsync` and `@nestjs/config` to load credentials from environment variables.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-08","6.2","1","backend,database,config,typeorm","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","ID-TASK-038","NestJS,TypeORM,PostgreSQL","Low","Low","Application connects to local PostgreSQL; Credentials loaded from .env; Supports different environments.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","Local PostgreSQL instance","Verify successful DB connection on startup.","Requires environment variables for database credentials.","Required for any database interaction."
"ID-TASK-001","DB: Implement User and UserToken TypeORM Entities","Create the TypeORM entities for `User` and `UserToken` to manage user credentials, status, and tokens for email verification and password resets.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-08","6.2","2","backend,database,typeorm","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Core User Authentication","EPIC-001","Identity & Access Management Service","US-001","ID-TASK-039","TypeScript,TypeORM,PostgreSQL","Low","Low","TypeORM entities for User and UserToken created; Migration generated and runs successfully; Password hash not returned by default.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Migration script execution and schema inspection.","Database migration must be run before application deployment.","Foundational schema for all user authentication features."
"ID-TASK-002","API: Create Registration DTO with Validation","Implement the `RegisterUserDto` using `class-validator` to enforce password complexity, valid email format, and age confirmation.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-08","6","2","backend,api,validation","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Core User Authentication","EPIC-001","Identity & Access Management Service","US-001","","NestJS,TypeScript,class-validator","Low","Low","RegisterUserDto.ts created with validation decorators; Custom password validator implemented; Unit tests pass.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Unit tests for all validation rules.","","Ensures data integrity and security for new user registrations."
"ID-TASK-003","API: Implement Registration Endpoint in Controller","Implement the `POST /auth/register` endpoint in `AuthController` which will use the `RegisterUserDto` and call the `AuthService.register` method.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-08","3.2","1","backend,api,controller","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Core User Authentication","EPIC-001","Identity & Access Management Service","US-001","ID-TASK-002","NestJS,TypeScript","Low","Low","POST /register endpoint created; Uses RegisterUserDto for validation; Rejects invalid payloads with 400; Passes valid requests to service.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Integration tests for valid and invalid requests.","","Exposes the user registration functionality via the API."
"ID-TASK-004","Service: Implement Core Registration Logic","Implement the `register` method in `AuthService`. Includes checking for duplicate emails, hashing passwords, creating User and UserToken records within a transaction.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-08","8.3","3","backend,service,security,bcrypt","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Core User Authentication","EPIC-001","Identity & Access Management Service","US-001","ID-TASK-001,ID-TASK-003","NestJS,TypeScript,bcrypt,TypeORM","Medium","High","Password hashed with bcrypt; Throws ConflictException on duplicate email; Creates User and UserToken in a transaction; Returns success response.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","Security champion for review","None","Unit tests with mocked repositories and integration tests against a test DB.","","Core business logic for creating new user accounts securely."
"ID-TASK-005","Events: Emit `UserRegistered` Event","Integrate `@nestjs/event-emitter` to emit a `UserRegistered` event upon successful user creation, decoupling email sending logic.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-08","4","1","backend,events,architecture","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Core User Authentication","EPIC-001","Identity & Access Management Service","US-001","ID-TASK-004","NestJS,TypeScript,Event-Driven Architecture","Low","Medium","EventEmitterModule configured; `register` method emits event with userId and email on success; Event emitted only after transaction commits.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Unit test verifies eventEmitter.emit is called with correct payload.","Monitoring for event processing failures is critical.","Decouples registration from notification, improving resilience."
"ID-TASK-006","API: Implement Email Verification Endpoint and Logic","Create the `GET /auth/verify` endpoint and service method to validate the verification token, update user status to 'active', and invalidate the token.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-08","7.2","3","backend,api,security","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Core User Authentication","EPIC-001","Identity & Access Management Service","US-003","ID-TASK-005","NestJS,TypeScript,TypeORM","Medium","High","Endpoint accepts token; Service validates token (not expired, not used); User status updated and token invalidated in one transaction; Invalid tokens throw BadRequestException.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Integration tests for all token states (valid, invalid, expired, used).","","Completes the user registration and activation flow."
"ID-TASK-041","Container: Create Multi-Stage Dockerfile","Develop a `Dockerfile` that uses multi-stage builds to create a minimal, production-ready image for the service.","Task","Sprint Backlog","High","devops.lead@company.com","tech.lead@company.com","2024-11-08","6.3","2","devops,docker,container","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","ID-TASK-038","Docker","Low","Low","Dockerfile created; `docker build` succeeds; Final image is optimized for size; Container runs locally.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Run the built container locally.","Base image for all deployments.","Enables containerization for consistent local development and production deployments."
"ID-TASK-042","LocalDev: Develop docker-compose.yml","Create a `docker-compose.yml` file to orchestrate the local development environment, including the service, PostgreSQL database, and Redis.","Task","Sprint Backlog","High","devops.lead@company.com","tech.lead@company.com","2024-11-08","6.2","2","devops,docker,local-dev","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","ID-TASK-041","Docker Compose,YAML","Low","Low","`docker-compose.yml` created; `docker-compose up` starts all services; Service can connect to DB and Redis.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","Backend team","None","Running `docker-compose up` and testing connectivity.","","Standardizes the local development environment, improving developer onboarding and consistency."
"ID-TASK-043","CI/CD: Implement GitHub Actions CI Workflow","Create a GitHub Actions workflow for pull requests that runs linting, tests, and code coverage checks, including SAST and SCA scanning.","Task","Sprint Backlog","Critical","devops.lead@company.com","tech.lead@company.com","2024-11-08","12","5","devops,ci-cd,github-actions","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","ID-TASK-042","GitHub Actions,YAML,Docker","Medium","Medium","Workflow runs on PRs; Fails on lint/test/coverage failures; Includes SAST/SCA scans.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Triggering the workflow with a test PR.","","Automates the quality assurance process, ensuring code quality and security."
"ID-TASK-045","Tracing: Integrate OpenTelemetry SDK","Integrate OpenTelemetry SDK for distributed tracing, with automatic instrumentation for NestJS, HTTP, and TypeORM.","Task","Sprint Backlog","High","backend.dev1@company.com","tech.lead@company.com","2024-11-08","12","5","backend,observability,opentelemetry","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","ID-TASK-042","NestJS,OpenTelemetry,Docker","Medium","Low","OTel SDK configured in main.ts; Traces exported to local Jaeger; A simple API request generates a full trace.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Viewing traces in a local Jaeger UI.","Requires OTel collector in production environment.","Enables distributed tracing for debugging and performance analysis in a microservices architecture."
"ID-TASK-046","Metrics: Add Prometheus Metrics Endpoint","Integrate a Prometheus client to expose a `/metrics` endpoint with default and custom application metrics (e.g., user registrations).","Task","Sprint Backlog","High","backend.dev2@company.com","tech.lead@company.com","2024-11-08","8.3","3","backend,observability,prometheus","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","","NestJS,Prometheus","Low","Low","/metrics endpoint available; Exposes default and custom metrics; Custom counters incremented correctly.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Scraping the /metrics endpoint and viewing output.","Requires Prometheus server to be configured to scrape this endpoint.","Enables metric-based monitoring, alerting, and dashboarding."
"ID-TASK-047","Logging: Configure Structured Logging (Pino)","Replace the default NestJS logger with a structured JSON logger like `pino` to enable effective log aggregation and search.","Task","Sprint Backlog","High","backend.dev1@company.com","tech.lead@company.com","2024-11-08","6.3","2","backend,observability,logging","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","","NestJS,Pino","Low","Low","Logger configured; Logs are output in JSON format; Logs include a traceId for correlation.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Observing application logs during startup and requests.","Log format must match what the log aggregation system (e.g., Loki) expects.","Enables effective log aggregation, search, and analysis."
"ID-TASK-048","Ops: Implement Kubernetes Health Probes","Create `/health/live` and `/health/ready` endpoints to ensure reliable operation in Kubernetes.","Task","Sprint Backlog","High","backend.dev2@company.com","tech.lead@company.com","2024-11-08","4.3","1","backend,kubernetes,ops","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","ID-TASK-039","NestJS,TypeORM","Low","Low","/health/live returns 200 OK; /health/ready returns 200 OK if DB is connected, 503 otherwise.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","None","None","Integration tests for health endpoints with and without a DB connection.","Kubernetes deployment manifests must be updated to use these probes.","Essential for automated health monitoring and self-healing in a Kubernetes environment."
"ID-TASK-007","QA: Write E2E Test for Full Registration Flow","Create an integration test covering the entire registration flow: register, verify DB state, call verify endpoint, verify final DB state.","Task","Sprint Backlog","High","qa.engineer@company.com","tech.lead@company.com","2024-11-08","8.3","3","qa,e2e,testing","Sprint 1","Foundational Excellence: Bootstrap project, DB, Docker, CI, observability, and complete user registration/verification flow.","Core User Authentication","EPIC-001","Identity & Access Management Service","US-001","ID-TASK-006","NestJS,Jest,Supertest,Testcontainers","Medium","Low","E2E test file created; Test registers user, verifies 'inactive'; Test calls verification, asserts 'active'; Test asserts token reuse fails.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-10-28","2024-11-08","100%","Backend team","None","CI pipeline runs the E2E test.","","Provides automated regression testing for the critical user registration path."
"ID-TASK-008","Config: Setup @nestjs/jwt and @nestjs/passport Modules","Install dependencies and configure the `JwtModule` and `PassportModule`, loading secrets and expiration times from environment variables.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-22","5.2","2","backend,config,jwt,passport","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-006","","NestJS,TypeScript,JWT","Low","Low","JwtModule.registerAsync used; Secrets and TTLs sourced from .env; Modules imported into AuthModule.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Application starts without configuration errors.","Requires JWT secret environment variables.","Foundational for all JWT-based authentication and authorization."
"ID-TASK-009","Auth: Implement Passport.js Local Strategy","Create `local.strategy.ts` to contain the logic for finding a user by email and validating their password with bcrypt.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-22","6.2","2","backend,auth,passport,security","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-006","ID-TASK-008","NestJS,Passport.js,bcrypt,TypeScript","Medium","High","LocalStrategy class created; `validate` method finds user and uses bcrypt.compare; Returns user on success, throws UnauthorizedException on failure.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","Security champion","None","Unit tests for the strategy, mocking UsersService.","","Implements the core password validation logic for the login process."
"ID-TASK-010","Auth: Implement Passport.js JWT Strategy","Create `jwt.strategy.ts` to validate the signature and expiration of incoming JWTs for protecting authenticated endpoints.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-22","6","2","backend,auth,passport,jwt","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-006","ID-TASK-008","NestJS,Passport.js,JWT,TypeScript","Low","Medium","JwtStrategy class created; Configured to extract token from header; `validate` method returns payload.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Unit tests for the strategy.","","Required for creating guards to protect any authenticated API endpoints."
"ID-TASK-011","API: Implement Login Endpoint and Service Logic","Create the `POST /auth/login` endpoint, guarded by `LocalAuthGuard`, with service logic to check user status and generate access/refresh tokens.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-22","9.3","3","backend,api,security,jwt","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-006","ID-TASK-009,ID-TASK-010","NestJS,TypeScript,JWT","Medium","High","POST /auth/login endpoint created; Guarded by LocalAuthGuard; Service checks user status; Returns accessToken on success.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration tests for valid, invalid, and inactive user login attempts.","","Enables users to log in and receive session tokens."
"ID-TASK-012","Auth: Implement Refresh Token Strategy and Endpoint","Create a strategy and endpoint (`POST /auth/refresh`) to validate refresh tokens and issue new access tokens.","Task","Sprint Backlog","High","backend.dev1@company.com","tech.lead@company.com","2024-11-22","8.3","3","backend,auth,jwt","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-006","ID-TASK-011","NestJS,Passport.js,JWT,TypeScript","Medium","Medium","RefreshJwtStrategy created; POST /auth/refresh endpoint created; Returns new accessToken on success; Rejects invalid tokens.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration test of the login-refresh-validate flow.","","Completes the industry-standard access/refresh token pattern for persistent sessions."
"ID-TASK-013","Security: Set Refresh Token in Secure HttpOnly Cookie","Modify login/refresh endpoints to set the refresh token in an HttpOnly cookie instead of the response body for enhanced security.","Task","Sprint Backlog","High","backend.dev2@company.com","tech.lead@company.com","2024-11-22","6.2","2","backend,security,cookie","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-006","ID-TASK-012","NestJS,Express.js","Medium","Low","Login response has no refreshToken in body; Set-Cookie header is present with HttpOnly flag; Refresh endpoint reads token from cookie; Logout clears cookie.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration tests to inspect headers and test the refresh flow using cookies.","Requires CORS configuration to allow credentials.","Protects refresh tokens from XSS attacks, significantly improving session security."
"ID-TASK-015","Infra: Configure and Integrate Redis Module","Install and configure `@nestjs/cache-manager` with `cache-manager-redis-store` to connect the application to Redis.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-22","4.3","1","backend,infra,redis","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-007","","NestJS,Redis","Low","Low","Application connects to local Redis; CacheManager can be injected; Unit tests pass for set/get.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","Local Redis instance","Application startup logs and passing unit tests.","Requires Redis connection URL as an environment variable.","Required for implementing the JWT blocklist for secure logout."
"ID-TASK-016","API: Implement Logout Endpoint and Blocklist Logic","Create the `POST /auth/logout` endpoint. Service logic will add the access token's JTI to the Redis blocklist and clear the refresh token cookie.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-11-22","7.2","3","backend,api,security,redis","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-007","ID-TASK-015","NestJS,Redis,JWT","Medium","Medium","Protected /auth/logout endpoint created; JTI added to Redis with correct TTL; Refresh token cookie is cleared.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Integration test that calls logout and checks Redis for the JTI.","","Implements the server-side logic for secure session termination."
"ID-TASK-017","Auth: Update JWT Strategy to Check Blocklist","Modify `JwtStrategy` to check Redis for the token's `jti`. If found in the blocklist, the strategy must throw an `UnauthorizedException`.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-11-22","8.5","3","backend,auth,security,redis","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-007","ID-TASK-016","NestJS,Redis,Passport.js,TypeScript","High","High","JwtStrategy injected with RedisService; `validate` method checks for JTI in Redis; Throws exception if JTI is found.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","None","Unit tests for the strategy's blocklist logic.","This change affects every authenticated endpoint.","Enforces the invalidation of logged-out tokens, preventing token reuse."
"ID-TASK-044","CI/CD: Implement GitHub Actions CD Workflow for EKS","Create a GitHub Actions workflow to build, push, scan, and deploy the Docker image to the AWS EKS staging cluster on merge to main.","Task","Sprint Backlog","High","devops.lead@company.com","tech.lead@company.com","2024-11-22","16.7","8","devops,cd,github-actions,eks","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Foundational Setup & Operations","EPIC-004","Identity & Access Management Service","N/A","ID-TASK-043","GitHub Actions,AWS ECR/EKS,Kubernetes,kubectl","High","Medium","Workflow builds and pushes to ECR; Fails on critical vulnerabilities; Deploys to staging EKS via rolling update.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","None","AWS EKS cluster, ECR repository","Merging a PR to main successfully triggers a deployment.","Requires secure storage of AWS credentials in GitHub.","Automates the deployment process, enabling faster and more reliable delivery of features."
"ID-TASK-014","QA: Write E2E Test for Full Login/Refresh/Protected Endpoint Flow","Create an integration test to simulate a full user session: login, use token, refresh token, use new token.","Task","Sprint Backlog","High","qa.engineer@company.com","tech.lead@company.com","2024-11-22","12","5","qa,e2e,testing,auth","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-006","ID-TASK-013","NestJS,Jest,Supertest","High","Low","Test logs in; Calls protected endpoint with access token; Calls refresh endpoint; Calls protected endpoint with new token.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","Backend team","None","CI pipeline runs the E2E test.","","Provides automated regression testing for the entire login and session management flow."
"ID-TASK-018","QA: Write E2E Test for Logout and Token Invalidation","Create an integration test to log in, log out, then attempt to use the old token against a protected endpoint, asserting a 401 response.","Task","Sprint Backlog","High","qa.engineer@company.com","tech.lead@company.com","2024-11-22","8.7","3","qa,e2e,testing,security","Sprint 2","Secure Login & Session Management: Implement the complete login flow (US-006) and secure logout (US-007).","Core User Authentication","EPIC-001","Identity & Access Management Service","US-007","ID-TASK-017","NestJS,Jest,Supertest","Medium","Low","Test logs in; Calls /auth/logout; Calls protected endpoint with original token; Asserts 401 Unauthorized response.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-11","2024-11-22","100%","Backend team","None","CI pipeline runs the E2E test.","","Provides automated validation for the critical secure logout feature."
"ID-TASK-019","API: Implement Password Reset Request Endpoint and DTO","Create `POST /auth/forgot-password` endpoint and a DTO to validate the email field. Endpoint must be rate-limited.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-12-06","4.2","1","backend,api,recovery","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-010","","NestJS,TypeScript,class-validator","Low","Medium","Endpoint created; DTO validates email; Endpoint is rate-limited.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration test for endpoint existence and DTO validation.","","Initiates the self-service password recovery flow."
"ID-TASK-020","Service: Implement Password Reset Request Logic","Logic to find user, invalidate old tokens, generate a new secure token, store it, and emit a `PasswordResetRequested` event. Must not reveal if email exists.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-12-06","8.3","3","backend,service,security,recovery","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-010","ID-TASK-019","NestJS,TypeScript,TypeORM,crypto","High","High","Finds user case-insensitively; Invalidates old tokens and creates new; Emits event; Returns generic success for all cases to prevent enumeration.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration tests to verify token generation and silent failure.","","Core logic for securely handling password reset requests."
"ID-TASK-021","API: Implement Password Reset Submission Endpoint and DTO","Create `POST /auth/reset-password` endpoint and a DTO to validate the token and new password, ensuring it meets complexity rules.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-12-06","5.2","2","backend,api,recovery","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-012","","NestJS,TypeScript,class-validator","Low","Low","Endpoint created; DTO validates token, strong password, and password confirmation match.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Unit tests for the DTO.","","Provides the API for users to submit their new password."
"ID-TASK-022","Service: Implement Password Reset Submission Logic","Logic to validate the reset token, find the user, hash the new password, update the user record, and invalidate the token.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-12-06","9.3","3","backend,service,security,recovery","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-012","ID-TASK-021,ID-TASK-020","NestJS,TypeScript,TypeORM,bcrypt","High","High","Throws exception for invalid tokens; Updates passwordHash on success; Invalidates token in same transaction.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration tests for all token states (valid, invalid, expired, used).","","Core logic that securely completes the password reset process."
"ID-TASK-023","Security: Invalidate All Active Sessions on Password Reset","Modify the password reset logic to add all of the user's existing JWTs to the Redis blocklist to prevent session hijacking.","Task","Sprint Backlog","High","backend.dev1@company.com","tech.lead@company.com","2024-12-06","6.3","2","backend,security,jwt,redis","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-012","ID-TASK-022,ID-TASK-017","NestJS,Redis,JWT","Medium","Medium","After reset, a `tokens_invalid_before` timestamp is set in Redis; JwtStrategy checks this timestamp; Old tokens are rejected, new tokens are accepted.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration test: login, reset password, use old token (fail), login with new password, use new token (succeed).","","Critical security feature to prevent account takeover if a session was previously compromised."
"ID-TASK-024","API: Create Admin-Triggered Password Reset Endpoint","Create an admin-only endpoint to trigger the password reset flow for a specific user.","Task","Sprint Backlog","Medium","backend.dev2@company.com","tech.lead@company.com","2024-12-06","3.2","1","backend,api,admin","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-010","ID-TASK-020","NestJS,TypeScript","Low","Low","Endpoint protected by AdminGuard; Reuses existing service logic; Returns 204 No Content.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration test with an admin user token.","","Provides a support function for administrators to assist locked-out users."
"ID-TASK-025","DB: Update User Entity for MFA Fields","Add fields to the `User` entity for `mfaSecret` (encrypted), `isMfaEnabled`, and create a table for hashed `mfa_recovery_codes`.","Task","Sprint Backlog","High","backend.dev1@company.com","tech.lead@company.com","2024-12-06","6.2","2","backend,database,security,mfa","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-018","","TypeORM,PostgreSQL,crypto","Medium","Medium","User entity updated; MfaRecoveryCode entity created; Migration runs; `mfaSecret` is encrypted at rest.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Migration execution and schema inspection.","","Provides the necessary database schema to support MFA functionality."
"ID-TASK-026","API: Implement MFA Setup Initiation Endpoint","Create `POST /auth/mfa/setup` to generate a TOTP secret and return it with a QR code data URL for the authenticated user.","Task","Sprint Backlog","High","backend.dev2@company.com","tech.lead@company.com","2024-12-06","7.3","3","backend,api,mfa,security","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-018","ID-TASK-025","NestJS,TypeScript,otplib,qrcode","Medium","High","Endpoint is protected; Generates unique TOTP secret; Returns secret and QR code data URL.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration test validating the response structure.","","First step of the user-facing MFA setup flow."
"ID-TASK-027","API: Implement MFA Setup Verification & Activation Endpoint","Create `POST /auth/mfa/verify` to validate a TOTP code against the temporary secret, activate MFA, and generate recovery codes.","Task","Sprint Backlog","High","backend.dev1@company.com","tech.lead@company.com","2024-12-06","12","5","backend,api,mfa,security","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-018","ID-TASK-026","NestJS,TypeScript,otplib,crypto","High","High","Validates TOTP code; Sets isMfaEnabled to true; Generates, hashes, and stores recovery codes; Returns plaintext recovery codes.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration test simulating the full setup and verify flow.","","Finalizes MFA activation and provides the user with a recovery mechanism."
"ID-TASK-028","Auth: Modify Login Flow for Two-Factor Authentication","Update the login service to handle MFA-enabled users by requiring a second step for TOTP verification.","Task","Sprint Backlog","High","backend.dev2@company.com","tech.lead@company.com","2024-12-06","12","5","backend,auth,mfa,security","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-019","ID-TASK-027","NestJS,TypeScript,JWT","High","High","Login for MFA user returns temporary MFA token; New endpoint /auth/mfa/login validates TOTP and returns session tokens; Non-MFA login is unaffected.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration tests for both MFA and non-MFA login flows.","Modifies the critical login path.","Integrates MFA into the core authentication flow, enforcing the second factor."
"ID-TASK-029","API: Implement MFA Disablement Endpoint","Create a `POST /auth/mfa/disable` endpoint that requires current password and a TOTP code to disable MFA.","Task","Sprint Backlog","Medium","backend.dev1@company.com","tech.lead@company.com","2024-12-06","7.3","3","backend,api,mfa","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-018","ID-TASK-028","NestJS,TypeScript,bcrypt,otplib","Medium","Medium","Endpoint is protected; Validates password and TOTP; Sets isMfaEnabled to false and clears secret/recovery codes.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","None","None","Integration test: enable MFA, then disable it.","","Completes the MFA management lifecycle by allowing users to disable it."
"ID-TASK-QA-01","QA: Write E2E Test for Password Reset Flow","Create an integration test to simulate the full password reset flow: request reset, (mock) receive email, use token to set new password, log in with new password.","Task","Sprint Backlog","High","qa.engineer@company.com","tech.lead@company.com","2024-12-06","10","3","qa,e2e,testing,recovery","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-012","ID-TASK-023","NestJS,Jest,Supertest","Medium","Low","Test covers request, reset, and login with new password; Test asserts session invalidation for old tokens.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","Backend team","None","CI pipeline runs the E2E test.","","Provides automated regression testing for the critical account recovery path."
"ID-TASK-030","QA: Write E2E Test for MFA Login Flow","Create an integration test for the entire MFA login flow: password submission, MFA challenge, TOTP submission, and final token validation.","Task","Sprint Backlog","High","qa.engineer@company.com","tech.lead@company.com","2024-12-06","10.3","5","qa,e2e,testing,mfa","Sprint 3","Advanced Security & Recovery: Implement password reset flow (US-010, US-012) and the full MFA lifecycle (US-018, US-019).","Account Recovery & Security","EPIC-002","Identity & Access Management Service","US-019","ID-TASK-029","NestJS,Jest,Supertest,otplib","Medium","Low","Test completes two-step login; Asserts incorrect TOTP fails; Asserts final token is valid.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-11-25","2024-12-06","100%","Backend team","None","CI pipeline runs the E2E test.","","Provides automated regression testing for the MFA-enabled login path."
"ID-TASK-031","DB: Update User Entity for Deletion Status","Add `deletionRequestedAt` field to User entity and 'pending_deletion' to the status enum. Create and run migration.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-12-20","3","1","backend,database,gdpr","Sprint 4","Account Lifecycle: Implement the complete account deletion and reactivation flows (US-015, US-016, US-014).","Account Lifecycle Management","EPIC-003","Identity & Access Management Service","US-015","","TypeORM,PostgreSQL","Low","Low","User entity updated; Migration script generated and runs successfully.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Migration execution and schema inspection.","","Provides the necessary schema changes to support the account deletion grace period."
"ID-TASK-032","API: Implement Deletion Request Endpoint","Create `POST /users/me/delete` endpoint. Requires password re-authentication. Sets user status to 'pending_deletion' and invalidates all active sessions.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-12-20","8.3","3","backend,api,security,gdpr","Sprint 4","Account Lifecycle: Implement the complete account deletion and reactivation flows (US-015, US-016, US-014).","Account Lifecycle Management","EPIC-003","Identity & Access Management Service","US-015","ID-TASK-031","NestJS,TypeScript,bcrypt","Medium","High","Endpoint is protected; Validates password; Updates user status; Invalidates sessions; Emits event for confirmation email.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Integration test.","","Allows users to initiate the secure, compliant account deletion process."
"ID-TASK-033","API: Implement Deletion Cancellation Endpoint","Create `POST /users/me/delete/cancel` to revert user status from 'pending_deletion' to 'active'.","Task","Sprint Backlog","High","backend.dev1@company.com","tech.lead@company.com","2024-12-20","4.2","1","backend,api,gdpr","Sprint 4","Account Lifecycle: Implement the complete account deletion and reactivation flows (US-015, US-016, US-014).","Account Lifecycle Management","EPIC-003","Identity & Access Management Service","US-016","ID-TASK-032","NestJS,TypeScript","Low","Low","Endpoint is protected; Reverts user status to 'active'; Returns error if not in 'pending_deletion' state.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Integration test.","","Allows users to cancel their deletion request, improving user retention."
"ID-TASK-034","Auth: Modify Login Service for Account Reactivation/Cancellation","Update `AuthService.login` to change user status from 'deactivated' or 'pending_deletion' to 'active' on successful login.","Task","Sprint Backlog","High","backend.dev2@company.com","tech.lead@company.com","2024-12-20","6.2","2","backend,auth,lifecycle","Sprint 4","Account Lifecycle: Implement the complete account deletion and reactivation flows (US-015, US-016, US-014).","Account Lifecycle Management","EPIC-003","Identity & Access Management Service","US-014","ID-TASK-032","NestJS,TypeScript","Medium","Medium","Login service checks status; Updates 'deactivated' or 'pending_deletion' users to 'active'; Issues tokens.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-09","2024-12-20","100%","None","None","Integration tests for logging in as deactivated and pending-deletion users.","","Provides a frictionless self-service way for users to reactivate their account or cancel a deletion."
"ID-TASK-035","Jobs: Implement Scheduled Job for Final Data Purge","Create a scheduled job to query for users past the 14-day grace period and trigger the final data purge process.","Task","Sprint Backlog","Critical","backend.dev1@company.com","tech.lead@company.com","2024-12-20","12","5","backend,jobs,cron,gdpr","Sprint 4","Account Lifecycle: Implement the complete account deletion and reactivation flows (US-015, US-016, US-014).","Account Lifecycle Management","EPIC-003","Identity & Access Management Service","US-015","ID-TASK-032","NestJS,TypeScript,cron","Medium","High","Cron job is scheduled; Correctly identifies users for deletion; Emits `PurgeUserData` event to an external bus; Deletes the core user record.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-09","2024-12-20","100%","None","SQS/SNS event bus","Integration test with time-mocking to trigger the job and verify event emission.","Requires careful monitoring and alerting.","Automates the final, destructive step of the account deletion process, ensuring GDPR compliance."
"ID-TASK-036","Logging: Implement Deletion Audit Logging","Create a `deletion_audit_log` table and ensure the purge job writes an immutable record upon successful deletion.","Task","Sprint Backlog","Critical","backend.dev2@company.com","tech.lead@company.com","2024-12-20","7.2","3","backend,database,logging,gdpr","Sprint 4","Account Lifecycle: Implement the complete account deletion and reactivation flows (US-015, US-016, US-014).","Account Lifecycle Management","EPIC-003","Identity & Access Management Service","US-015","ID-TASK-035","TypeORM,PostgreSQL","Medium","Medium","New entity and migration created; Purge job writes audit record atomically with user deletion; DB user has INSERT-only permissions.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-09","2024-12-20","100%","DevOps/DBA","None","Integration test verifies the audit log record is created.","Database permissions for the application user must be updated.","Provides a critical audit trail for compliance and disaster recovery purposes."
"ID-TASK-037","QA: Write E2E Test for Deletion Lifecycle","Create an integration test covering the full deletion lifecycle: request, cancel, re-request, and final purge verification.","Task","Sprint Backlog","High","qa.engineer@company.com","tech.lead@company.com","2024-12-20","12","5","qa,e2e,testing,gdpr","Sprint 4","Account Lifecycle: Implement the complete account deletion and reactivation flows (US-015, US-016, US-014).","Account Lifecycle Management","EPIC-003","Identity & Access Management Service","US-015","ID-TASK-036","NestJS,Jest,Supertest","High","Low","E2E test covers request-cancel-request-purge flow; Uses time-mocking; Asserts data removal and audit log creation.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-10-28T09:00:00Z","2024-10-28T09:00:00Z","2024-12-09","2024-12-20","100%","Backend team","None","CI pipeline runs the E2E test.","","Provides automated regression testing for the highly complex and critical account deletion process."