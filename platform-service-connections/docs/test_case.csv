"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-ID-REG-001","User Authentication","Functional","End-to-End","Critical","true","High","Verify the complete user registration, email verification, and initial login flow as per REQ-1-001.","High - Failure blocks all new user acquisition.","High","Identity service, Notifications service, PostgreSQL, and AWS SES integration are running. Test email inbox is available.","1. Call gRPC registration endpoint with valid, unique email and complex password. 2. Verify user is created with 'inactive' status. 3. Intercept verification email. 4. Extract verification link/token. 5. Call gRPC verification endpoint with the token. 6. Verify user status is updated to 'active'. 7. Call gRPC login endpoint with original credentials. 8. Verify JWTs are returned.","User account is successfully created, activated via email, and the user can log in.","Unique test email address; Password meeting complexity rules.","gRPC Client (e.g., grpcurl), MailHog/Mailtrap, Jest, Testcontainers","8","16","4","Notifications Service (for email sending)","Integration environment with all dependent services and email capture.","100% test pass rate; End-to-end flow completes < 1 minute.","Critical - Onboarding is broken.","Every commit to main branch","Low","Delete created user account and associated tokens.","Verification token must be single-use and expire.","Registration API response < 200ms.","N/A (API Test)"
"TEST-ID-SEC-001","Session Management","Security","Integration","Critical","true","High","Verify that a JWT invalidated by logout cannot be used to access a protected resource, as per REQ-1-005.","Critical - Session hijacking vulnerability if failed.","Medium","Identity service with Redis integration is running. A protected gRPC endpoint exists.","1. Login as a test user to obtain a valid JWT. 2. Call the protected endpoint with the JWT and verify success. 3. Call the logout endpoint with the same JWT. 4. Verify the token's 'jti' is added to the Redis blocklist. 5. Call the protected endpoint again with the same (now logged-out) JWT. 6. Verify the request is rejected with an 'Unauthorized' error.","The API must reject the request made with the invalidated token.","An active, verified test user account.","gRPC Client, Jest, Testcontainers (for Redis)","6","12","2","Redis instance","Integration environment with Redis.","Request must be rejected with a 401/Unauthorized status.","Critical - Allows unauthorized access with old tokens.","Every commit to main branch","Medium","Clear user's tokens from Redis blocklist.","This is a primary security test.","Blocklist check should add <10ms to request latency.","N/A (API Test)"
"TEST-ID-SAGA-001","Account Lifecycle Management","Functional","Integration","Critical","true","High","Verify the SAGA initiation and compensation logic for permanent account deletion, as per REQ-1-007 and RISK-001.","Critical - GDPR compliance failure and data integrity issues if failed.","High","User account in 'pending_deletion' state for >14 days. Mocked downstream services (Profile, Posts, etc.) that can simulate success or failure.","1. Manually trigger the scheduled purge job for a test user. 2. Verify the Identity service publishes an 'AccountPurgeInitiated' event. 3. Simulate successful consumption by all downstream services. 4. Verify the Identity service (as the final SAGA step) deletes the core user record and writes to the deletion audit log. 5. Repeat the test, but simulate a failure in one downstream service. 6. Verify a compensating transaction/alert is triggered.","User data is successfully purged in the happy path; failures are correctly handled and logged in the error path.","A user account with `deletion_requested_at` timestamp set to >14 days in the past.","Jest, Testcontainers, Mock Service Worker / Nock (for mocking downstream gRPC calls)","12","24","8","Event Bus (SNS/SQS), Mocked downstream services","Integration environment with time manipulation capabilities and service mocking.","Data is verifiably deleted; SAGA completes successfully or triggers compensation.","Critical - Compliance breach and data inconsistency.","Every release","High","Restore database from snapshot before test.","Ensures 'right to be forgotten' is correctly implemented.","Asynchronous process, no direct impact on user-facing APIs.","N/A (Backend Test)"
"TEST-ID-MFA-001","User Authentication","Functional","Integration","High","true","High","Verify the complete MFA enablement and login flow as per US-018 and US-019.","High - Failure prevents users from securing their accounts or logging in.","Medium","An active, verified user account exists.","1. Call gRPC endpoint to initiate MFA setup, receive TOTP secret. 2. Use a TOTP library to generate a code from the secret. 3. Call gRPC endpoint to verify and enable MFA with the generated code. 4. Verify user's MFA status is 'enabled'. 5. Attempt to login with password; verify response indicates MFA is required. 6. Complete the second step of login with a new valid TOTP code. 7. Verify JWTs are issued.","User can successfully enable MFA and then log in using their password and a valid TOTP code.","An active, verified test user account.","gRPC Client, Jest, TOTP library (e.g., 'speakeasy')","6","12","3","TOTP generation library","Integration environment.","MFA is enabled and subsequent login is successful.","High - Users cannot use a key security feature.","Every release","Medium","Disable MFA for the test user.","Verifies a critical security enhancement.","MFA validation should add <50ms to login latency.","N/A (API Test)"