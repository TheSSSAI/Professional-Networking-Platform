name: Connections Service CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: connections_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Apply database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/connections_test?schema=public"

      - name: Run linter
        run: npm run lint

      # Placeholder for Software Composition Analysis (SCA) scan
      # - name: Run SCA Scan (e.g., Snyk, Dependabot)
      #   run: echo "SCA scan would run here..."

      # Placeholder for Static Application Security Testing (SAST) scan
      # - name: Run SAST Scan (e.g., SonarQube, CodeQL)
      #   run: echo "SAST scan would run here..."

      - name: Run unit tests
        run: npm run test

      - name: Run E2E (integration) tests
        run: npm run test:e2e
        env:
          DATABASE_URL: "postgresql://testuser:testpassword@localhost:5432/connections_test?schema=public"
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          
      - name: Build project
        run: npm run build

      # Placeholder for building and pushing Docker image
      # This would typically be in a separate job that runs after tests pass
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: your-docker-repo/platform-service-connections:latest

      # Placeholder for scanning the built container image
      # - name: Scan container image
      #   run: echo "Container scan (e.g., Trivy, Snyk Container) would run here..."