name: Admin UI - CI Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  # Replace with your AWS region and ECR repository name
  AWS_REGION: us-east-1
  ECR_REPOSITORY: platform-admin-ui

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate GraphQL Types
        run: |
          echo "NEXT_PUBLIC_GRAPHQL_API_URL=${{ secrets.GRAPHQL_API_URL_STAGING }}" > .env.local
          npm run codegen
        env:
          # In a real scenario, the schema might be fetched from a staging environment
          # or a static schema file could be checked into the repository.
          # Secrets.GRAPHQL_API_URL_STAGING would need to be set in GitHub repo settings.
          CI: true

      - name: Run Linter
        run: npm run lint

      - name: Run Prettier Check
        run: npm run prettier

      - name: Run Unit and Integration Tests
        run: npm run test:ci

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript'

      - name: Perform CodeQL Analysis (SAST)
        uses: github/codeql-action/analyze@v3

      # Add SCA scanner here, e.g., dependency-check or Snyk
      # This is a placeholder for a more robust SCA tool
      - name: Run Dependency Vulnerability Scan (SCA)
        run: |
          echo "SCA scan placeholder. Integrate a tool like Snyk, Trivy FS, or OWASP Dependency-Check."

  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: security-scan
    # Only run this job on pushes to the main branch, not on pull requests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image to ECR
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan pushed Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'