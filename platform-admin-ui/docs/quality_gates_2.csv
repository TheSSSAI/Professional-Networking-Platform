"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"CI Build Quality Gate","Static Analysis & Unit Tests","On every push to a feature branch","Linter passes (ESLint); Unit test coverage > 80%; All unit tests pass.","Block pull request merge; Fail the build.","Development Team","Fully Automated","GitHub Actions, Jest, ESLint","Every commit","Developer is notified automatically via GitHub.","95","0.5","Prevents basic code quality issues and regressions from entering the main branch."
"Pre-Merge Quality Gate","Security & Integration","On pull request to main branch","CI Gate passes; SAST and SCA scans find zero critical/high vulnerabilities; All integration tests pass.","Block merge; Require peer review and fix.","Development Team & Security Champion","Fully Automated","GitHub Actions, Snyk, Jest/Supertest","Every pull request","Tech Lead and Security Champion are notified on failure.","90","4","Prevents security vulnerabilities and integration defects from being deployed."
"Staging Deployment Quality Gate","End-to-End & Performance","After successful merge to main and deployment to Staging","Full E2E test suite passes; Smoke test for critical paths passes; Automated performance benchmark shows no regression > 5%.","Block promotion to production; Trigger PagerDuty alert to on-call engineer.","QA Team & DevOps","Fully Automated","GitHub Actions, Cypress, k6","Every deployment to Staging","Alert goes to on-call SRE and QA Lead.","85","8","Prevents user-facing bugs, performance regressions, and outages in production."