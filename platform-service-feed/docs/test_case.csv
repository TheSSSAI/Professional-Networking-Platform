"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-AUTH-001","User Authentication","Security","E2E","Critical","true","High","Verify that a user with MFA enabled can successfully complete the two-stage login process and that a non-MFA user is not prompted for a second factor.","Critical - Failure blocks access for security-conscious users and could indicate a severe flaw in the authentication flow.","High","An active user account with MFA enabled and a valid TOTP secret exists. A separate active user account without MFA exists. Auth service, DB, and Redis are running.","1. Send login request for MFA user with correct password. 2. Verify response contains a temporary MFA token. 3. Generate a valid TOTP code. 4. Send MFA verification request with temp token and TOTP code. 5. Verify response contains final session tokens. 6. Send login request for non-MFA user. 7. Verify response contains final session tokens directly.","MFA user successfully logs in after two steps. Non-MFA user successfully logs in after one step. Both receive valid access and refresh tokens.","User account with MFA enabled (including TOTP secret), User account without MFA enabled.","Jest, Supertest, a TOTP library (e.g., speakeasy).","8","16","4","MFA Service, Authentication Service, User Database, JWT module configuration.","Integration environment with a live database and Redis instance.","100% test pass rate for both MFA and non-MFA paths; <500ms total login time for P95.","Critical - Breaks login for a subset of users and undermines security features.","Every commit to the authentication module.","High - Requires programmatic MFA setup for test users.","Delete test users; clear any session data from Redis.","Temporary MFA token must be short-lived and single-purpose. Final tokens must not be issued without TOTP verification.","Each stage of the login process should complete within 250ms.","N/A (API-only test)."
"TEST-AUTH-002","User Authentication","Security","Integration","Critical","true","High","Verify that after a user logs out, their access token is successfully added to the Redis blocklist and cannot be used to access a protected endpoint.","Critical - Failure allows session hijacking, as a stolen token would remain valid even after the user logs out.","Medium","An active user account exists. Auth service, DB, and Redis are running.","1. Log in the user to obtain a valid access token. 2. Call the logout endpoint with the access token. 3. Verify the token's JTI is present in the Redis blocklist. 4. Attempt to access a protected endpoint (e.g., /profile/me) using the same access token.","The logout call succeeds. The request to the protected endpoint is rejected with a 401 Unauthorized status.","A valid user account.","Jest, Supertest, Redis client.","4","8","2","Authentication Service, Redis ElastiCache, JWT Strategy.","Integration environment with live DB and Redis.","100% test pass rate; old token is rejected; Redis key exists.","Critical - The logout feature provides no real security benefit.","Every commit to auth or session management.","Low","Clear user from DB; clear token from Redis.","The TTL on the Redis key should match the original token's expiry to prevent indefinite cache growth.","Redis check should add <5ms latency to API requests.","N/A (API-only test)."
"TEST-RECOVERY-001","Account Recovery","Functional","E2E","Critical","true","High","Verify the end-to-end password reset flow, including invalidating all other active sessions upon successful reset.","Critical - Failure prevents users from recovering their accounts, leading to churn and high support costs.","High","An active user account exists. An email capture service is running.","1. Log in the user on 'Device A' to get a valid token. 2. Request a password reset for the user's email. 3. Capture the email and extract the reset token. 4. Submit a new password using the reset token. 5. Verify the password hash is updated in the DB. 6. Attempt to use the token from 'Device A' on a protected endpoint.","The new password is set successfully. The old session token from 'Device A' is rejected with a 401 Unauthorized error.","User account with a known email address.","Jest, Supertest, Email capture tool (e.g., MailHog), Redis client.","10","20","5","Authentication Service, Tokens Service, User Database, Redis ElastiCache, AWS SES (mocked).","Integration environment with full service stack and email capture.","100% pass rate; Old session is invalidated; User can log in with new password.","Critical - Leaves user accounts vulnerable to session hijacking after a password reset.","Every release.","Medium","Delete test users; clear tokens from DB and Redis.","Reset tokens must be single-use, hashed in the DB, and have a short expiry.","Reset process should complete within 500ms.","N/A (API-only test)."