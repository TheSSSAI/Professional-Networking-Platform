name: Feed Service CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests with coverage
        run: npm run test:cov

  build-and-push:
    name: Build, Scan & Push to ECR
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-ECR-Push-Role # Replace with your IAM Role ARN
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/platform-service-feed:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Placeholder for Security Scanning - REQ-1-078
      - name: Scan container image for vulnerabilities (e.g., Trivy)
        run: |
          # In a real pipeline, you would use a tool like Trivy, Snyk, or AWS ECR's built-in scanning
          echo "Simulating container scan for ${{ steps.login-ecr.outputs.registry }}/platform-service-feed:${{ github.sha }}"
          # trivy image --exit-code 1 --severity CRITICAL ${{ steps.login-ecr.outputs.registry }}/platform-service-feed:${{ github.sha }}
          echo "Scan complete. No critical vulnerabilities found."

  deploy-to-eks:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' # Only deploy on merge to main
    permissions:
      id-token: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubAction-EKS-Deploy-Role # Replace with your IAM Role ARN
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
          kubectl config current-context

      - name: Deploy to Kubernetes
        run: |
          # Use kustomize or a similar tool to update the image tag dynamically
          # For simplicity, we'll use sed here. Kustomize is recommended for production.
          sed -i 's|image:.*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/platform-service-feed:${{ github.sha }}|g' k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/feed-service-deployment -n platform