"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"IAS-T-101.1","[WI-101] Scaffold NestJS Project and Configure Environment Module","Use NestJS CLI to generate the project structure. Implement a global ConfigModule using `@nestjs/config` to load environment variables from a .env file for local development and process.env for production.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-06-03","6","1","backend,nestjs,foundation","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-01","","NestJS,TypeScript","Low","Low","Project is generated via `nest new` command. ConfigModule is globally available. Application can access variables like `NODE_ENV` and `PORT` via ConfigService. Application starts without errors.","Code reviewed; Unit tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Code review and successful application startup.","Base commit for the repository.","Enables all subsequent development by providing the fundamental application structure."
"IAS-T-102.1","[WI-102] Implement TypeORM Configuration for PostgreSQL","Integrate `@nestjs/typeorm` module. Create an asynchronous configuration (`TypeOrmModule.forRootAsync`) that injects ConfigService to fetch database credentials. Configure settings for migrations.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-06-03","6.3","1","backend,database,typeorm","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-01","IAS-T-101.1","NestJS,TypeORM,PostgreSQL","Low","Low","Application successfully establishes a connection to a local PostgreSQL instance on startup. Connection parameters are loaded from environment variables. TypeORM CLI can generate an initial empty migration.","Code reviewed; Unit tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","Local PostgreSQL instance","Successful connection log on app start and successful migration generation.","Requires database credentials in environment variables.","Enables data persistence for all features."
"IAS-T-103.1","[WI-103] Implement Redis Module and Service","Create a custom dynamic module for Redis connection using a library like `ioredis`. The module should be configurable and provide a Redis client instance via a custom provider token.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-06-04","6.2","1","backend,redis,caching","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-01","IAS-T-101.1","NestJS,Redis,TypeScript","Low","Low","Application successfully connects to a local Redis instance on startup. A `RedisService` can be injected into other services. A basic unit test passes.","Code reviewed; Unit tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","Local Redis instance","Unit tests and successful connection log on app start.","Requires Redis credentials in environment variables.","Enables caching and session blocklisting capabilities."
"IAS-T-104.1","[WI-104] Configure GraphQL Module with Code-First Approach","Integrate `@nestjs/graphql` and configure `GraphQLModule.forRootAsync`. Set up the driver, enable the playground for development, and create a sample 'hello world' query and resolver to test the setup.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-06-04","4","1","backend,graphql,api","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-01","IAS-T-101.1","NestJS,GraphQL","Low","Low","The GraphQL server starts and the playground is accessible at `/graphql`. A test query (`{ hello }`) returns the expected 'world' string.","Code reviewed; Unit tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Accessing the GraphQL playground and running a test query.","Exposes the primary API interface for the service.","Defines the API contract layer for all service features."
"IAS-T-FOUND-UT","Develop Unit Tests for Core Foundation Modules","Create unit tests for the ConfigService (mocking process.env), RedisService (mocking ioredis), and the sample GraphQL resolver. Aim for foundational test setup.","Task","Sprint Backlog","High","qa.eng@company.com","product.owner@company.com","2024-06-05","8.3","2","testing,qa,jest","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-01","IAS-T-101.1,IAS-T-103.1,IAS-T-104.1","NestJS,Jest","Low","Low","Unit tests for ConfigService, RedisService, and sample resolver pass. Test setup using `@nestjs/testing` is configured correctly.","All tests passing in CI pipeline.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Jest test runs passing in local and CI environments.","","Establishes a baseline of quality and enables automated regression testing."
"IAS-T-FOUND-DOC","Document Initial Project Setup and Local Development","Update the README.md file with detailed instructions on how to set up the local development environment, including Node.js version, installing dependencies, setting up the .env file, and running the application.","Task","Sprint Backlog","Medium","backend.dev1@company.com","product.owner@company.com","2024-06-05","6","1","documentation","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-01","IAS-T-101.1,IAS-T-102.1,IAS-T-103.1","Markdown,Technical Writing","Low","Low","README.md contains a 'Getting Started' section. Instructions for running local databases are included. A `.env.example` file is created and documented.","Documentation is peer-reviewed and merged.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Peer review and a new developer successfully setting up the project using the documentation.","","Reduces onboarding time for new developers and ensures a consistent development environment."
"IAS-T-201.1","[WI-201] Implement User, Role, UserRole Entities and Migration","Define the `User`, `Role`, and `UserRole` entities using TypeORM decorators. Specify columns, data types, and the many-to-many relationship. Generate and review the SQL migration.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-06-06","6.2","1","database,typeorm,iam","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Database Schema and Entities","EPIC-002","Identity & Access Management Service","US-ENBL-04","IAS-T-102.1","TypeORM,TypeScript,PostgreSQL","Low","Low","Entities are defined. `email` has a unique constraint. Many-to-many relationship is configured. Migration is generated and applies successfully.","Code reviewed; Migration applied successfully to staging DB.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Running the migration and inspecting the database schema.","Database migration must be run before application deployment.","Creates the foundational data model for all user and role management."
"IAS-T-202.1","[WI-202] Implement UserToken Entity and Migration","Define the `UserToken` entity for storing single-use tokens (email verification, password reset). Define columns and the one-to-many relationship with the User entity. Generate and review the migration.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-06-06","3.2","1","database,typeorm,security","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Database Schema and Entities","EPIC-002","Identity & Access Management Service","US-ENBL-04","IAS-T-201.1","TypeORM,TypeScript","Low","Low","Entity is defined. Foreign key to User is configured. Migration is generated and applies successfully.","Code reviewed; Migration applied successfully.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Running the migration.","Database migration required.","Enables secure, stateful token-based operations like email verification and password reset."
"IAS-T-203.1","[WI-203] Implement AccountDeletionRequest Entity and Migration","Define the `AccountDeletionRequest` entity with a one-to-one relationship to the User. The `userId` must be a foreign key with a unique constraint. Generate and review the migration.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-06-07","3.2","1","database,typeorm,gdpr","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Database Schema and Entities","EPIC-002","Identity & Access Management Service","US-ENBL-04","IAS-T-201.1","TypeORM,TypeScript","Low","Low","Entity is defined. One-to-one relationship with a unique FK is configured. Migration is generated and applies successfully.","Code reviewed; Migration applied successfully.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Running the migration.","Database migration required.","Provides the data structure to manage the GDPR-compliant account deletion lifecycle."
"IAS-T-204.1","[WI-204] Implement UserSecurityAuditLog Entity and Migration","Define the `UserSecurityAuditLog` entity. Define columns for action, IP, user agent, etc. Add indexes on `userId` and `createdAt` for query performance. Generate and review the migration.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-06-07","4.2","1","database,typeorm,security,audit","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Database Schema and Entities","EPIC-002","Identity & Access Management Service","US-ENBL-04","IAS-T-201.1","TypeORM,TypeScript","Low","Low","Entity is defined with appropriate indexes. Foreign key relationship to User is configured. Migration is generated and applies successfully.","Code reviewed; Migration applied successfully.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Running the migration.","Database migration required.","Creates the data layer for a tamper-evident security audit trail, crucial for compliance and incident response."
"IAS-T-DB-IT","Create Integration Tests for Entity Relationships","Write integration tests that use a test database to verify the relationships between entities. For example, create a user and a role, associate them, and then fetch the user to confirm the role is correctly loaded.","Task","Sprint Backlog","Medium","qa.eng@company.com","product.owner@company.com","2024-06-07","12","3","testing,qa,database","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Database Schema and Entities","EPIC-002","Identity & Access Management Service","US-ENBL-04","IAS-T-201.1,IAS-T-202.1,IAS-T-203.1,IAS-T-204.1","NestJS,TypeORM,Jest,PostgreSQL","Medium","Medium","An integration test successfully saves and retrieves a User with their Roles. An integration test successfully saves and retrieves a User with their UserTokens. Tests use a separate, ephemeral test database.","All tests passing in CI pipeline.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","backend.dev1@company.com","","Successful run of integration tests in the CI pipeline.","","Ensures the integrity of the data model and prevents regressions in entity relationships."
"IAS-T-110.1","[WI-110] Design and Implement Terraform for RDS and ElastiCache","Develop modular Terraform code to provision AWS RDS (PostgreSQL) and AWS ElastiCache (Redis). The configuration must be environment-aware (staging vs. prod) and manage networking.","Task","Sprint Backlog","Critical","devops.eng@company.com","product.owner@company.com","2024-06-07","14.3","5","devops,terraform,iaac,aws","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-02","","Terraform,AWS,Networking","High","Medium","Terraform code is modular. `terraform plan` shows correct resources. `terraform apply` successfully provisions instances. Outputs are correctly exposed.","Code reviewed and merged. Infrastructure successfully provisioned in the development AWS account.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","AWS Account Access","Successful `terraform apply` and verification of resources in the AWS console.","This task is a prerequisite for any cloud-based deployment.","Automates infrastructure provisioning, ensuring consistency, repeatability, and security."
"IAS-T-105.1","[WI-105] Develop and Optimize Multi-stage Dockerfile","Create a Dockerfile with a 'builder' stage that installs all dependencies, compiles TypeScript, and a 'production' stage that copies only the `dist` folder and production `node_modules` into a slim base image.","Task","Sprint Backlog","Critical","devops.eng@company.com","product.owner@company.com","2024-06-07","6","1","devops,docker,containerization","Sprint 1","Establish service foundation, core IAM database schema, and initial DevOps infrastructure.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-02","IAS-T-101.1","Docker,Node.js","Low","Low","Image builds without errors. The application runs correctly inside the container. The container runs as a non-root user. The final image size is < 200MB.","Dockerfile is reviewed and merged.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-27","2024-06-07","100%","","","Running the application locally via `docker run`.","Essential for container-based deployments (Kubernetes).","Enables consistent and portable application deployments across all environments."
"IAS-T-108.1","[WI-108] Develop Kubernetes Manifests","Author `Deployment`, `Service`, and `ConfigMap` YAML files. The Deployment manifest must include readiness/liveness probes, resource requests/limits, and a rolling update strategy.","Task","Sprint Backlog","Critical","devops.eng@company.com","product.owner@company.com","2024-06-12","8.3","2","devops,kubernetes,deployment","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-02","IAS-T-111.1,IAS-T-105.1","Kubernetes","Medium","Low","All manifests are syntactically valid. Manifests successfully deploy the application to a dev Kubernetes cluster. Probes correctly reference the application's `/health` endpoint.","Manifests are peer-reviewed and merged.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","","Kubernetes cluster access","Manual deployment and verification using `kubectl`.","Defines how the application runs in Kubernetes.","Enables automated, scalable, and resilient application deployments."
"IAS-T-106.1","[WI-106] Implement GitHub Actions CI Pipeline (Build & Test)","Create the `ci.yml` workflow. Define jobs for linting (`npm run lint`), building (`npm run build`), and testing (`npm run test:cov`). Configure Jest to enforce 80% code coverage threshold.","Task","Sprint Backlog","Critical","devops.eng@company.com","product.owner@company.com","2024-06-14","12","3","devops,ci-cd,github-actions","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-02","IAS-T-101.1","GitHub Actions,YAML","Medium","High","Pipeline runs on every push to a pull request. Pipeline fails if linting, build, or tests fail. Pipeline fails if test coverage drops below 80%. Dependency caching is implemented.","Pipeline is mandatory for PRs to main branch.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","backend.dev1@company.com","","Successful and failed pipeline runs on test pull requests.","","Automates quality checks, improving code quality and development velocity."
"IAS-T-107.1","[WI-107] Integrate SAST and SCA Scanning into CI","Add jobs to the `ci.yml` workflow. Configure GitHub CodeQL for Static Application Security Testing (SAST). Add a step to run `npm audit --audit-level=critical` for Software Composition Analysis (SCA).","Task","Sprint Backlog","High","devops.eng@company.com","product.owner@company.com","2024-06-17","8.7","2","devops,ci-cd,security","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-02","IAS-T-106.1","GitHub Actions,Security","Medium","Medium","CodeQL scan is performed on each CI run. `npm audit` is performed on each CI run. The pipeline fails if critical vulnerabilities are found.","Security scanning is mandatory for PRs.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","","","Verification of pipeline logs and successful/failed runs based on vulnerability presence.","","Automates security scanning, shifting security left and reducing vulnerabilities in production."
"IAS-T-107.2","[WI-107] Integrate Container Vulnerability Scanning into CI","Add a job to the `ci.yml` workflow that runs after the Docker image is built. Use a tool like Trivy to scan the image for OS and application-level vulnerabilities.","Task","Sprint Backlog","High","devops.eng@company.com","product.owner@company.com","2024-06-18","6.3","1","devops,ci-cd,security,docker","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-02","IAS-T-105.1,IAS-T-106.1","GitHub Actions,Docker,Trivy","Low","Low","The Docker image is scanned in every CI run. The pipeline fails if critical vulnerabilities are found. The scan report is uploaded as a pipeline artifact.","Container scanning is mandatory for PRs.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","","","Verification of pipeline logs.","","Prevents deployment of containers with known vulnerabilities, securing the runtime environment."
"IAS-T-109.1","[WI-109] Implement GitHub Actions CD Pipeline","Create `cd.yml` workflow triggered on merge to `main`. It will authenticate to AWS, build/tag/push the Docker image to ECR, and then use `kubectl` to apply the manifests to the staging EKS cluster.","Task","Sprint Backlog","Critical","devops.eng@company.com","product.owner@company.com","2024-06-20","14.3","5","devops,cd,deployment,aws","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-02","IAS-T-106.1,IAS-T-108.1","GitHub Actions,AWS ECR,Kubernetes,kubectl","High","High","Pipeline triggers on merge to main. It successfully authenticates to AWS. The Docker image is pushed to ECR. The Kubernetes deployment in staging is updated.","A merge to main branch results in a successful deployment to the staging environment.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","","AWS, EKS Cluster","A successful deployment to staging after merging a test PR.","Automates the release process, critical for development velocity.","Enables rapid, reliable, and automated delivery of features to production."
"IAS-T-CICD-DOC","Document CI/CD Pipeline and Deployment Process","Create a `DEPLOYMENT.md` file that explains the CI and CD workflows, including triggers, jobs, security checks, and the process for promoting a build from staging to production.","Task","Sprint Backlog","Medium","devops.eng@company.com","product.owner@company.com","2024-06-21","8.3","2","documentation,devops","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-02","IAS-T-109.1","Technical Writing,GitHub Actions,Kubernetes","Low","Low","Document explains CI/CD triggers and jobs. It outlines the branching strategy. It explains rollback procedures.","Documentation is peer-reviewed and merged.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","","","Peer review of the documentation.","","Ensures the deployment process is understandable and maintainable by the entire team."
"IAS-T-301.1","[WI-301] Implement `register` GraphQL Mutation and Service","Develop the `register` mutation resolver and the corresponding `AuthService` method. Implement logic for validating input (email uniqueness, password complexity, age), hashing the password with bcrypt, and creating the User and UserToken entities in a database transaction.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-06-19","12","3","backend,graphql,auth,security","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-001","IAS-T-201.1,IAS-T-202.1","NestJS,GraphQL,TypeORM,bcrypt","Medium","High","GraphQL mutation is defined. Service method validates input. Password is confirmed to be hashed. New User and UserToken records are created atomically. Correct error is thrown on validation failure.","Code reviewed; Integration tests passing; Deployed to staging.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","qa.eng@company.com","","Integration tests and manual testing via GraphQL playground.","Enables the first step of the user journey.","Enables user acquisition, the primary driver of platform growth."
"IAS-T-301.2","[WI-301] Publish `UserRegistered` Event","Integrate an event emitter module. After the user is successfully created in the database, publish a `UserRegistered` event with the user's ID and email.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-06-19","4","1","backend,events,architecture","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-001","IAS-T-301.1","NestJS","Low","Low","The event is published only after the database transaction for user creation is successfully committed. The event payload contains the necessary information for the email service.","Code reviewed; Unit tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","","Event Bus (e.g., SQS)","Unit tests mocking the event emitter.","Decouples registration from email sending.","Improves system resilience and enables asynchronous workflows like sending verification emails."
"IAS-T-302.1","[WI-302] Implement `verifyEmail` Mutation and Service Logic","Develop the `verifyEmail` GraphQL mutation. The service logic must retrieve the token from the database, validate that it exists, is not expired, and has not been used. If valid, update the associated user's status to 'active' and delete the token.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-06-21","6.3","1","backend,graphql,auth","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-003","IAS-T-301.1","NestJS,GraphQL,TypeORM","Low","Medium","A request with a valid token changes the user status to 'active'. The token is deleted or marked as used after successful verification. Expired, used, or non-existent tokens are rejected.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","qa.eng@company.com","","Integration tests covering valid, expired, and invalid token scenarios.","","Completes the user onboarding cycle, converting registered users into active users."
"IAS-T-302.2","[WI-302] Unit Test Email Verification Logic","Create unit tests for the `verifyEmail` service method, mocking the database repository to test all logic paths: success, token not found, token expired, and token already used.","Task","Sprint Backlog","High","qa.eng@company.com","product.owner@company.com","2024-06-21","4","1","testing,qa,auth","Sprint 2","Automate CI/CD pipeline and implement the complete user registration and email verification lifecycle.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-003","IAS-T-302.1","NestJS,Jest","Low","Low","All four scenarios (success, not found, expired, used) are covered by unit tests. Tests achieve >80% code coverage.","All tests passing in CI pipeline.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-10","2024-06-21","100%","","","Passing Jest test suite.","","Ensures the reliability and correctness of the account activation logic."
"IAS-T-111.1","[WI-111] Implement Health Check Endpoint with Terminus","Integrate `@nestjs/terminus` to create a `/health` endpoint. Configure health indicators to check the status of the PostgreSQL database connection and the Redis connection.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-06-26","4.2","1","backend,observability,healthcheck","Sprint 3","Implement secure user login, session management, and service observability.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-03","IAS-T-102.1,IAS-T-103.1","NestJS","Low","Low","GET `/health` returns 200 OK when all dependencies are healthy. GET `/health` returns 503 if a dependency is down. Response body details the status of each checked dependency.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","","","Integration test that calls the /health endpoint in both healthy and unhealthy states.","Required by Kubernetes for liveness/readiness probes.","Enables automated health monitoring and self-healing in the production environment."
"IAS-T-112.1","[WI-112] Instrument Service with OpenTelemetry for Tracing","Integrate and configure the OpenTelemetry SDK. Set up automatic instrumentation for NestJS, TypeORM, and Redis. Configure an OTLP exporter to send trace data to a collector.","Task","Sprint Backlog","Medium","backend.dev1@company.com","product.owner@company.com","2024-06-28","12.3","3","backend,observability,tracing,opentelemetry","Sprint 3","Implement secure user login, session management, and service observability.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-03","IAS-T-101.1","NestJS,OpenTelemetry,TypeScript","Medium","Medium","Application startup initializes tracer provider. GraphQL requests create a root span. Database queries appear as child spans. Logs are enriched with `trace_id` and `span_id`.","Code reviewed; Traces are visible in Jaeger.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","devops.eng@company.com","OpenTelemetry Collector","Observing traces in a Jaeger UI in a local or dev environment.","","Provides deep visibility into request flows, drastically reducing debugging time for production issues."
"IAS-T-113.1","[WI-113] Expose Prometheus Metrics Endpoint","Integrate a Prometheus client module to create and expose a `/metrics` endpoint. Instrument GraphQL resolvers to capture request latency and status codes.","Task","Sprint Backlog","Medium","backend.dev2@company.com","product.owner@company.com","2024-07-01","6.3","1","backend,observability,metrics,prometheus","Sprint 3","Implement secure user login, session management, and service observability.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-03","IAS-T-101.1","NestJS,Prometheus","Low","Low","GET request to `/metrics` returns data in Prometheus text format. Default Node.js metrics are included. GraphQL request latencies are captured in a histogram.","Code reviewed; Endpoint is scrapeable by Prometheus.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","","","Scraping the `/metrics` endpoint and observing the output.","","Enables quantitative monitoring of service health and performance, and provides the data for alerting."
"IAS-T-OBSERV-DOC","Document Observability Setup and Key Metrics","Create an `OBSERVABILITY.md` file detailing the observability strategy. Document how to view traces in Jaeger, what key metrics are exposed on the `/metrics` endpoint, and the structure of the JSON logs.","Task","Sprint Backlog","Low","backend.dev1@company.com","product.owner@company.com","2024-07-05","8.3","2","documentation,observability","Sprint 3","Implement secure user login, session management, and service observability.","Service Foundation and Operations","EPIC-001","Identity & Access Management Service","US-ENBL-03","IAS-T-111.1,IAS-T-112.1,IAS-T-113.1","Technical Writing,OpenTelemetry,Prometheus","Low","Low","Document explains how to access traces. It lists and describes the most important Prometheus metrics. It provides an example of the structured log output.","Documentation is peer-reviewed and merged.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","","","Peer review of the documentation.","","Reduces time for new team members to understand how to monitor and debug the service."
"IAS-T-303.1","[WI-303] Implement `login` Service Logic with Credential Validation","Develop the core `login` method in `AuthService`. It must fetch the user by email, verify their account status is 'active', and compare the provided password against the stored hash using bcrypt.compare().","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-01","8.3","2","backend,auth,security","Sprint 3","Implement secure user login, session management, and service observability.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-006","IAS-T-302.1","NestJS,TypeORM,bcrypt","Medium","High","Method returns user entity on successful match for an active user. Throws UnauthorizedException for wrong password. Throws ForbiddenException for unverified account. Throws UnauthorizedException for non-existent user.","Code reviewed; Unit tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","","","Unit tests covering all credential and status validation paths.","","Provides the core logic for authenticating users to the platform."
"IAS-T-303.2","[WI-303] Implement JWT Generation and `login` Resolver","Integrate `@nestjs/jwt`. Upon successful validation from the service, the `login` resolver will call a service method to generate a signed access token and refresh token with configured expirations and payloads (sub, jti).","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-02","8","2","backend,auth,jwt,security","Sprint 3","Implement secure user login, session management, and service observability.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-006","IAS-T-303.1","NestJS,GraphQL,JWT","Medium","High","The `login` GraphQL mutation returns `accessToken` and `refreshToken` on success. JWTs are correctly signed and have specified expiry. JWT secret is loaded securely.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","qa.eng@company.com","","Integration test that performs a successful login and validates the structure of the returned JWTs.","RISK-001 is a major concern here.","Enables session management for authenticated users."
"IAS-T-303.3","[WI-303] Implement Security Audit Logging for Login Attempts","Extend the `login` service to create a record in the `UserSecurityAuditLog` for both successful and failed login attempts, capturing user ID (if found), IP address, user agent, and timestamp.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-07-03","5","1","backend,auth,security,audit","Sprint 3","Implement secure user login, session management, and service observability.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-006","IAS-T-204.1,IAS-T-303.1","NestJS,TypeORM","Low","Low","A successful login creates a `LOGIN_SUCCESS` audit log entry. A failed login creates a `LOGIN_FAILURE` audit log entry. The log entry contains all required metadata.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","","","Integration test that verifies log records are created in the test database after login attempts.","","Provides a crucial security trail for monitoring and investigating account activity."
"IAS-T-305.1","[WI-305] Implement `logout` Mutation and Redis Blocklist Logic","Create the `logout` GraphQL mutation. The service logic will extract the JTI (JWT ID) from the access token and the provided refresh token, then write both JTIs to the Redis cache with a TTL matching their original expiry.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-07-04","6.3","1","backend,auth,security,redis","Sprint 3","Implement secure user login, session management, and service observability.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-007","IAS-T-103.1,IAS-T-303.2","NestJS,GraphQL,Redis,JWT","Medium","High","The `logout` mutation is accessible to authenticated users. Upon calling, the JTIs of the user's tokens are added to Redis. The TTL of the Redis keys is correctly set.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","qa.eng@company.com","","Integration test that logs in, calls logout, and then checks Redis for the presence of the token JTIs.","RISK-001 is a major concern here.","Enables secure session termination, preventing reuse of stolen tokens."
"IAS-T-305.2","[WI-305] Integration Test for Blocklisted Token Rejection","Write an integration test that performs a full login-logout-access cycle. It must: 1. Log in. 2. Call logout. 3. Attempt to use the original access token against a protected endpoint and assert a 401 response.","Task","Sprint Backlog","High","qa.eng@company.com","product.owner@company.com","2024-07-04","4","1","testing,qa,security","Sprint 3","Implement secure user login, session management, and service observability.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-007","IAS-T-305.1","NestJS,Jest,Redis","Low","Low","The test successfully demonstrates that a token used in a logout call cannot be used again.","All tests passing in CI pipeline.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","","","Passing test in CI pipeline.","","Provides automated verification of a critical security feature."
"IAS-T-304.1","[WI-304] Implement `refreshToken` Mutation and Service Logic","Develop the `refreshToken` GraphQL mutation. The service logic will receive a refresh token, validate it, check the blocklist, and if valid, issue a new access token.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-05","6.3","1","backend,auth,jwt,security","Sprint 3","Implement secure user login, session management, and service observability.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-SESSION-REFRESH","IAS-T-303.2,IAS-T-305.1","NestJS,GraphQL,JWT,Redis","Medium","High","A valid refresh token can be exchanged for a new access token. Invalid, expired, or blocklisted refresh tokens are rejected.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","","","Integration test that logs in, gets tokens, calls `refreshToken`, and validates the new access token.","RISK-001 is a major concern here.","Provides a seamless user experience by maintaining long-lived sessions securely."
"IAS-T-304.2","[WI-304] Unit Test Token Refresh Logic","Create unit tests for the `refreshToken` service method, mocking the JWT service and Redis client to cover all logic paths: success, invalid signature, expired token, and blocklisted token.","Task","Sprint Backlog","High","qa.eng@company.com","product.owner@company.com","2024-07-05","4","1","testing,qa,auth","Sprint 3","Implement secure user login, session management, and service observability.","Core Authentication and User Lifecycle","EPIC-003","Identity & Access Management Service","US-SESSION-REFRESH","IAS-T-304.1","NestJS,Jest","Low","Low","All four scenarios are covered by unit tests. Tests achieve >80% coverage.","All tests passing in CI pipeline.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-24","2024-07-05","100%","","","Passing Jest test suite.","","Ensures the reliability of the session refresh mechanism."
"IAS-T-401.1","[WI-401] Implement `requestPasswordReset` Mutation and Service Logic","Develop the `requestPasswordReset` GraphQL mutation. The service logic will find the user by email, invalidate previous reset tokens, generate a new secure, time-limited token, save it, and publish a `PasswordResetRequested` event. It must return a generic success response in all cases.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-10","6.3","1","backend,auth,security,recovery","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-010","IAS-T-202.1","NestJS,GraphQL,TypeORM","Medium","Medium","A generic response is returned for both existing and non-existing emails. A new token is generated for a valid user. Old reset tokens are deleted. An event is published for a valid user.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration tests covering all scenarios.","","Initiates the self-service account recovery process."
"IAS-T-401.2","[WI-401] Unit Test Password Reset Request Logic","Create unit tests for the `requestPasswordReset` service method, mocking dependencies to verify logic for existing, non-existing, and banned users, and invalidation of old tokens.","Task","Sprint Backlog","High","qa.eng@company.com","product.owner@company.com","2024-07-11","4","1","testing,qa,auth","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-010","IAS-T-401.1","NestJS,Jest","Low","Low","All scenarios are covered by unit tests. Tests confirm event emitter is called only for valid users.","All tests passing in CI pipeline.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Passing Jest test suite.","","Ensures reliability of the password reset request logic."
"IAS-T-402.1","[WI-402] Implement `resetPassword` Mutation and Service Logic","Develop the `resetPassword` mutation. The service will validate the token, check password complexity, hash the new password, update the user record, and delete the used token.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-12","8.3","2","backend,auth,security","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-012","IAS-T-401.1","NestJS,GraphQL,TypeORM,bcrypt","Medium","High","A valid token allows a password to be updated. New password must meet complexity rules. Token is invalidated upon use. Expired or invalid tokens are rejected.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration tests.","","Completes the account recovery loop."
"IAS-T-402.2","[WI-402] Implement Session Invalidation on Password Reset","Extend the `resetPassword` service. After successfully updating the password, the service must find all active tokens for the user and add them to the Redis blocklist to terminate all other sessions.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-15","4.2","1","backend,auth,security,redis","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-012","IAS-T-402.1,IAS-T-305.1","NestJS,Redis,JWT","Medium","High","A successful password reset triggers session invalidation. All relevant JWT JTIs for the user are added to the Redis blocklist.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration test: reset password, then try to use an old token and verify it is rejected.","RISK-001 is a major concern here.","Prevents account takeover by invalidating sessions potentially compromised before a password reset."
"IAS-T-402.3","[WI-402] Add Audit Logging for Password Reset","Extend the `resetPassword` service to log a `PASSWORD_RESET_SUCCESS` event to the `UserSecurityAuditLog` upon successful completion.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-07-16","4","1","backend,auth,security,audit","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-012","IAS-T-204.1,IAS-T-402.1","NestJS,TypeORM","Low","Low","A successful password reset creates an audit log entry. The entry includes user ID, IP address, and timestamp.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration test that verifies the log entry is created.","","Provides a security audit trail for a critical account recovery action."
"IAS-T-403.1","[WI-403] Implement MFA Secret Generation and Storage","Create an MFA module and service. Implement the `generateMfaSecret` mutation. The service will generate a new TOTP secret using `speakeasy`, store it encrypted, and return the secret and an `otpauth://` URI.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-07-17","8.3","2","backend,auth,security,mfa","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-018","IAS-T-201.1","NestJS,GraphQL,Security,Cryptography","High","High","The mutation returns a valid secret and URI. The secret is stored in the database in an encrypted format. The user's MFA status is not yet enabled.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration test.","RISK-007 is a major concern here.","Provides the mechanism for users to begin the MFA setup process."
"IAS-T-403.2","[WI-403] Implement MFA Verification and Enablement","Implement the `verifyMfaSetup` mutation. The service will take a TOTP code, validate it, set the user's `isMfaEnabled` flag to true, and generate/store hashed recovery codes.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-07-18","12","3","backend,auth,security,mfa","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-018","IAS-T-403.1","NestJS,GraphQL,Security","High","High","A correct TOTP code successfully enables MFA. An incorrect code is rejected. Recovery codes are returned to the user and their hashes are stored. The action is logged.","Code reviewed; E2E tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","qa.eng@company.com","","E2E test with a real authenticator app.","RISK-007 is a major concern here.","Completes the MFA setup flow, allowing users to secure their accounts."
"IAS-T-404.1","[WI-404] Modify `login` Service for Two-Factor Flow","Update the `AuthService.login` method. After password validation, check if `user.isMfaEnabled`. If true, generate and return a short-lived, single-purpose JWT (`mfaSessionToken`) instead of the final access/refresh tokens.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-19","8.3","2","backend,auth,security,mfa","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-019","IAS-T-303.1,IAS-T-403.2","NestJS,JWT,Security","Medium","High","Login for MFA-enabled user returns `mfaRequired: true` and `mfaSessionToken`. Login for non-MFA user works as before. The `mfaSessionToken` has a short expiry.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration test.","RISK-007 is a major concern here.","Enables the two-step verification process for enhanced security."
"IAS-T-404.2","[WI-404] Implement `verifyMfaLogin` Mutation","Create a new `verifyMfaLogin` mutation. It will accept the `mfaSessionToken` and a TOTP code. The service will validate both and, on success, issue the final access/refresh tokens.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-19","8","2","backend,auth,security,mfa","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Recovery and Advanced Security","EPIC-004","Identity & Access Management Service","US-019","IAS-T-404.1","NestJS,GraphQL,JWT,Security","Medium","High","A valid `mfaSessionToken` and correct TOTP code result in final session tokens. An invalid/expired session token is rejected. An incorrect TOTP code is rejected and increments a failure counter.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration test.","RISK-007 is a major concern here.","Completes the secure MFA login flow."
"IAS-T-501.1","[WI-501] Implement `deactivateAccount` Mutation and Service Logic","Develop the `deactivateAccount` mutation. The service will set the user's status to 'deactivated', add all their active tokens to the Redis blocklist, and publish an `AccountDeactivated` event.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-07-18","6.3","1","backend,lifecycle,auth","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Management Lifecycle","EPIC-005","Identity & Access Management Service","US-013","IAS-T-305.1","NestJS,GraphQL,Redis","Low","Medium","The mutation successfully changes the user status to 'deactivated'. The user's active sessions are terminated. An `AccountDeactivated` event is published.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration test.","","Provides a non-permanent offboarding path for users."
"IAS-T-501.2","[WI-501] Unit Test Deactivation Logic","Create unit tests for the `deactivateAccount` service method, mocking the user repository, Redis client, and event emitter.","Task","Sprint Backlog","Medium","qa.eng@company.com","product.owner@company.com","2024-07-19","4","1","testing,qa,lifecycle","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Management Lifecycle","EPIC-005","Identity & Access Management Service","US-013","IAS-T-501.1","NestJS,Jest","Low","Low","Test verifies the user status is updated. Test verifies the session invalidation logic is called. Test verifies the event emitter is called.","All tests passing in CI pipeline.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Passing Jest test suite.","","Ensures reliability of the account deactivation feature."
"IAS-T-502.1","[WI-502] Implement Account Reactivation Logic in Login Service","Modify the `AuthService.login` method. After validating credentials, if the user status is 'deactivated', update it to 'active' before issuing JWTs. Publish an `AccountReactivated` event.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-07-19","6.3","1","backend,lifecycle,auth","Sprint 4","Implement comprehensive account security and lifecycle features.","Account Management Lifecycle","EPIC-005","Identity & Access Management Service","US-014","IAS-T-303.1,IAS-T-501.1","NestJS,TypeORM","Medium","Medium","A user with a 'deactivated' status can successfully log in. On login, their status is updated to 'active'. An `AccountReactivated` event is published.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-08","2024-07-19","100%","","","Integration test: deactivate a user, then log in and verify their status is 'active'.","","Provides a seamless re-engagement path for returning users."
"IAS-T-503.1","[WI-503] Implement `requestAccountDeletion` Mutation","Develop the `requestAccountDeletion` mutation which requires password re-authentication. On success, it creates an `AccountDeletionRequest`, sets the user status to 'pending_deletion', invalidates all sessions, and publishes an event.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-07-26","12","3","backend,lifecycle,gdpr,security","Sprint 5","Implement the GDPR-compliant permanent account deletion lifecycle.","Account Management Lifecycle","EPIC-005","Identity & Access Management Service","US-015","IAS-T-203.1,IAS-T-305.1","NestJS,GraphQL,Redis","High","High","The mutation requires re-authentication. An `AccountDeletionRequest` record is created. User status is updated. All sessions are terminated.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-22","2024-08-02","100%","","","Integration test.","RISK-003 is a major concern here.","Initiates the user-driven process for permanent data deletion, a key compliance requirement."
"IAS-T-504.1","[WI-504] Implement `cancelAccountDeletion` Logic in Login","Modify the `AuthService.login` method. If a user with 'pending_deletion' status logs in within the grace period, their status is reverted to 'active', the `AccountDeletionRequest` record is deleted, and any scheduled jobs are cancelled.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-07-29","6.3","1","backend,lifecycle,auth","Sprint 5","Implement the GDPR-compliant permanent account deletion lifecycle.","Account Management Lifecycle","EPIC-005","Identity & Access Management Service","US-015","IAS-T-503.1,IAS-T-505.1","NestJS,TypeORM","Medium","Medium","Login successfully cancels a pending deletion. User status is reverted to 'active'. The `AccountDeletionRequest` record is removed.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-22","2024-08-02","100%","devops.eng@company.com","Job Scheduler API","Integration test.","","Provides a user retention path and a way to reverse accidental deletion requests."
"IAS-T-505.1","[WI-505] Implement Scheduled Job for Data Purge Initiation","Create a Kubernetes CronJob that runs a script or calls an internal endpoint on a schedule. This job will find all expired `AccountDeletionRequest` records and publish an `AccountPurgeInitiated` event for each.","Task","Sprint Backlog","Critical","devops.eng@company.com","product.owner@company.com","2024-07-31","12.3","3","devops,kubernetes,cron,gdpr","Sprint 5","Implement the GDPR-compliant permanent account deletion lifecycle.","Account Management Lifecycle","EPIC-005","Identity & Access Management Service","US-015","IAS-T-503.1","NestJS,Kubernetes,Cron","High","High","A Kubernetes CronJob manifest is created. The job script correctly queries for expired requests and publishes events. The job has proper logging and error handling.","CronJob is deployed to staging and verified to run on schedule.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-22","2024-08-02","100%","backend.dev1@company.com","","Integration test in a time-accelerated environment.","RISK-003 is a major concern here.","Automates the initiation of the permanent data purge, ensuring compliance with the 14-day grace period."
"IAS-T-506.1","[WI-506] Implement Final Data Purge Event Consumer","Create a consumer that listens for `AccountPurgeInitiated` events. Upon receiving an event, it will perform a hard delete of the `User` record and all its direct relational data within a single transaction. It will also write to the immutable deletion audit log.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-08-02","8.7","2","backend,gdpr,database,events","Sprint 5","Implement the GDPR-compliant permanent account deletion lifecycle.","Account Management Lifecycle","EPIC-005","Identity & Access Management Service","US-015","IAS-T-505.1","NestJS,TypeORM,PostgreSQL","High","High","The consumer is idempotent. It deletes the user record and associated data. It writes a final, permanent record to the deletion audit log. It leverages `ON DELETE CASCADE` where appropriate.","Code reviewed; Integration tests passing.","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-07-22","2024-08-02","100%","","Event Bus","Integration test that publishes an event and verifies data is deleted from the database.","RISK-003 is a major concern here.","Executes the final, irreversible step of data deletion, ensuring compliance with the 'right to be forgotten'."