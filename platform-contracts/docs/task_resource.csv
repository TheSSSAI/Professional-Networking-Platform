"task_id","task_name","primary_skill","secondary_skills","complexity_level","estimated_hours","required_experience","productivity_factor","adjusted_hours","team_size","collaboration_required","dependencies","critical_path","skill_learning_curve","ramp_up_hours","resource_notes","alternative_approach","risk_factors","mitigation_strategy","quality_overhead","review_hours","documentation_hours","testing_coordination","integration_overhead"
"T-INF-001-01","Terraform: Define VPC, Subnets, NAT Gateway, and Security Groups","Terraform","AWS VPC,Network Security","High","13","Senior","1.2","10.8","1","true","","true","None","1","Requires deep AWS networking knowledge. Security group rules must be validated by the security team.","Use default VPC settings, which is not recommended for production due to security constraints.","Misconfiguration can lead to security vulnerabilities or block all network traffic.","Mandatory peer review and automated security scanning of Terraform plan.","2","1.3","0.5","2","1"
"T-CD-002-03","GitHub Actions: Implement CI Workflow (Build, Test, Scan)","GitHub Actions","YAML,SAST,SCA,Security","High","29","Senior","1.2","24.2","1","true","","true","Low","4","Requires expertise in CI/CD security gates and GitHub Actions reusability patterns.","Use separate, non-reusable workflows for each service, increasing maintenance overhead.","A flaky or poorly configured CI pipeline will slow down all development.","Develop the CI workflow iteratively with a single service before applying it to all.","4.4","2.9","1.5","5","3"
"T-CD-002-04","GitHub Actions: Implement CD Workflow (Deploy to Staging)","GitHub Actions","Kubernetes,AWS ECR,Container Security","High","29","Senior","1.2","24.2","1","true","T-CD-002-03,T-CD-002-02","true","Medium","4","Requires secure handling of AWS credentials in GitHub Actions and deep knowledge of Kubernetes deployments.","Manual deployments via `kubectl apply`, which is error-prone and not scalable.","A faulty CD pipeline can bring down the staging environment or deploy vulnerable code.","Implement manual approval gates in the workflow for the first few deployments.","4.4","2.9","1.5","5","3"
"T-IAM-006-01","BE: Implement Login Endpoint and JWT Issuance","NestJS","JWT,Security,bcrypt","Medium","12","Mid","1","12","1","true","T-IAM-001-01","true","Low","2","Critical security feature. Must follow best practices for JWT generation and credential validation.","Use opaque session tokens, which is not suitable for a microservices architecture.","Incorrect JWT implementation can lead to major security vulnerabilities.","Mandatory security code review by a senior engineer or security specialist.","1.8","1.2","0.6","2","2"
"T-QA-IAM-E2E","QA: Automate E2E Tests for IAM Flow","Cypress","TypeScript,Testing,CI/CD","Medium","24","Mid","1","24","1","true","T-IAM-001-06,T-IAM-003-02,T-IAM-006-03,T-IAM-007-03","true","Low","4","Requires integration with a mail-trapping service to test the email verification link.","Manual testing only, which is not scalable and will slow down future releases.","Flaky tests can disrupt the CI/CD pipeline and reduce confidence in automated checks.","Design tests to be resilient to minor UI changes. Run tests against a stable, dedicated testing environment.","3.6","2.4","1.2","","4"