syntax = "proto3";

package platform.contracts.messaging.v1;

import "google/protobuf/timestamp.proto";
import "grpc/v1/common/pagination.proto";

// MessagingService defines the RPCs for direct messaging between users.
service MessagingService {
  // Initiates or retrieves an existing conversation between two users.
  rpc GetConversation(GetConversationRequest) returns (Conversation);
  
  // Sends a new message within a conversation.
  // This is typically handled via WebSockets, but a gRPC endpoint can exist for specific use cases.
  rpc SendMessage(SendMessageRequest) returns (Message);
  
  // Retrieves the message history for a conversation.
  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);
}

enum MessageStatus {
  MESSAGE_STATUS_UNSPECIFIED = 0;
  SENDING = 1;
  SENT = 2;
  DELIVERED = 3;
  READ = 4;
  FAILED = 5;
}

message Conversation {
  string conversation_id = 1;
  repeated string participant_ids = 2;
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp updated_at = 4;
}

message Message {
  string message_id = 1;
  string conversation_id = 2;
  string sender_id = 3;
  string content = 4;
  google.protobuf.Timestamp created_at = 5;
  MessageStatus status = 6;
}

// RPC: GetConversation
message GetConversationRequest {
  string user_id_one = 1;
  string user_id_two = 2;
}

// RPC: SendMessage
message SendMessageRequest {
  string conversation_id = 1;
  string sender_id = 2;
  string content = 3;
  string idempotency_key = 4; // To prevent duplicate messages on retries
}

// RPC: GetMessages
message GetMessagesRequest {
  string conversation_id = 1;
  string user_id = 2; // For authorization
  platform.contracts.common.v1.PaginationRequest pagination = 3;
}

message GetMessagesResponse {
  repeated Message messages = 1;
  platform.contracts.common.v1.PaginationResponse pagination = 2;
}