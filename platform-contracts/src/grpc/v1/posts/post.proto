syntax = "proto3";

package platform.contracts.posts.v1;

import "google/protobuf/timestamp.proto";
import "grpc/v1/common/pagination.proto";
import "grpc/v1/users/user.proto";

// PostsService defines the RPCs for managing posts.
service PostsService {
  rpc CreatePost(CreatePostRequest) returns (Post);
  rpc GetPost(GetPostRequest) returns (Post);
  rpc UpdatePost(UpdatePostRequest) returns (Post);
  rpc DeletePost(DeletePostRequest) returns (DeletePostResponse);
  rpc GetUserPosts(GetUserPostsRequest) returns (GetUserPostsResponse);
  rpc GetFeed(GetFeedRequest) returns (GetFeedResponse);
}

// EngagementService defines the RPCs for interacting with posts (comments, reactions).
service EngagementService {
  rpc AddComment(AddCommentRequest) returns (Comment);
  rpc GetComments(GetCommentsRequest) returns (GetCommentsResponse);
  rpc UpdateComment(UpdateCommentRequest) returns (Comment);
  rpc DeleteComment(DeleteCommentRequest) returns (DeleteCommentResponse);

  rpc AddReaction(AddReactionRequest) returns (Reaction);
  rpc RemoveReaction(RemoveReactionRequest) returns (RemoveReactionResponse);
  rpc GetReactions(GetReactionsRequest) returns (GetReactionsResponse);
}

message Post {
  string post_id = 1;
  string author_id = 2;
  string content = 3;
  repeated string image_urls = 4;
  optional LinkPreview link_preview = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  platform.contracts.users.v1.User author_details = 8;
  int32 reaction_count = 9;
  int32 comment_count = 10;
}

message Comment {
  string comment_id = 1;
  string post_id = 2;
  string author_id = 3;
  string content = 4;
  google.protobuf.Timestamp created_at = 5;
  google.protobuf.Timestamp updated_at = 6;
  platform.contracts.users.v1.User author_details = 7;
}

message Reaction {
  string reaction_id = 1;
  string post_id = 2;
  string user_id = 3;
  string reaction_type = 4; // e.g., "LIKE", "CELEBRATE"
  google.protobuf.Timestamp created_at = 5;
  platform.contracts.users.v1.User user_details = 6;
}

message LinkPreview {
  string url = 1;
  string title = 2;
  string description = 3;
  string image_url = 4;
}

// RPC: CreatePost
message CreatePostRequest {
  string author_id = 1;
  string content = 2;
  repeated string image_object_keys = 3;
  optional string link_url = 4;
}

// RPC: GetPost
message GetPostRequest {
  string post_id = 1;
  string user_id = 2; // For authorization checks
}

// RPC: UpdatePost
message UpdatePostRequest {
  string post_id = 1;
  string user_id = 2;
  string content = 3;
}

// RPC: DeletePost
message DeletePostRequest {
  string post_id = 1;
  string user_id = 2;
}

message DeletePostResponse {
  bool success = 1;
}

// RPC: GetUserPosts
message GetUserPostsRequest {
  string user_id = 1;
  string viewer_id = 2;
  platform.contracts.common.v1.PaginationRequest pagination = 3;
}

message GetUserPostsResponse {
  repeated Post posts = 1;
  platform.contracts.common.v1.PaginationResponse pagination = 2;
}

// RPC: GetFeed
message GetFeedRequest {
  string user_id = 1;
  platform.contracts.common.v1.PaginationRequest pagination = 2;
}

message GetFeedResponse {
  repeated Post posts = 1;
  platform.contracts.common.v1.PaginationResponse pagination = 2;
}

// RPC: AddComment
message AddCommentRequest {
  string post_id = 1;
  string author_id = 2;
  string content = 3;
}

// RPC: GetComments
message GetCommentsRequest {
  string post_id = 1;
  platform.contracts.common.v1.PaginationRequest pagination = 2;
}

message GetCommentsResponse {
  repeated Comment comments = 1;
  platform.contracts.common.v1.PaginationResponse pagination = 2;
}

// RPC: UpdateComment
message UpdateCommentRequest {
  string comment_id = 1;
  string user_id = 2;
  string content = 3;
}

// RPC: DeleteComment
message DeleteCommentRequest {
  string comment_id = 1;
  string user_id = 2;
}

message DeleteCommentResponse {
  bool success = 1;
}

// RPC: AddReaction
message AddReactionRequest {
  string post_id = 1;
  string user_id = 2;
  string reaction_type = 3;
}

// RPC: RemoveReaction
message RemoveReactionRequest {
  string post_id = 1;
  string user_id = 2;
}

message RemoveReactionResponse {
  bool success = 1;
}

// RPC: GetReactions
message GetReactionsRequest {
  string post_id = 1;
  platform.contracts.common.v1.PaginationRequest pagination = 2;
}

message GetReactionsResponse {
  repeated Reaction reactions = 1;
  platform.contracts.common.v1.PaginationResponse pagination = 2;
}