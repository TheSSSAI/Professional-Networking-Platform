import { Inject, Injectable, Logger } from '@nestjs/common';
import { AdminAuditLog } from '../../domain/entities/admin-audit-log.entity';
import { AdminActionType } from '../../domain/enums/admin-action-type.enum';
import { IAdminAuditLogRepository } from '../../domain/interfaces/admin-audit-log.repository';

export interface LogActionData {
  adminId: string;
  actionType: AdminActionType;
  targetId: string;
  targetType: string;
  reason?: string;
  details?: Record<string, any>;
}

@Injectable()
export class AuditService {
  private readonly logger = new Logger(AuditService.name);

  constructor(
    @Inject(IAdminAuditLogRepository)
    private readonly auditLogRepository: IAdminAuditLogRepository,
  ) {}

  /**
   * Logs an administrative action to the immutable audit trail.
   * This is a critical cross-cutting concern for all state-changing
   * administrative operations.
   * @param data - The structured data representing the administrative action.
   */
  async logAction(data: LogActionData): Promise<void> {
    this.logger.log(
      `Logging action: ${data.actionType} by admin ${data.adminId} on target ${data.targetType}:${data.targetId}`,
    );

    try {
      const auditLogEntry = new AdminAuditLog({
        id: undefined, // Will be generated by the database
        adminId: data.adminId,
        actionType: data.actionType,
        targetId: data.targetId,
        targetType: data.targetType,
        reason: data.reason,
        details: data.details || {},
        timestamp: new Date(),
      });

      await this.auditLogRepository.create(auditLogEntry);

      this.logger.log(
        `Successfully logged action: ${data.actionType} for admin ${data.adminId}`,
      );
    } catch (error) {
      this.logger.error(
        `Failed to log action: ${data.actionType} for admin ${data.adminId}. Error: ${error.message}`,
        error.stack,
      );
      // Re-throw the error to ensure that any transaction in the calling
      // command handler is rolled back. Failure to log is a critical failure.
      throw error;
    }
  }
}