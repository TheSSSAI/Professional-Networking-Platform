"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-ID-REG-001","User Authentication","Functional","Integration","Critical","true","High","Verify successful user registration with a valid, unique email and a password meeting all complexity requirements (REQ-1-001, REQ-1-092).","High - Failure blocks all new user acquisition.","Medium","Identity service is running; PostgreSQL database is accessible; No existing user with the test email.","1. Send a POST request to /auth/register with a valid DTO. 2. Verify HTTP 201 Created response. 3. Query the database to confirm user creation with 'inactive' status and a hashed password. 4. Verify a 'UserRegistered' event was published.","User record is created, status is 'inactive', password is a bcrypt hash, and the system is ready to send a verification email.","Unique valid email; Compliant password string; Date of birth indicating age > 16.","Supertest; Jest; PostgreSQL client.","2.5","5","1","Database schema must be migrated.","CI/Integration environment with a clean database.","API returns 201; Database record is correct; Event is published.","Critical - Users cannot register.","Every build","Low","Delete created user record after test.","Password must be hashed, not plaintext. Input validation must be robust.","P95 response time < 200ms.","N/A (API Test)"
"TEST-ID-REG-002","User Authentication","Security","Integration","Critical","true","High","Verify registration is rejected if the password does not meet complexity requirements (REQ-1-001).","High - Weak passwords expose users and the platform to risk.","Medium","Identity service is running with ValidationPipe enabled.","1. Send a POST to /auth/register with a password that is too short. 2. Repeat for missing uppercase, lowercase, number, and special character.","API returns HTTP 400 Bad Request with a clear validation error message for each invalid password case.","Set of passwords, each violating one specific complexity rule.","Supertest; Jest.","3","6","0.5","RegisterUser DTO (ID-T017) must have correct validators.","CI/Integration environment.","API returns 400 for all invalid password permutations.","Critical - Allows weak passwords, creating a security vulnerability.","Every build","Low","None.","Server-side validation is the primary security control.","P95 response time < 200ms.","N/A (API Test)"
"TEST-ID-LOGIN-001","User Authentication","Functional","E2E","Critical","true","High","Verify the full user authentication flow: Register, Verify Email, Login, Access Protected Route, Logout, and attempt to reuse invalidated token (REQ-1-001, REQ-1-003, REQ-1-006, REQ-1-007).","Critical - The entire user session lifecycle is fundamental to the platform's operation.","High","Full service stack (PostgreSQL, Redis) running in a test environment.","1. Register new user. 2. Extract verification token from DB/mock event. 3. Call verify endpoint. 4. Login with credentials, store access token. 5. Call a protected endpoint (e.g., /auth/profile) with token. 6. Call logout endpoint. 7. Attempt to call protected endpoint again with the same token.","Steps 1-5 succeed. Step 7 fails with HTTP 401 Unauthorized, as the token is now on the Redis blocklist.","Unique user credentials.","Supertest; Jest; PostgreSQL client; Redis client.","8","16","4","All core auth features must be implemented.","Integration environment with all services.","End-to-end flow completes as expected, with final token reuse attempt failing.","Critical - Indicates a fundamental flaw in the authentication or session management system.","Every build","Medium","Delete created user and any associated tokens.","This test is the primary validation for the JWT blocklist security control.","Entire flow should complete within reasonable time (<10s).","N/A (API Test)"
"TEST-ID-MFA-001","User Authentication","Security","E2E","High","true","High","Verify the full MFA setup and login flow (US-018, US-019).","High - A flaw in MFA logic could compromise highly privileged accounts.","High","A registered and logged-in user account.","1. Call /mfa/generate endpoint to get a secret. 2. Use `speakeasy` library to generate a valid TOTP code. 3. Call /mfa/enable with the code. 4. Verify user MFA status is enabled and recovery codes are stored. 5. Log out. 6. Log in with password (receive temp MFA token). 7. Call /mfa/login with temp token and a new TOTP code. 8. Verify final session tokens are received.","User successfully enables MFA and can complete the two-step login process to receive valid session tokens.","A dedicated test user account.","Supertest; Jest; `speakeasy` library.","6","12","3","Core login must be functional.","Integration environment.","MFA is enabled successfully, and the subsequent two-factor login succeeds.","Critical - Compromises the platform's highest level of account security.","Every release","Medium","Reset user MFA status after test.","Validates the security of the two-step authentication flow and secure storage of secrets.","Each API call should be within P95 < 200ms.","N/A (API Test)"
"TEST-ID-DEL-001","Account Management","Functional","E2E","High","true","Medium","Verify the account deletion request and cancellation cycle (US-015-016).","High - Failure could lead to non-compliance with data privacy regulations (GDPR).","High","A registered and logged-in user account.","1. Login to get a valid token. 2. Call /users/me/delete with password re-authentication. 3. Verify user status is 'pending_deletion' and `scheduledPurgeAt` is set. 4. Attempt to use old token; verify it fails. 5. Log in again with credentials. 6. Verify user status is reverted to 'active' and `scheduledPurgeAt` is cleared.","User can request deletion, which invalidates their session. Logging in during the grace period successfully cancels the deletion request.","A dedicated test user account.","Supertest; Jest; PostgreSQL client.","4","8","2","Core login and session invalidation must be functional.","Integration environment.","The user status correctly transitions from 'active' -> 'pending_deletion' -> 'active'.","High - Prevents users from managing their data lifecycle, potential legal/compliance risk.","Every release","Medium","Reset user status to 'active'.","Ensures deletion requires re-authentication.","Each API call should be within P95 < 200ms.","N/A (API Test)"