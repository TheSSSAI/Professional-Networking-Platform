"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"ID-T001","Scaffold NestJS Project & Install Dependencies","Use the NestJS CLI (`nest new`) to create the initial monorepo structure for the `identity-service`. Install all core dependencies including `@nestjs/config`, `@nestjs/jwt`, `passport`, `bcrypt`, `class-validator`, etc.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-05-24","2","","backend,setup,nestjs","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-001","","NestJS CLI,npm","Low","Low","The project is successfully created with the NestJS CLI. Running `npm install` completes without errors. The application can be started locally using `npm run start:dev`.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Local application start-up.","","Ensures code quality, consistency, and maintainability from the start of the project, reducing future technical debt."
"ID-T002","Configure ESLint, Prettier, and Jest","Configure ESLint and Prettier to enforce a consistent code style (REQ-1-063). Set up Jest for unit and integration testing, including configuring the coverage reporter to enforce the 80% minimum threshold (REQ-1-064). Add npm scripts for `lint`, `format`, and `test:cov`.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-05-24","6","","backend,quality,devops","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-001","ID-T001","ESLint,Prettier,Jest","Low","Low","The `npm run lint` command successfully checks all source files. The `npm run format` command correctly formats code. The `npm run test:cov` command runs tests and generates a coverage report, failing if coverage is below 80%.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Running npm scripts locally.","","Ensures code quality, consistency, and maintainability from the start of the project, reducing future technical debt."
"ID-T003","Define User-related TypeORM Entities","Create TypeORM entity classes for `User` and `Role`/`UserRole`. The `User` entity must include fields for email (with a unique, case-insensitive index), passwordHash, and a status enum ('inactive', 'active', 'deactivated', 'banned').","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-24","4.2","","backend,database,typeorm","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-006","ID-T001","TypeORM,TypeScript,PostgreSQL","Low","Low","The `user.entity.ts`, `role.entity.ts`, and `user-role.entity.ts` files are created. All columns are correctly typed and decorated. Relations between User and Role are defined.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Code review and successful migration generation.","","Provides the foundational data structures required for the entire identity service to function."
"ID-T004","Define Token and Lifecycle TypeORM Entities","Create TypeORM entity classes for `UserToken` (for verification/password reset), `AccountDeletionRequest`, and `UserSecurityAuditLog`. The `UserToken` entity must include fields for type, token hash, expiry, and a foreign key to the User.","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-24","6","","backend,database,typeorm","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-006","ID-T003","TypeORM,TypeScript","Low","Low","The `user-token.entity.ts`, `account-deletion-request.entity.ts`, and `user-security-audit-log.entity.ts` files are created. All columns and relations are correctly defined using TypeORM decorators.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Code review and successful migration generation.","","Provides the foundational data structures required for the entire identity service to function."
"ID-T005","Generate and Validate Initial Database Migration","Configure TypeORM CLI to connect to the local PostgreSQL database. Run the migration generation command to create the initial SQL migration script based on all defined entities. Review the script for correctness and run it against a local database to confirm the schema is created as expected.","Task","Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-05-24","5.2","","backend,database,migration","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-006","ID-T004","TypeORM CLI,SQL","Low","Low","A TypeORM migration file is generated in the `src/migrations` directory. The generated SQL correctly creates all tables, indexes (including unique, case-insensitive for email), and foreign key constraints. Running `npm run migration:run` successfully applies the migration to an empty database.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","backend.dev2@company.com","","Successful execution of the migration script against a local database.","","Provides the foundational data structures required for the entire identity service to function."
"ID-T006","Create Multi-stage Dockerfile and .dockerignore","Develop a multi-stage Dockerfile for the service (REQ-1-076). The 'builder' stage will install all dependencies and compile the TypeScript. The final 'production' stage will copy only the compiled `dist` directory and production dependencies from the builder into a minimal `node:18-alpine` base image. Create a `.dockerignore` file.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-05-27","4.2","","backend,devops,docker","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-002","ID-T001","Docker","Low","Low","The `Dockerfile` is created and uses a multi-stage pattern. The `.dockerignore` file excludes `node_modules`, `dist`, and other unnecessary files. The final container is configured to run as a non-root user for security.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Code review.","","Enables consistent deployments across all environments, simplifies the deployment process, and improves application portability."
"ID-T007","Test Local Docker Build and Run","Execute `docker build` to create the container image locally. Once built, run the container using `docker run`, passing necessary environment variables. Verify that the NestJS application starts without errors and the health check endpoint is accessible.","Task","Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-05-27","3.2","","backend,testing,docker","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-002","ID-T006","Docker CLI","Low","Low","The `docker build` command completes successfully. The `docker run` command starts the container without errors. The application logs inside the container show a successful startup. The `/health` endpoint of the running container is reachable from the host.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","devops.lead@company.com","","Successful local container execution.","","Enables consistent deployments across all environments, simplifies the deployment process, and improves application portability."
"ID-T008","Create GitHub Actions Workflow for CI Checks","Create the `.github/workflows/ci-cd.yml` file. Implement jobs for `lint` and `test` that trigger on pull requests. The test job must use the Jest coverage reporter and fail if code coverage is below 80% (REQ-1-064).","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-06-05","6.3","","devops,ci-cd,github-actions","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-003","ID-T002","GitHub Actions,YAML","Medium","Low","A pull request triggers the `lint` job, which passes or fails based on ESLint rules. The PR triggers the `test` job, which passes if tests succeed and coverage is >= 80%. The PR is blocked from merging if either job fails.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Successful workflow run on a test pull request.","","Automates the software delivery process, improves development velocity, enforces quality and security gates, and provides a reliable path to production."
"ID-T009","Integrate Security Scanning into CI Pipeline","Add jobs to the CI workflow for Static Application Security Testing (SAST) on the source code and Software Composition Analysis (SCA) to detect vulnerabilities in third-party dependencies (REQ-1-078). These jobs must also run on pull requests and fail the workflow if high-severity issues are found.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-06-06","6","","devops,ci-cd,security","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-003","ID-T008","GitHub Actions,Security Scanning Tools","Medium","Medium","The CI workflow includes a SAST scan job (e.g., using CodeQL). The CI workflow includes an SCA scan job (e.g., using `npm audit` or Snyk). The workflow fails and blocks a PR if a high-severity vulnerability is detected in either scan.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Workflow run logs showing successful execution of scan jobs.","","Automates the software delivery process, improves development velocity, enforces quality and security gates, and provides a reliable path to production."
"ID-T010","Implement CD Pipeline for Build, Push, and Deploy","Extend the workflow to run on merge to `main`. Add jobs to: 1) Build the Docker image. 2) Scan the built image for vulnerabilities. 3) Push the image to AWS ECR. 4) Deploy to the staging EKS cluster. Use GitHub's OIDC provider for secure authentication to AWS.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-06-07","12","","devops,cd,aws,kubernetes","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-003","ID-T007,ID-T009","GitHub Actions,Docker,AWS ECR,Kubernetes,AWS IAM","High","High","On merge to `main`, the workflow is triggered. A new Docker image is successfully built and pushed to ECR with a unique tag. The image is scanned, and the workflow fails if vulnerabilities are found. The Kubernetes deployment in the staging EKS cluster is updated to use the new image.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","AWS ECR and EKS must be provisioned.","Successful deployment to staging environment and verification of the running service.","Requires secure configuration of AWS OIDC and IAM roles.","Automates the software delivery process, improves development velocity, enforces quality and security gates, and provides a reliable path to production."
"ID-T011","Write Terraform for K8s Deployment and Service","Create Terraform configuration files using the Kubernetes provider to define the `Deployment` and `Service` for the `identity-service`. The Deployment should specify the container image from ECR, resource requests/limits, health probes (`/health`), and a minimum of 2 replicas for high availability (REQ-1-085).","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-06-17","8.3","","devops,iac,terraform,kubernetes","Sprint 3","This task was moved to Sprint 3 as it's part of the final IaC and deployment automation push.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-004","","Terraform,Kubernetes","Medium","Medium","Terraform files for `Deployment` and `Service` are created. The configuration is modular and uses variables for image tags and replica counts. Liveness and readiness probes are configured to target a `/health` endpoint.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-17","2024-06-28","100%","","","Successful `terraform plan` execution.","","Provides a reliable, automated, and version-controlled way to manage application infrastructure, reducing manual errors and improving deployment consistency."
"ID-T012","Write Terraform for K8s ConfigMap and Secrets","Create Terraform configurations for the Kubernetes `ConfigMap` and `Secret` resources required by the service. The `ConfigMap` will hold non-sensitive configuration (e.g., Redis host, token lifetimes). The `Secret` will manage sensitive data (e.g., database password, JWT secret) by referencing values from AWS Secrets Manager.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-06-18","7","","devops,iac,terraform,security","Sprint 3","This task was moved to Sprint 3 as it's part of the final IaC and deployment automation push.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-004","ID-T011","Terraform,Kubernetes,AWS Secrets Manager","Medium","High","Terraform files for `ConfigMap` and `Secret` are created. The `Secret` resource correctly references external secrets from AWS Secrets Manager. No plaintext secrets are stored in the Terraform files or Git repository.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-17","2024-06-28","100%","","AWS Secrets Manager must be populated.","Successful `terraform apply` and verification that the application can read the configuration and secrets.","","Provides a reliable, automated, and version-controlled way to manage application infrastructure, reducing manual errors and improving deployment consistency."
"ID-T013","Implement OpenTelemetry Module for Tracing","Create a shared `ObservabilityModule` in NestJS. Configure the OpenTelemetry SDK and a Jaeger exporter. Implement a NestJS interceptor or middleware to automatically create a root trace span for every incoming API request (REQ-1-083).","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-05-28","8.3","","backend,observability,opentelemetry","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-005","ID-T001","NestJS,OpenTelemetry,Jaeger","Medium","Medium","The `ObservabilityModule` is created and globally imported. Configuration for the Jaeger endpoint is managed via environment variables. Making an API request to any endpoint results in a trace being visible in the Jaeger UI.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","Jaeger collector must be accessible.","Viewing a trace in Jaeger.","","Provides critical visibility into the application's runtime behavior, enabling proactive issue detection, performance optimization, and faster incident response."
"ID-T014","Configure Metrics Export to Prometheus","Configure an OpenTelemetry Prometheus exporter within the `ObservabilityModule`. Expose a `/metrics` endpoint on the application that the Prometheus server can scrape. Add default metrics for HTTP request latency and counts.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-05-29","6","","backend,observability,prometheus","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-005","ID-T013","OpenTelemetry,Prometheus,NestJS","Low","Low","The `/metrics` endpoint is available and returns data in Prometheus exposition format. HTTP request metrics are correctly collected. Metrics are visible in a Grafana dashboard connected to Prometheus.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","Prometheus must be configured to scrape the endpoint.","Querying metrics in Grafana.","","Provides critical visibility into the application's runtime behavior, enabling proactive issue detection, performance optimization, and faster incident response."
"ID-T015","Configure Structured Logging for Loki","Configure the NestJS logger (e.g., using `pino`) to output all logs in a structured JSON format. Ensure that the trace ID and span ID from OpenTelemetry are automatically injected into every log line to correlate logs with traces.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-05-30","6.3","","backend,observability,logging,loki","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-005","ID-T013","NestJS,Loki,Pino","Medium","Low","All application logs are output to stdout as single-line JSON objects. Each log entry includes standard fields like `timestamp`, `level`, `message`, and `context`. Each log entry within a request context includes the `trace_id` and `span_id`.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","Log shipping agent must be configured.","Searching and filtering logs in Grafana/Loki and seeing trace IDs.","","Provides critical visibility into the application's runtime behavior, enabling proactive issue detection, performance optimization, and faster incident response."
"ID-T016","Configure Prometheus Alerting Rules","Define and implement Prometheus alerting rules for the `identity-service` (REQ-1-084). Create alerts for high P95 latency (exceeding 200ms), high API error rates (e.g., >2% of requests are 5xx), and high Redis connection errors. Configure alerts to fire to a configured Alertmanager instance.","Task","Backlog","Critical","devops.lead@company.com","product.owner@company.com","2024-05-31","8.3","","devops,observability,prometheus,alerting","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Service Foundation","EPIC-003","Professional Networking Platform - Identity Service","ENBL-005","ID-T014","Prometheus (PromQL),Alertmanager,YAML","Medium","Medium","A YAML file with Prometheus alerting rules is created. Alerts for latency, error rate, and Redis health are defined. The rules are loaded into Prometheus and are in a 'healthy' state. A test alert can be successfully fired to Alertmanager.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","Prometheus and Alertmanager must be deployed.","Viewing configured alerts in the Prometheus UI and triggering a test alert.","","Provides critical visibility into the application's runtime behavior, enabling proactive issue detection, performance optimization, and faster incident response."
"ID-T017","Create RegisterUser DTO with Validation","Create `register-user.dto.ts` using `class-validator`. Implement decorators for email format, password complexity (custom validator for REQ-1-001), and age verification (REQ-1-092). The password complexity validator must check for length, uppercase, lowercase, number, and special character.","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-27","6","","backend,auth,validation","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-001","ID-T001","NestJS,class-validator,TypeScript","Medium","Low","The DTO is created with all required fields. Validation decorators are applied correctly. A custom password complexity validator is implemented and tested. Submitting a DTO with invalid data through a NestJS ValidationPipe fails with a 400 error.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Unit tests for the custom validator and an integration test for the DTO with a ValidationPipe.","","Enables user acquisition, which is the primary driver of platform growth."
"ID-T018","Implement Registration Business Logic in AuthService","Create the `register` method in `AuthService`. It will check for email uniqueness, hash the password using bcrypt (salt 12), create a `User` entity instance with 'inactive' status, save it, generate a verification token, and save the token.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-05-28","8.3","","backend,auth,security","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-001","ID-T005,ID-T017","NestJS,TypeORM,bcrypt","Medium","High","The service method correctly checks for an existing user by email. bcrypt.hash is used to securely hash the password. A new user is saved to the database with 'inactive' status. A verification token is generated and saved to the `user_tokens` table.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Unit tests with mocked repositories.","","Enables user acquisition, which is the primary driver of platform growth."
"ID-T019","Implement Registration Controller and Event Publishing","Create the `register` endpoint in `AuthController` that uses the `AuthService`. After a successful registration, publish a 'UserRegistered' event to the event bus containing the userId and email. This is an asynchronous operation.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-05-29","6","","backend,auth,api","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-001","ID-T018","NestJS","Low","Low","A POST `/auth/register` endpoint is created. The endpoint correctly uses the `AuthService`. A successful registration results in a 'UserRegistered' event being published. The endpoint returns a 201 Created status on success and 409 Conflict on duplicate email.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","AWS SES integration for email sending.","Integration test that calls the endpoint and spies on the event emitter.","","Enables user acquisition, which is the primary driver of platform growth."
"ID-T020","Write Unit and Integration Tests for Registration","Create `auth.service.spec.ts` to unit test the registration logic, mocking TypeORM repositories and the bcrypt library. Create `auth.controller.spec.ts` or a separate e2e test to perform integration testing on the `/auth/register` endpoint using an in-memory or test database.","Task","Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-05-30","6","","backend,testing,qa","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-001","ID-T019","Jest,Supertest,NestJS Testing","Medium","Low","Unit tests for `AuthService` achieve >80% coverage. Unit tests cover success, duplicate email, and invalid password cases. Integration test successfully creates a user via the HTTP endpoint. Integration test verifies correct error codes (400, 409) are returned for invalid inputs.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","backend.dev1@company.com","","Successful test runs in the CI pipeline.","","Enables user acquisition, which is the primary driver of platform growth."
"ID-T021","Implement Email Verification Logic in AuthService","Create the `verifyEmail` method in `AuthService`. This method will receive a token string, find the corresponding `UserToken` entity in the database, check if it's valid (not used, not expired), and if so, update the associated user's status to 'active' and invalidate the token. The entire operation must be transactional.","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-27","6.2","","backend,auth,verification","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-003","ID-T018","NestJS,TypeORM","Medium","Low","The method correctly finds a token. It rejects expired or already used tokens. It updates the user status to 'active'. It invalidates the token post-verification. The operations are wrapped in a TypeORM transaction.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Unit tests.","","Activates new user accounts, which is a critical step for user onboarding and engagement."
"ID-T022","Create Email Verification Controller and Tests","Create a GET `/auth/verify/:token` endpoint in `AuthController` that calls the `AuthService.verifyEmail` method. Write unit and integration tests for this flow, covering success, expired token, used token, and invalid token scenarios.","Task","Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-05-28","8.3","","backend,auth,testing","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-003","ID-T021","NestJS,Jest,Supertest","Medium","Low","The endpoint is created and correctly calls the service. Unit tests for the service method cover all logical branches. An integration test verifies that a request with a valid token results in a user status change. Integration tests verify that invalid/expired tokens return appropriate HTTP error codes (e.g., 400 Bad Request).","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","backend.dev2@company.com","","Successful test runs.","","Activates new user accounts, which is a critical step for user onboarding and engagement."
"ID-T023","Configure JWT Module and Passport JWT Strategy","Configure the `@nestjs/jwt` module with secrets and expiration times from environment variables. Implement a Passport.js `JwtStrategy` that validates the token signature and payload, and attaches the user entity to the request object.","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-28","6.3","","backend,auth,jwt,security","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-006","ID-T001","NestJS,JWT,Passport.js","Medium","High","The `JwtModule` is configured asynchronously to read from `ConfigService`. The `JwtStrategy` is created and can validate a token's signature and expiry. The strategy correctly extracts the user ID from the payload and retrieves the user from the database.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Unit tests for the strategy.","","Enables user access to the platform's core features."
"ID-T024","Implement Login Logic in AuthService","Create the `login` method in `AuthService`. It will find the user by email, validate their status is 'active', compare the provided password with the stored hash using bcrypt, and if successful, generate and return access and refresh tokens.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-05-29","8.3","","backend,auth,jwt,security","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-006","ID-T023,ID-T022,ID-T048","NestJS,bcrypt,JWT","High","High","The method returns tokens for valid credentials and an 'active' user. The method throws an `UnauthorizedException` for incorrect credentials. The method throws a `ForbiddenException` for users with non-active status. The successful login attempt is logged to the audit trail.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Unit tests for all success and failure paths.","","Enables user access to the platform's core features."
"ID-T025","Create Login Controller and Integration Tests","Implement the POST `/auth/login` endpoint in `AuthController`. Write integration tests for the login flow, ensuring correct tokens are returned on success and appropriate error codes (401 for bad creds, 403 for inactive user) are returned on failure.","Task","Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-05-30","8.3","","backend,auth,testing","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-006","ID-T024","NestJS,Jest,Supertest","Medium","Low","The `/auth/login` endpoint is created. An integration test for a successful login passes and validates the token structure. Integration tests for incorrect password, non-existent user, and inactive user all return the correct HTTP status codes.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","backend.dev1@company.com","","Successful integration test runs.","","Enables user access to the platform's core features."
"ID-T026","Implement Token Refresh Endpoint and Strategy","Create a `jwt-refresh` Passport strategy. Create a `/auth/refresh` endpoint protected by this strategy. The endpoint will take a valid refresh token and return a new access token (REQ-1-004).","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-31","8","","backend,auth,jwt","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-006","ID-T024","NestJS,Passport.js,JWT","Medium","Medium","A `JwtRefreshStrategy` is implemented. A POST `/auth/refresh` endpoint is created and protected. A valid refresh token returns a new access token. An invalid or expired refresh token is rejected with a 401 error.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Integration tests for the refresh endpoint.","","Enables user access to the platform's core features."
"ID-T027","Implement Redis Module and Service","Create a `RedisModule` and `RedisService` to provide a reusable interface for connecting to and interacting with the AWS ElastiCache instance. The service should handle connection logic and expose methods like `setWithTtl` and `exists`.","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-29","6","","backend,redis,caching","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-007","","NestJS,Redis","Medium","Medium","The `RedisModule` can be imported by other modules. The `RedisService` successfully connects to a local Redis instance. The service provides abstracted methods for core Redis commands.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","AWS ElastiCache for Redis","Unit tests for the service.","","Enhances account security and builds user trust."
"ID-T028","Implement Logout Logic and Endpoint","Create a `/auth/logout` endpoint. The `AuthService.logout` method will extract the JTI (JWT ID) and expiration from the provided access token and call `RedisService` to store the JTI as a key with a TTL equal to the token's remaining validity (REQ-1-005).","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-30","6","","backend,auth,logout,redis","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-007","ID-T027","NestJS,Redis,JWT","Medium","Medium","A POST `/auth/logout` endpoint is created and protected. The service correctly calculates the remaining TTL for the token. The token's JTI is successfully added to Redis with the correct TTL.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Unit tests and integration tests.","","Enhances account security and builds user trust."
"ID-T029","Modify JWT Guard to Check Blocklist","Modify the `JwtAuthGuard` (or the `JwtStrategy`) to inject the `RedisService`. Before validating the token payload, the guard must check if the token's JTI exists in the Redis blocklist. If it exists, the request must be rejected with a 401 Unauthorized error.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-05-31","8","","backend,auth,security,redis","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-007","ID-T028","NestJS,Redis,Passport.js","High","High","The `JwtAuthGuard` is updated to perform the Redis check. A request with a valid but blocklisted token is rejected. A request with a valid, non-blocklisted token is allowed. The performance impact of the Redis check is negligible (<5ms).","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","An E2E-style integration test: login, logout, then attempt to use the old token against a protected endpoint.","Guard must be configured to fail-closed if Redis is unavailable.","Enhances account security and builds user trust."
"ID-T030","Implement Password Reset Request Logic","Create a POST `/auth/request-password-reset` endpoint. The service logic will find the user by email (if they exist), invalidate any previous reset tokens for that user, generate a new secure, time-limited (1 hour) token, store it in `user_tokens`, and publish a `PasswordResetRequested` event. The response must be generic to prevent email enumeration (REQ-1-003).","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-05-29","8.3","","backend,auth,password-reset","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-010-012","ID-T005","NestJS,TypeORM,crypto","Medium","Medium","The endpoint is created. A new, unique, time-limited token is generated and stored for a valid user. The 'PasswordResetRequested' event is published. The endpoint returns a 200 OK with a generic message for both existing and non-existing emails.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Integration tests.","","Provides a critical self-service account recovery mechanism."
"ID-T031","Implement Password Reset Execution Logic","Create a POST `/auth/reset-password` endpoint. The service will validate the provided token (not used, not expired), validate the new password against complexity rules, hash the new password, update the user's `passwordHash`, and invalidate the reset token.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-05-30","9.3","","backend,auth,password-reset,security","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-010-012","ID-T030","NestJS,TypeORM,bcrypt","Medium","High","The endpoint is created. A valid token and complex password successfully updates the user's password hash. An invalid or expired token is rejected with a 400 error. A non-complex password is rejected with a 400 error. The reset token is invalidated after successful use.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Integration tests.","","Provides a critical self-service account recovery mechanism."
"ID-T032","Integrate Session Invalidation into Password Reset","Modify the successful password reset logic to invalidate all of the user's active sessions. This involves identifying all JWTs issued to the user (if tracked) or using a global flag, and adding them to the Redis blocklist (REQ-1-005).","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-05-31","8.3","","backend,auth,password-reset,security","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-010-012","ID-T031,ID-T029","NestJS,JWT,Redis","Medium","High","After a successful password reset, any previously issued access/refresh tokens are invalid. Attempting to use an old token against a protected endpoint after a password reset results in a 401 error.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","E2E-style integration test: log in, get token; reset password; try to use old token.","","Provides a critical self-service account recovery mechanism."
"ID-T033","Write E2E Tests for Full Password Reset Journey","Create a comprehensive integration test that covers the full user journey: request reset, (mock) receive email, use token to set new password, then log in with the new password. Test all failure modes: expired token, used token, invalid password.","Task","Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-05-31","8","","backend,testing,qa,auth","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Core User Authentication & Registration","EPIC-001","Professional Networking Platform - Identity Service","US-010-012","ID-T032","Jest,Supertest","Medium","Low","Test successfully simulates the entire reset flow. Test covers expired token scenario. Test covers invalid token scenario. Test verifies session invalidation by attempting to use a pre-reset token post-reset.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","backend.dev1@company.com","","Successful test run in CI.","","Provides a critical self-service account recovery mechanism."
"ID-T034","Create MFA Module, Service, and Secret Generation Endpoint","Create a new `MfaModule` and `MfaService`. Integrate `speakeasy` and `qrcode` libraries. Implement an endpoint that generates a new TOTP secret for the authenticated user and returns it as a data URL for a QR code.","Task","Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-06-05","8.3","","backend,security,mfa","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-018","ID-T006","NestJS,speakeasy,qrcode","Medium","High","A POST `/mfa/generate` endpoint is created and protected. The endpoint returns a valid data URL for a scannable QR code. The TOTP secret is temporarily stored pending verification.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Integration test for the generation endpoint.","","Enhances platform security and reduces the risk of account takeovers."
"ID-T035","Implement MFA Verification and Enablement Endpoint","Create a POST `/mfa/enable` endpoint. This endpoint takes a TOTP code from the user. The `MfaService` validates this code against the temporarily stored secret. If valid, the secret is permanently stored (encrypted) for the user, and their MFA status is enabled.","Task","Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-06-06","8.3","","backend,security,mfa","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-018","ID-T034","NestJS,speakeasy,crypto","High","High","The `/mfa/enable` endpoint is created. A valid TOTP code successfully enables MFA for the user. An invalid code is rejected. The MFA secret is stored encrypted in the database.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Integration tests.","","Enhances platform security and reduces the risk of account takeovers."
"ID-T036","Implement Recovery Code Generation and Storage","Upon successful MFA enablement, generate a set of 10-12 single-use recovery codes. Store hashes of these codes in the database, associated with the user. The plaintext codes are displayed to the user only once.","Task","Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-06-07","6.3","","backend,security,mfa","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-018","ID-T035","NestJS,crypto","Medium","Medium","A list of plaintext recovery codes is returned upon successful MFA enablement. Hashes of these codes are stored in a new `user_recovery_codes` table. The plaintext codes are not stored anywhere on the server.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Integration test that checks for the returned codes and the stored hashes.","","Enhances platform security and reduces the risk of account takeovers."
"ID-T037","Write E2E Tests for MFA Setup Flow","Create an integration test that simulates the full MFA setup flow: call generate, use the secret to generate a TOTP code, call enable with the code, and verify the response and database state.","Task","Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-06-10","10.2","","backend,testing,security,mfa","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-018","ID-T036","Jest,Supertest,speakeasy","High","Medium","The test successfully enables MFA for a test user. The test verifies that an incorrect TOTP code is rejected. The test verifies that recovery codes are generated and stored correctly.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","backend.dev1@company.com","","Successful CI run.","","Enhances platform security and reduces the risk of account takeovers."
"ID-T038","Modify AuthService Login for Two-Step Flow","Update the `AuthService.login` method. After validating the password, check if the user has MFA enabled. If so, generate a short-lived, single-purpose JWT (an 'MFA token') and return it instead of the final session tokens. This token signals to the client that a second step is required.","Task","Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-06-10","8.3","","backend,auth,mfa,security","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-019","ID-T024,ID-T035","NestJS,JWT","High","High","The `login` method's return type is updated to reflect the two possible outcomes. An MFA-enabled user receives a temporary MFA token upon correct password entry. A non-MFA user receives the final session tokens as before.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Unit tests.","","Enforces the added security layer provided by MFA."
"ID-T039","Implement MFA Verification Endpoint for Login","Create a POST `/mfa/login` endpoint. It will accept the temporary MFA token and a TOTP code. The service will validate the MFA token's signature and purpose, then validate the TOTP code against the user's stored secret. If both are valid, it will issue the final access and refresh tokens.","Task","Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-06-11","8.3","","backend,auth,mfa,security","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-019","ID-T038","NestJS,speakeasy,JWT","High","High","The `/mfa/login` endpoint is created. It requires a valid temporary MFA token for access. It successfully validates a correct TOTP code. Upon success, it returns the same session tokens as a normal login.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Integration tests.","","Enforces the added security layer provided by MFA."
"ID-T040","Write E2E Tests for MFA and Non-MFA Login","Update the existing login integration tests. Create a new test suite for the two-step MFA login flow. The test must simulate the full journey: password login -> receive temp token -> use temp token and TOTP to get final tokens. Also, ensure the standard login for non-MFA users is not broken.","Task","Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-06-12","8.3","","backend,testing,qa,mfa","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-019","ID-T039","Jest,Supertest","High","Medium","An integration test for the non-MFA login flow passes. An integration test for the MFA login flow passes. The MFA test verifies that an incorrect TOTP code fails. The MFA test verifies that the temporary token cannot be used for anything other than MFA verification.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","backend.dev1@company.com","","Successful CI run.","","Enforces the added security layer provided by MFA."
"ID-T041","Implement Account Deactivation Endpoint","Create a POST `/users/me/deactivate` endpoint. The corresponding service method will change the authenticated user's status to 'deactivated', then call the `AuthService` to invalidate all active sessions for that user by adding their tokens to the Redis blocklist.","Task","Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-05-30","6.3","","backend,account-lifecycle","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-013-014","ID-T029","NestJS,TypeORM,Redis","Medium","Medium","The endpoint is created and protected. It successfully updates the user's status to 'deactivated'. It triggers the invalidation of the user's sessions. It publishes an 'AccountDeactivated' event to the event bus.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Integration tests.","","Improves user retention by providing a non-permanent alternative to account deletion."
"ID-T042","Implement Account Reactivation in Login Flow","Modify the `AuthService.login` method. After successful password validation, check if the user's status is 'deactivated'. If so, update the status to 'active' before proceeding to generate and return the session tokens.","Task","Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-05-31","6","","backend,auth,account-lifecycle","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-013-014","ID-T024","NestJS,TypeORM","Medium","Medium","The login logic includes a check for the 'deactivated' status. A successful login for a deactivated account changes its status to 'active'. The user receives valid session tokens upon reactivation. The operation must be atomic.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","","","Unit tests and integration tests.","","Improves user retention by providing a non-permanent alternative to account deletion."
"ID-T043","Write E2E Tests for Deactivation/Reactivation Cycle","Create an integration test that covers the full user journey: 1. Login. 2. Deactivate account. 3. Attempt to use old token (should fail). 4. Log in again (reactivate). 5. Verify account status is 'active' and new token works.","Task","Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-05-31","8.3","","backend,testing,qa,account-lifecycle","Sprint 1","Deliver a fully operational, observable, and containerized Identity Service with complete core authentication flows and foundational account lifecycle features.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-013-014","ID-T041,ID-T042","Jest,Supertest","Medium","Low","The test successfully deactivates a user. The test verifies that the old token is invalid after deactivation. The test successfully reactivates the user by logging in. The test verifies the user's status is 'active' in the database after reactivation.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-05-20","2024-05-31","100%","backend.dev2@company.com","","Successful CI run.","","Improves user retention by providing a non-permanent alternative to account deletion."
"ID-T044","Implement Deletion Request Endpoint with Re-authentication","Create a POST `/users/me/delete` endpoint. This endpoint must require the user to submit their current password for re-authentication. On success, the service will set the user's status to 'pending_deletion', set a `scheduledPurgeAt` timestamp 14 days in the future, invalidate all sessions, and publish an 'AccountDeletionRequested' event.","Task","Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-06-11","9.3","","backend,security,gdpr,account-lifecycle","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-015-016","ID-T029","NestJS,TypeORM,bcrypt","High","High","The endpoint is created and requires password re-authentication. A correct password updates the user status to 'pending_deletion'. An incorrect password is rejected with a 401/403 error. All active sessions are invalidated upon successful request. An event is published to the event bus.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Integration tests.","","Ensures compliance with data privacy regulations (GDPR, CCPA) and builds user trust."
"ID-T045","Implement Deletion Cancellation in Login Flow","Modify the `AuthService.login` method. After successful password validation, check if the user's status is 'pending_deletion'. If so, and the current time is before `scheduledPurgeAt`, change the status to 'active', clear the `scheduledPurgeAt` timestamp, and proceed with login. This should also publish an 'AccountDeletionCancelled' event.","Task","Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-06-12","6","","backend,auth,account-lifecycle","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-015-016","ID-T024","NestJS,TypeORM","Medium","Medium","The login logic correctly identifies a user in the grace period. A successful login reverts the user's status to 'active'. The purge timestamp is cleared from the user record. An event is published to cancel any scheduled background jobs.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Unit tests and integration tests.","","Ensures compliance with data privacy regulations (GDPR, CCPA) and builds user trust."
"ID-T046","Write E2E Tests for Deletion Request/Cancellation Cycle","Create an integration test that covers the full journey: 1. Request deletion. 2. Verify status is 'pending_deletion'. 3. Attempt to use old token (should fail). 4. Log in again (cancel deletion). 5. Verify status is 'active'. Also test login attempt after grace period expires.","Task","Backlog","Critical","qa.engineer@company.com","product.owner@company.com","2024-06-13","10.5","","backend,testing,qa,account-lifecycle","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-015-016","ID-T044,ID-T045","Jest,Supertest,Time-mocking libraries","High","Medium","Test successfully places a user in 'pending_deletion' state. Test verifies that logging in cancels the deletion. Test verifies that attempting to log in after the grace period fails.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","backend.dev1@company.com, backend.dev2@company.com","","Successful CI run.","","Ensures compliance with data privacy regulations (GDPR, CCPA) and builds user trust."
"ID-T047","Create Audit Module and Service","Create a new `AuditModule` and `AuditService`. The service will have a `logSecurityEvent` method that accepts a user ID, action type, IP address, and other metadata. The method will create a `UserSecurityAuditLog` entity and save it to the database asynchronously.","Task","Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-06-13","8.3","","backend,security,audit","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-020","ID-T004","NestJS,TypeORM","Medium","Medium","The `AuditModule` and `AuditService` are created. The `logSecurityEvent` method correctly persists a log entry to the database. The database operation is non-blocking (asynchronous).","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Unit tests for the service.","","Increases user trust and platform security perception."
"ID-T048","Integrate Audit Logging into Auth and MFA Services","Inject the `AuditService` into the `AuthService` and `MfaService`. Call the `logSecurityEvent` method at all required points: successful login, failed login, password reset/change, MFA enable/disable.","Task","Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-06-13","8.3","","backend,security,audit,integration","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-020","ID-T047,ID-T024,ID-T031,ID-T035","NestJS","Medium","Medium","A failed login attempt calls `auditService.logSecurityEvent` with the 'FAILED_LOGIN' action. A successful password change calls the service with the 'PASSWORD_CHANGE' action. Enabling MFA calls the service with the 'MFA_ENABLED' action.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Integration tests.","","Increases user trust and platform security perception."
"ID-T049","Implement API Endpoint to Retrieve Audit Logs","Create a GET `/audit/security` endpoint that is protected and returns a paginated list of security audit logs for the currently authenticated user only. The logs should be sorted in reverse chronological order.","Task","Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-06-14","6.3","","backend,api,audit","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-020","ID-T047","NestJS,TypeORM","Medium","Low","The endpoint is created and requires authentication. It returns only the logs for the authenticated user. The response is paginated. Logs are sorted with the most recent first.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","","","Integration tests.","","Increases user trust and platform security perception."
"ID-T050","Write Integration Tests for Audit Logging","Create an integration test suite for auditing. For each logged action (e.g., login), perform the action via an API call and then call the audit log retrieval endpoint to verify that the correct log entry was created.","Task","Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-06-14","10.2","","backend,testing,qa,audit","Sprint 2","Implement advanced security (MFA), complete the account deletion lifecycle, and fully automate the CI/CD pipeline and infrastructure as code.","Advanced Security & Account Lifecycle","EPIC-002","Professional Networking Platform - Identity Service","US-020","ID-T048,ID-T049","Jest,Supertest","High","Medium","A test for failed login successfully verifies the audit log entry. A test for password change verifies the audit log entry. A test verifies that User A cannot retrieve User B's audit logs.","Code reviewed; Unit tests passing; Integration tests passing; Documentation updated","2024-05-17T09:00:00Z","2024-05-17T09:00:00Z","2024-06-03","2024-06-14","100%","backend.dev1@company.com, backend.dev2@company.com","","Successful CI run.","","Increases user trust and platform security perception."