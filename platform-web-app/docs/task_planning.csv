"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"IAM-001-T01","DB: Define and Migrate User Schema","Define the `User` entity including fields for email, passwordHash, and status. Create a migration script with a unique, case-insensitive index on the email column.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-10","6.3","1","backend,database,schema,iam","Sprint 1","Establish foundational user registration and secure login flows.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-001","","PostgreSQL,TypeORM/Prisma,SQL","Low","Low","Migration script successfully applies the `users` table schema; Email column has a `UNIQUE` constraint; A case-insensitive index is created on the email column.","Code reviewed; Migration script tested on local DB; Merged to main.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","10%","None","","Migration testing.","Migration must run before application deployment.","Foundation for user data storage."
"IAM-001-T02","BE: Implement Registration DTO and Validation","Create the `RegisterUserDto.ts` file with `class-validator` decorators to enforce password complexity rules from REQ-1-001 and email format validation.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-11","4.2","1","backend,nestjs,dto,validation,iam","Sprint 1","Establish foundational user registration and secure login flows.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-001","","NestJS,TypeScript,class-validator","Low","Low","DTO correctly reflects the registration payload; Decorators for all password complexity rules and email validation are implemented; Unit tests pass for valid and invalid inputs.","Code reviewed; Unit tests passing with >80% coverage.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","7%","None","","Unit testing.","Part of the IAM service deployment.","Defines the API contract for user registration."
"IAM-001-T03","BE: Implement `registerUser` GraphQL Mutation and Service","Implement the `registerUser` mutation and service method to check email uniqueness, hash the password with bcrypt, and save the new user with 'inactive' status.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-15","8.7","2","backend,graphql,security,iam,bcrypt","Sprint 1","Establish foundational user registration and secure login flows.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-001","IAM-001-T01,IAM-001-T02","NestJS,GraphQL,TypeORM/Prisma,bcrypt","Medium","High","Mutation correctly processes valid data; Password is correctly hashed; Duplicate email errors are handled; New user is created with 'inactive' status.","Code reviewed by a senior engineer; Unit tests passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","14%","None","","Unit and Integration testing.","Core part of the IAM service deployment.","Enables the creation of new user accounts."
"IAM-001-T04","QA: Write Unit & E2E Tests for Registration","Develop unit tests for `AuthService` registration logic and E2E tests for the GraphQL endpoint covering happy path, validation errors, and conflict errors.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-01-17","8.3","2","qa,testing,e2e,jest,iam","Sprint 1","Establish foundational user registration and secure login flows.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-001","IAM-001-T03","Jest,Supertest,NestJS Testing","Medium","Low","Unit test coverage for registration logic >80%; E2E tests cover 201, 409, and 400 status codes for the registration endpoint.","All tests are passing in the CI pipeline; Test cases reviewed and approved.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","13%","Backend team for endpoint details.","","All tests must be automated.","Part of the CI validation pipeline.","Ensures the reliability and correctness of the user registration feature."
"IAM-003-T01","BE: Configure `@nestjs/jwt` Module","Configure and import the `JwtModule` in the `AuthModule`. Set up secret key and expiry times (15 min access, 7 days refresh) from environment variables.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-10","3.2","1","backend,nestjs,jwt,security,iam","Sprint 1","Establish foundational user registration and secure login flows.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-006","","NestJS,JWT,TypeScript","Low","Medium","`JwtModule` is correctly configured; Secret keys and expiry times are loaded from environment configuration; Configuration is testable.","Code reviewed; Module loads correctly in unit tests.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","5%","None","","Unit testing.","Requires environment variables to be set in deployment environment.","Foundation for secure session management."
"IAM-003-T02","BE: Implement `login` GraphQL Mutation and Service Logic","Create the `login` mutation and service logic to find user, check status is 'active', compare password with bcrypt, and handle failures with appropriate exceptions.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-16","8.3","2","backend,graphql,security,iam,bcrypt","Sprint 1","Establish foundational user registration and secure login flows.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-006","IAM-001-T01","NestJS,GraphQL,bcrypt","Medium","High","Service validates user status; bcrypt.compare is used; Generic `UnauthorizedException` is thrown for failures to prevent enumeration; Specific exception for unverified accounts.","Code reviewed by a senior engineer; Unit tests passing.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","13%","None","","Unit and Integration testing.","Core part of the IAM service deployment.","Enables authenticated access to the platform."
"IAM-003-T03","BE: Implement Access and Refresh Token Generation","In `AuthService`, create a method to generate signed JWT access (15min) and refresh (7day) tokens. Access token payload must include `sub` and `jti`.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-17","6","1","backend,nestjs,jwt,security,iam","Sprint 1","Establish foundational user registration and secure login flows.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-006","IAM-003-T01","NestJS,JWT,TypeScript","Medium","Medium","Access token has 15-min expiry; Refresh token has 7-day expiry; Tokens are signed correctly; Access token payload contains a unique `jti`.","Code reviewed; Unit tests verify token structure and expiry.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","10%","None","","Unit testing.","Part of the IAM service deployment.","Enables session management for logged-in users."
"IAM-003-T04","QA: Write Unit & E2E Tests for Login Flow","Create E2E tests for the `login` mutation covering successful login, incorrect password, non-existent user, and unverified user scenarios.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-01-19","8.3","2","qa,testing,e2e,jest,iam","Sprint 1","Establish foundational user registration and secure login flows.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-006","IAM-003-T02,IAM-003-T03","Jest,Supertest,NestJS Testing","Medium","Low","Unit test coverage for login logic >80%; E2E tests cover success and all specified failure conditions with correct status codes.","All tests are passing in the CI pipeline.","2024-01-08T09:00:00Z","2024-01-08T09:00:00Z","2024-01-08","2024-01-19","13%","Backend team.","","All tests must be automated.","Part of the CI validation pipeline.","Ensures the reliability and security of the user login feature."
"IAM-002-T01","DB: Define and Migrate VerificationToken Schema","Define the `VerificationToken` entity with fields for token, userId (FK), and `expiresAt`. Create and apply the database migration.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-23","4.2","1","backend,database,schema,iam","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-002","IAM-001-T01","PostgreSQL,TypeORM/Prisma","Low","Low","Migration script creates `verification_tokens` table with correct FK and unique index on token.","Migration runs successfully.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","7%","None","","Migration testing.","Migration must run before application deployment.","Data model for email verification tokens."
"IAM-002-T02","BE: Implement Verification Token Generation Service","Create a `VerificationTokenService` to generate a secure random string, save it to the DB with a 24-hour expiry, associated with a user ID.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-25","8.3","2","backend,nestjs,security,iam","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-002","IAM-002-T01","NestJS,TypeScript,Node.js crypto","Medium","High","Generated token is unique and unguessable; Token is stored correctly with user ID and 24h expiry.","Code reviewed; Unit tests pass.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","13%","None","","Unit testing.","Part of IAM service.","Core logic for generating secure verification tokens."
"IAM-002-T03","BE: Implement `verifyEmail` Mutation and Service Logic","Create `verifyEmail` mutation. Service logic to find token, validate it's not expired/used, update user status to 'active', and delete token atomically.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-29","10.7","2","backend,graphql,iam,transaction","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-003","IAM-002-T02","NestJS,GraphQL,TypeORM/Prisma","Medium","Medium","Valid token updates user to 'active'; Expired/invalid tokens are rejected; Token is deleted on success; Operation is transactional.","Code reviewed; E2E tests pass for all scenarios.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","17%","None","","E2E testing.","Part of IAM service.","Allows users to activate their accounts."
"IAM-002-T04","BE: Integrate Registration with Event Bus and SES","Modify `registerUser` service to publish a `UserRegistered` event. Create a listener to consume this event and send a verification email via AWS SES.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-01-30","12","3","backend,aws-ses,events,iam,integration","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-002","IAM-001-T03,IAM-002-T02","NestJS,AWS SES,Event-driven architecture","High","Medium","`UserRegistered` event is emitted; Listener consumes event; Successful API call to AWS SES is made; API response is not blocked by email sending.","Code reviewed; Integration test passes; Email is captured by a test service.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","19%","DevOps for SES configuration.","AWS SES","Integration testing.","Requires AWS credentials for SES.","Automates the sending of verification emails."
"IAM-004-T01","BE: Configure Redis Integration","Install and configure an `ioredis` client. Create a shared `CacheModule` and `CacheService` to abstract Redis connections and commands.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-24","6.3","1","backend,redis,cache,iam,infra","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-007","","NestJS,Redis,ioredis","Medium","Medium","Application successfully connects to Redis; `CacheService` can perform SET/GET; Connection logic has error handling.","Code reviewed; Integration tests for the service pass.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","10%","DevOps for Redis instance.","Redis instance (local or cloud).","Integration testing.","Requires Redis connection string in environment.","Foundation for caching and session invalidation."
"IAM-004-T02","BE: Implement TokenBlocklistService","Create a `TokenBlocklistService` using `CacheService` with methods `addToBlocklist(jti, expiresIn)` and `isBlocklisted(jti)`.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-01-26","6","1","backend,redis,security,iam","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-007","IAM-004-T01","NestJS,Redis,TypeScript","Low","Low","`addToBlocklist` uses Redis SET with EX; `isBlocklisted` uses Redis EXISTS/GET.","Code reviewed; Unit tests pass.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","10%","None","","Unit testing.","Part of IAM service.","Core logic for token invalidation."
"IAM-004-T03","BE: Implement `logout` Mutation","Create the `logout` GraphQL mutation. The service logic will extract `jti` from the access token and call `TokenBlocklistService` to invalidate it.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-01-29","5.2","1","backend,graphql,security,iam","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-007","IAM-004-T02","NestJS,GraphQL","Low","Low","Mutation is defined; Service extracts `jti`; `addToBlocklist` is called correctly.","Code reviewed; Integration test verifies token is added to Redis.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","8%","None","","Integration testing.","Part of IAM service.","Allows users to securely end their session."
"IAM-004-T04","BE: Implement Global JWT Guard with Blocklist Check","Create a `JwtAuthGuard` that extends Passport's `AuthGuard('jwt')`. Override `handleRequest` to add a call to `TokenBlocklistService.isBlocklisted()` after default validation.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-01-31","10.7","3","backend,nestjs,security,iam,guard","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-007","IAM-004-T02","NestJS,Passport.js,JWT","High","High","Guard is created and applied globally; Guard rejects blocklisted JWTs with `UnauthorizedException`; Guard passes valid, non-blocklisted tokens.","Code reviewed by security lead; E2E tests pass.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","17%","None","","E2E testing.","Critical security component.","Enforces token invalidation for all authenticated endpoints."
"IAM-004-T05","QA: Write E2E Test for Logout and Token Invalidation","Create an E2E test that logs in, accesses a protected endpoint, logs out, then attempts to access the same endpoint with the old token, asserting a 401 error.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-02-02","8.3","2","qa,testing,e2e,security,iam","Sprint 2","Complete the account activation loop and implement secure session termination.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-007","IAM-004-T03,IAM-004-T04","Jest,Supertest,NestJS Testing","Medium","Low","Test authenticates and accesses resource pre-logout; Test calls logout; Test asserts that subsequent call with original token fails with 401.","Test passes in CI/CD pipeline.","2024-01-22T09:00:00Z","2024-01-22T09:00:00Z","2024-01-22","2024-02-02","13%","Backend team.","","Test must be automated.","Part of CI validation pipeline.","Validates the entire secure logout feature."
"IAM-005-T01","DB: Create PasswordResetToken schema and migration","Define and migrate a schema for storing password reset tokens, including a unique token, user ID foreign key, and an expiry timestamp.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-02-06","4","1","backend,database,iam","Sprint 3","Implement the complete, secure self-service password recovery user journey.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-010","IAM-001-T01","PostgreSQL,TypeORM/Prisma","Low","Low","Migration script creates `password_reset_tokens` table with correct columns, FK, and unique index.","Migration tested and merged.","2024-02-05T09:00:00Z","2024-02-05T09:00:00Z","2024-02-05","2024-02-16","6%","","","Migration test.","","Enables storage for password reset process."
"IAM-005-T02","BE: Implement `requestPasswordReset` mutation (token gen, no email)","Create the `requestPasswordReset` mutation. Service logic to find user by email, generate a secure token, invalidate old tokens, and save the new one.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-02-08","8","2","backend,graphql,security,iam","Sprint 3","Implement the complete, secure self-service password recovery user journey.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-010","IAM-005-T01","NestJS,GraphQL,Node.js crypto","Medium","Medium","Generic success response is always returned to prevent enumeration; Old tokens are invalidated; New token is generated and stored.","Code reviewed; Unit tests pass.","2024-02-05T09:00:00Z","2024-02-05T09:00:00Z","2024-02-05","2024-02-16","13%","","","Unit and integration testing.","","Core logic for initiating password reset."
"IAM-005-T03","BE: Integrate `requestPasswordReset` with SES","Modify the `requestPasswordReset` flow to publish an event, which is consumed by a listener to send the password reset email via AWS SES.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-02-12","6","1","backend,aws-ses,events,iam","Sprint 3","Implement the complete, secure self-service password recovery user journey.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-011","IAM-005-T02","NestJS,AWS SES,Event-driven architecture","Medium","Medium","Event is published on successful token generation; Listener sends email with correct link.","Integration test verifies email is captured by a test service.","2024-02-05T09:00:00Z","2024-02-05T09:00:00Z","2024-02-05","2024-02-16","10%","","AWS SES","Integration testing.","","Enables delivery of password reset instructions."
"IAM-005-T04","BE: Implement `resetPassword` mutation","Create the `resetPassword` mutation. Service logic to validate token, hash new password, update user record, and invalidate all active sessions.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-02-14","12","3","backend,graphql,security,iam,bcrypt","Sprint 3","Implement the complete, secure self-service password recovery user journey.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-012","IAM-005-T01,IAM-004-T02","NestJS,GraphQL,bcrypt,Redis","High","High","Valid token allows password update; Invalid/expired tokens are rejected; New password is hashed; All user sessions are blocklisted.","Code reviewed by senior engineer; Integration tests pass.","2024-02-05T09:00:00Z","2024-02-05T09:00:00Z","2024-02-05","2024-02-16","19%","","","Integration and E2E testing.","","Allows users to finalize password recovery."
"IAM-005-T05","QA: Write E2E tests for the full password reset flow","Create an E2E test that requests a reset link, captures the email, uses the link, resets the password, and logs in with the new password.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-02-16","8","2","qa,testing,e2e,iam","Sprint 3","Implement the complete, secure self-service password recovery user journey.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-012","IAM-005-T04","Cypress/Playwright,Mailosaur","High","Low","Test covers request, email receipt, token validation, password update, and successful login with new credentials.","Test passes in CI/CD pipeline.","2024-02-05T09:00:00Z","2024-02-05T09:00:00Z","2024-02-05","2024-02-16","13%","Backend team.","","Full E2E automation.","","Ensures the reliability of the password recovery journey."
"IAM-006-T01","DB: Update User schema for MFA secret, recovery codes","Add an encrypted `mfaSecret` column and a `hashedRecoveryCodes` array/jsonb column to the User schema via a migration.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-02-20","4","1","backend,database,iam,security","Sprint 4","Implement Multi-Factor Authentication (MFA) setup and login.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-018","","PostgreSQL,TypeORM/Prisma","Low","Low","Migration adds the required columns to the `users` table.","Migration tested and merged.","2024-02-19T09:00:00Z","2024-02-19T09:00:00Z","2024-02-19","2024-03-01","6%","","","","","Data model foundation for MFA."
"IAM-006-T02","BE: Implement MFA setup flow (secret gen, QR code data)","Create endpoint to generate a TOTP secret, a corresponding QR code data URI, and a set of single-use recovery codes for the user.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-02-23","12","3","backend,security,iam,mfa","Sprint 4","Implement Multi-Factor Authentication (MFA) setup and login.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-018","IAM-006-T01","NestJS,speakeasy,qrcode","High","High","Endpoint returns a valid TOTP URI for QR code generation; Recovery codes are generated and hashed before being associated with the user.","Code reviewed by security lead; Unit tests pass.","2024-02-19T09:00:00Z","2024-02-19T09:00:00Z","2024-02-19","2024-03-01","19%","","","Unit testing.","","Enables users to begin the MFA setup process."
"IAM-006-T03","BE: Implement MFA verification logic during setup","Create an endpoint that takes a temporary MFA secret and a TOTP code, validates the code, and if valid, permanently saves the encrypted secret to the user record.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-02-27","8","2","backend,security,iam,mfa","Sprint 4","Implement Multi-Factor Authentication (MFA) setup and login.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-018","IAM-006-T02","NestJS,speakeasy","Medium","High","Endpoint correctly validates TOTP code; On success, MFA secret is encrypted and saved, and user's MFA status is enabled.","Code reviewed; Integration tests pass.","2024-02-19T09:00:00Z","2024-02-19T09:00:00Z","2024-02-19","2024-03-01","13%","","","Integration testing.","","Finalizes MFA activation for a user."
"IAM-006-T04","BE: Modify login flow to handle multi-step MFA check","Refactor the login service to be a two-step process for MFA-enabled users. Step 1 validates password and returns a temporary token. Step 2 validates the TOTP code using the temp token and returns final session tokens.","Task","Sprint Backlog","Critical","backend.dev2@company.com","product.owner@company.com","2024-02-28","10","3","backend,security,iam,mfa,refactor","Sprint 4","Implement Multi-Factor Authentication (MFA) setup and login.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-019","IAM-006-T03","NestJS,JWT,Security Architecture","High","High","Login for MFA user correctly initiates two-step flow; Login for non-MFA user remains a single step; Final tokens are only issued after both steps are successful.","Code reviewed by senior engineer; Integration tests pass.","2024-02-19T09:00:00Z","2024-02-19T09:00:00Z","2024-02-19","2024-03-01","16%","","","Integration testing.","","Enables MFA-protected login."
"IAM-006-T05","BE: Implement rate limiting for MFA attempts","Using Redis, implement a rate limiter on the MFA verification step of the login flow to lock the account after 5 failed attempts.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-02-29","6","2","backend,security,iam,mfa,redis","Sprint 4","Implement Multi-Factor Authentication (MFA) setup and login.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-019","IAM-004-T01,IAM-006-T04","NestJS,Redis","Medium","Medium","After 5 failed MFA attempts, the endpoint returns a 429 error; The lock expires after the configured duration.","Code reviewed; Integration tests pass.","2024-02-19T09:00:00Z","2024-02-19T09:00:00Z","2024-02-19","2024-03-01","10%","","","Integration testing.","","Protects against MFA brute-force attacks."
"IAM-006-T06","QA: Write E2E tests for MFA setup and login","Create E2E tests for the full MFA lifecycle: enabling MFA, logging out, and logging back in using a TOTP code.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-03-01","8","2","qa,testing,e2e,mfa","Sprint 4","Implement Multi-Factor Authentication (MFA) setup and login.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-019","IAM-006-T04","Cypress/Playwright,TOTP libraries","High","Low","Test successfully enables MFA, logs out, and logs back in using a generated TOTP code.","Test passes in CI/CD pipeline.","2024-02-19T09:00:00Z","2024-02-19T09:00:00Z","2024-02-19","2024-03-01","13%","","","","","Ensures the reliability of the MFA feature."
"IAM-007-T01","BE: Implement `deactivateAccount` mutation","Create the mutation to update user status to 'deactivated' and add all their active tokens to the blocklist.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-03-07","8","2","backend,graphql,iam","Sprint 5","Implement temporary account deactivation and seamless reactivation.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-013","IAM-004-T02","NestJS,GraphQL,Redis","Medium","Low","User status is updated to 'deactivated'; User is logged out.","Integration test passes.","2024-03-04T09:00:00Z","2024-03-04T09:00:00Z","2024-03-04","2024-03-15","13%","","","","","Allows users to temporarily leave the platform."
"IAM-007-T02","BE: Update other services to handle 'deactivated' status","Modify Profile, Posts, and Search services to filter out or anonymize content from users with 'deactivated' status. This is a cross-cutting concern.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-03-12","16","5","backend,refactor,iam,cross-cutting","Sprint 5","Implement temporary account deactivation and seamless reactivation.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-013","IAM-007-T01","NestJS,TypeORM/Prisma,OpenSearch","High","Medium","Deactivated user's profile is not visible; Their posts are hidden; Their comments are anonymized; They are removed from search results.","Integration tests across services pass.","2024-03-04T09:00:00Z","2024-03-04T09:00:00Z","2024-03-04","2024-03-15","25%","All backend teams.","","","","Enforces the invisibility of deactivated accounts."
"IAM-007-T03","BE: Modify `login` service to handle reactivation","Update the login logic to check for a 'deactivated' status. If credentials are correct, change status to 'active' before issuing tokens.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-03-13","6","2","backend,iam,login","Sprint 5","Implement temporary account deactivation and seamless reactivation.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-014","IAM-003-T02","NestJS","Medium","Medium","Successful login with a deactivated account's credentials changes status to 'active' and grants a session.","Integration test passes.","2024-03-04T09:00:00Z","2024-03-04T09:00:00Z","2024-03-04","2024-03-15","10%","","","","","Allows users to seamlessly return to the platform."
"IAM-007-T04","QA: Write E2E tests for deactivation and reactivation","Create an E2E test that deactivates an account, verifies content is hidden/anonymized, then logs back in and verifies content is restored.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-03-15","8","2","qa,testing,e2e,iam","Sprint 5","Implement temporary account deactivation and seamless reactivation.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-014","IAM-007-T03,IAM-007-T02","Cypress/Playwright","High","Low","Test covers the full lifecycle: active -> deactivate -> verify hidden -> reactivate -> verify restored.","Test passes in CI/CD pipeline.","2024-03-04T09:00:00Z","2024-03-04T09:00:00Z","2024-03-04","2024-03-15","13%","","","","","Ensures the reliability of the deactivation/reactivation feature."
"IAM-008-T01","BE: Implement `requestAccountDeletion` mutation","Create mutation for permanent account deletion with password re-authentication. Update user status to 'pending_deletion'.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-03-21","8","2","backend,graphql,iam,security","Sprint 6","Implement permanent account deletion request and cancellation flow.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-015","","NestJS,GraphQL","Medium","Medium","Requires correct password; Updates status to 'pending_deletion'; Invalidates sessions.","Integration test passes.","2024-03-18T09:00:00Z","2024-03-18T09:00:00Z","2024-03-18","2024-03-29","13%","","","","","Allows users to initiate GDPR-compliant account deletion."
"IAM-008-T02","BE: Implement background job scheduling","Integrate a job scheduler (e.g., BullMQ, AWS EventBridge) to schedule the final data purge for 14 days in the future, and a warning email for 13 days in the future.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-03-26","12","3","backend,scheduler,iam,gdpr","Sprint 6","Implement permanent account deletion request and cancellation flow.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-015","IAM-008-T01","NestJS,BullMQ/AWS EventBridge","High","High","On deletion request, two jobs are scheduled for the correct future timestamps.","Integration test verifies jobs are created in the queue.","2024-03-18T09:00:00Z","2024-03-18T09:00:00Z","2024-03-18","2024-03-29","19%","DevOps","Job Queue Infrastructure","","","Automates the grace period and notification for account deletion."
"IAM-008-T03","BE: Implement logic to cancel deletion","Modify login to handle 'pending_deletion' status. Create an endpoint to cancel the deletion, which changes user status back to 'active' and removes the scheduled jobs.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-03-27","8","2","backend,scheduler,iam","Sprint 6","Implement permanent account deletion request and cancellation flow.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-016","IAM-008-T02","NestJS,BullMQ/AWS EventBridge","Medium","Medium","Logging in as 'pending_deletion' user cancels the process; Scheduled jobs are removed from the queue.","Integration test passes.","2024-03-18T09:00:00Z","2024-03-18T09:00:00Z","2024-03-18","2024-03-29","13%","","","","","Allows for user retention by enabling deletion cancellation."
"IAM-008-T04","BE: Implement job to send 24-hour warning email","Create the background job that runs 13 days after deletion request, which queries for the user and sends a final warning email via SES.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-03-28","6","2","backend,scheduler,iam,aws-ses","Sprint 6","Implement permanent account deletion request and cancellation flow.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-017","IAM-008-T02","NestJS,AWS SES","Medium","Low","Job executes at the correct time; Email is successfully sent.","Integration test with time-mocking passes.","2024-03-18T09:00:00Z","2024-03-18T09:00:00Z","2024-03-18","2024-03-29","10%","","","","","Provides a final chance for user retention before data purge."
"IAM-008-T05","QA: Write E2E tests for requesting and canceling deletion","Create an E2E test that requests deletion, verifies the user is logged out, logs back in, and successfully cancels the deletion.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-03-29","8","2","qa,testing,e2e,iam","Sprint 6","Implement permanent account deletion request and cancellation flow.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-016","IAM-008-T03","Cypress/Playwright","Medium","Low","Test successfully covers request, logout, login, and cancellation flow.","Test passes in CI/CD pipeline.","2024-03-18T09:00:00Z","2024-03-18T09:00:00Z","2024-03-18","2024-03-29","13%","","","","","Ensures the reliability of the deletion cancellation feature."
"IAM-009-T01","BE: Develop the data purge worker/script","Create the background job that performs the permanent deletion of user data from PostgreSQL, OpenSearch, and S3.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-04-05","16","5","backend,gdpr,iam,data","Sprint 7","Implement final data purge and user security audit trail.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-015","IAM-008-T02","NestJS,PostgreSQL,OpenSearch,AWS S3","High","Critical","Job successfully deletes all PII and primary content from all data stores; Interactive content is anonymized.","Code reviewed by senior engineer; Integration tests pass.","2024-04-01T09:00:00Z","2024-04-01T09:00:00Z","2024-04-01","2024-04-12","25%","","","","","Fulfills the 'right to be forgotten' for GDPR compliance."
"IAM-009-T02","BE: Implement the immutable deletion audit log","As part of the purge job, write a record to a separate, immutable log (e.g., a specific table with restricted permissions) with user ID and timestamps.","Task","Sprint Backlog","High","backend.dev1@company.com","product.owner@company.com","2024-04-08","6","2","backend,gdpr,iam,logging","Sprint 7","Implement final data purge and user security audit trail.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-015","IAM-009-T01","NestJS,PostgreSQL","Medium","Medium","A log entry is created upon successful data purge.","Integration test passes.","2024-04-01T09:00:00Z","2024-04-01T09:00:00Z","2024-04-01","2024-04-12","10%","","","","","Provides an audit trail for compliance and disaster recovery."
"IAM-009-T03","DB: Create schema for user security audit events","Define and migrate a schema for `user_security_audit_events` to store event type, timestamp, IP address, user agent, etc.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-04-03","4","1","backend,database,iam,logging","Sprint 7","Implement final data purge and user security audit trail.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-020","","PostgreSQL,TypeORM/Prisma","Low","Low","Migration successfully creates the audit events table with appropriate indexing.","Migration tested and merged.","2024-04-01T09:00:00Z","2024-04-01T09:00:00Z","2024-04-01","2024-04-12","6%","","","","","Data model for the user-facing security audit trail."
"IAM-009-T04","BE: Implement logging for all required security events","Refactor existing services (login, password change, MFA) to publish security events to be consumed by a logger that writes to the new audit table.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-04-09","12","3","backend,refactor,iam,logging,security","Sprint 7","Implement final data purge and user security audit trail.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-020","IAM-009-T03","NestJS,Event-driven architecture","Medium","Low","Successful/failed logins, password changes, and MFA changes all result in a new record in the audit table.","Integration tests for each event type pass.","2024-04-01T09:00:00Z","2024-04-01T09:00:00Z","2024-04-01","2024-04-12","19%","","","","","Populates the security audit trail with data."
"IAM-009-T05","BE: Implement a paginated API to fetch user's security events","Create a new GraphQL query for the authenticated user to fetch their own security events, with support for pagination.","Task","Sprint Backlog","High","backend.dev2@company.com","product.owner@company.com","2024-04-11","8","2","backend,graphql,iam,api","Sprint 7","Implement final data purge and user security audit trail.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-020","IAM-009-T04","NestJS,GraphQL,TypeORM/Prisma","Medium","Low","Endpoint returns a paginated list of security events for the authenticated user only; Unauthorized requests are rejected.","Integration tests pass.","2024-04-01T09:00:00Z","2024-04-01T09:00:00Z","2024-04-01","2024-04-12","13%","","","","","Allows users to view their security history."
"IAM-009-T06","QA: Write tests for data purge and audit trail API","Create integration tests for the data purge worker and the new security audit trail API.","Task","Sprint Backlog","High","qa.engineer@company.com","product.owner@company.com","2024-04-12","8","2","qa,testing,iam,gdpr","Sprint 7","Implement final data purge and user security audit trail.","Identity & Access Management (IAM) Microservice","EPIC-001","Professional Networking Platform","US-015","IAM-009-T01,IAM-009-T05","Jest,Supertest","Medium","Low","Test verifies that after the purge job runs, user data is gone; Test verifies the audit trail API returns correct data.","Tests pass in CI/CD pipeline.","2024-04-01T09:00:00Z","2024-04-01T09:00:00Z","2024-04-01","2024-04-12","13%","","","","","Ensures reliability of data deletion and auditing."