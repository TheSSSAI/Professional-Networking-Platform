# .github/workflows/cd.yml
# Continuous Deployment Workflow for the Professional Networking Platform Web App
# This workflow triggers on merges to the 'main' branch. It builds a Docker image,
# pushes it to AWS ECR, and then triggers a deployment to the AWS EKS cluster.
# It aligns with requirements REQ-1-077 and REQ-1-078.

name: 'CD: Deploy Platform Web App to Staging'

on:
  push:
    branches:
      - main

jobs:
  deploy-staging:
    name: 'Deploy to Staging Environment'
    runs-on: ubuntu-latest
    environment: staging

    permissions:
      id-token: write # Required for OIDC
      contents: read

    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4

      - name: 'Configure AWS Credentials'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_STAGING }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 'Login to Amazon ECR'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build and Push Docker Image to ECR'
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Set up Kubeconfig for EKS'
        uses: aws-actions/amazon-eks-cluster-entrypoint@v2
        with:
          cluster_name: ${{ secrets.EKS_CLUSTER_NAME }}

      - name: 'Deploy to EKS'
        run: |
          # This is a placeholder for the actual deployment strategy.
          # In a real-world scenario, this might involve:
          # 1. Updating a Kubernetes manifest file with the new image tag.
          # 2. Applying the manifest using `kubectl apply -f k8s/deployment.yml`.
          # 3. Or, more robustly, updating a GitOps repository (e.g., ArgoCD, Flux) which would trigger the deployment.
          
          echo "Deploying image ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }} to EKS cluster ${{ secrets.EKS_CLUSTER_NAME }}"
          
          # Example using kubectl rollout:
          # kubectl set image deployment/platform-web-app platform-web-app=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }} -n platform-staging
          # kubectl rollout status deployment/platform-web-app -n platform-staging